#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, platform, tempfile, os, subprocess, zipfile, argparse, shutil, re
import xml.etree.ElementTree as e
from os.path import join as pjoin

# Parse command line arguments
parser = argparse.ArgumentParser(
    description='Generate CMakeLists.txt to build an FMU',
    epilog="""It is assumed that the current directory contains an XML file called "modelDescription.xml" and a directory "sources" containing .c and .h files.
Built by Tomas HÃ¤rdin at UMIT Research Lab 2016."""
    )
parser.add_argument('-l','--link',
                    type=str,
                    help='Libraries to link with, separated with commas.',
                    default='')
parser.add_argument('-d','--definitions',
                    type=str,
                    help='Adds flags to the compiler. Separate with commas and remove the -. Example: -d DFLAG,DKEY=VALUE,msse3',
                    default='')
parser.add_argument('-i','--includedir',
                    type=str,
                    help='Include directories. Separate with commas.',
                    default='')
parser.add_argument('-t','--templatedir',
                    action='append',
                    help='Directories to pull template code from, to avoid copy-pasting it all over the place. May also be a filename')
parser.add_argument('-m','--md2hdr',
                    type=str,
                    help='Location of modeldescription2header')
parser.add_argument('-x','--srcxml2xml',
                    type=str,
                    help='Location of xml2wrappedxml.py',
                    default='')
parser.add_argument('-s','--wrappersrc',
                    type=str,
                    help='Location of wrapper sources',
                    default='')
parser.add_argument('-c','--console',
                    action='store_true',
                    default=False,
                    help='Generate CONSOLE target')
# Get FMU type (co-simulation or model exchange)
parser.add_argument('-f','--fmuType',
                    type=str,
                    help='Fmu type',
                    default="cs")

args = parser.parse_args()
link_libraries = args.link.split(",")
definitions = " -".join(args.definitions.split(","))
if len(definitions):
    definitions = "-"+definitions
include_directories = args.includedir.split(',')

iswrapper = 1 if len(args.srcxml2xml) else 0

# For logging errors and messages
def log(m):
    print( "%s: %s" % (sys.argv[0],m) )

# Parse xml file
tree = e.parse('modelDescription.xml')
root = tree.getroot()

# Get FMU version
fmiVersion = root.get('fmiVersion')

# Get model identifier.
modelIdentifier = "modelIdentifier"
if fmiVersion == "1.0":
    modelIdentifier = root.get('modelIdentifier')
elif fmiVersion == "2.0":
    if args.fmuType == "cs":
        modelIdentifier = root.find('CoSimulation').get('modelIdentifier')
    elif args.fmuType == "me":
        modelIdentifier = root.find('ModelExchange').get('modelIdentifier')
print('modelIdentifier')
print(modelIdentifier)

# Get system info
system = platform.system()
is_64bits = sys.maxsize > 2**32
# 'win32' seems to be the proper name for all Windows FMUs since FMILibrary-2.0.1
path = "CMakeLists.txt"

with open(path,'w') as f:

    # Find all .c and .h files in the current FMU folder
    cwd = os.getcwd()
    source_files = []
    dirs = [pjoin(cwd,"sources")]
    if os.path.exists(pjoin(cwd,"fmu")):
        dirs += [pjoin(cwd,"fmu")]

    dirs.extend([pjoin(cwd,td) for td in args.templatedir])
    for dir in dirs:
        if os.path.isfile(dir):
            source_files.append(dir)
        else:
            for s in os.listdir(dir):
                if os.path.isfile(pjoin(dir,s)):
                    if os.path.splitext(s)[1] in ['.c','.cpp','.h','.hpp','.fmu']:
                        source_files.extend([pjoin(dir,s)])
                else:
                    source_files.extend([ pjoin(pjoin(dir,s),w)
                        for w in os.listdir(pjoin(dir,s))
                        if os.path.isfile(pjoin(pjoin(dir,s),w))
                        and os.path.splitext(w)[1] in ['.c','.cpp','.h','.hpp','.fmu']
                    ])





    # Check if there were any files
    if not len(source_files):
        log("No C files found in 'sources/'. Exiting...")
        exit(1)

    # Create a CMakeLists.txt
    for d in args.templatedir:
        # Behave like a predictable set()
        d2 = d if os.path.isdir(d) else os.path.dirname(d)
        if not d2 in include_directories:
          include_directories.append(d2)

    source_files        = ["${CMAKE_CURRENT_SOURCE_DIR}/"+os.path.relpath(s).replace('\\','/') for s in source_files]
    source_files.sort()
    include_directories = [os.path.relpath(i).replace('\\','/') for i in include_directories]
    include_directories.sort()
    files = "SET(SRCS\n    " + "\n    ".join(source_files) + "\n)"
    md2hdr = os.path.relpath(args.md2hdr).replace('\\','/')
    if iswrapper:
        md2hdr += " -w 1 -x "
        srcxml2xml = os.path.relpath(args.srcxml2xml).replace('\\','/')
        dependentFMU = modelIdentifier.split('_')
        dependentFMU.pop(0)
        dependentFMU = '_'.join(dependentFMU)
        if len(args.wrappersrc):
            wrappersrcs = os.path.relpath(args.wrappersrc).replace('\\','/')
            wrappersrc = """
set(COPY_SOURCES_COMMAND ${COPY_CMAKE_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/%s ${CMAKE_CURRENT_SOURCE_DIR}/)

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/sources)
  execute_process(COMMAND ${COPY_SOURCE_COMMAND})
endif() """%(wrappersrcs)
        else :
            wrappersrc = ""

        xml2xml = """set(COPY_FMU_COMMAND ${COPY_CMAKE_COMMAND} ${%s_FMU} ${CMAKE_CURRENT_SOURCE_DIR}/fmu/)

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/fmu/%s.fmu)
  execute_process(COMMAND ${COPY_FMU_COMMAND})
endif()
%s

ADD_CUSTOM_COMMAND(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/fmu/%s.fmu
  COMMAND ${COPY_FMU_COMMAND}
  DEPENDS ${%s_FMU})


ADD_CUSTOM_COMMAND(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml
        COMMAND ${CMAKE_COMMAND} -E echo Packing ${%s_FMU}
  COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/%s -f
       ${%s_FMU} >
    ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml
  DEPENDS ${%s_FMU} )
    """ % (
            dependentFMU.upper(),
            dependentFMU,
            wrappersrc,
            dependentFMU,
            dependentFMU.upper(),
            dependentFMU.upper(),
            srcxml2xml,
            dependentFMU.upper(),
            dependentFMU.upper(),
    )
    else:
        md2hdr += " -x "
        xml2xml = ""

    # libm needs special handling since it doesn't exist/isn't needed on Windows
    libmextra = ''
    if 'm' in link_libraries:
        link_libraries.remove('m')
        libmextra = "\nif (UNIX)\n    set(LIBS ${LIBS} m)\nendif ()"

    console = """ADD_EXECUTABLE(${TARGET}_c ${SRCS})
SET_TARGET_PROPERTIES(${TARGET}_c PROPERTIES COMPILE_DEFINITIONS CONSOLE)
TARGET_LINK_LIBRARIES( ${TARGET}_c ${LIBS} )
"""

    cmakestuff = """#This file is generated by cmake-generator, DO NOT EDIT


CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(ARCH "linux64" CACHE STRING "Architecture: linux64, linux32, win32...")
SET(TARGET %s)
SET(%s_FMU ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}.fmu CACHE INTERNAL "" FORCE)

if (CMAKE_VERSION VERSION_LESS "3.5.0")
    set(COPY_CMAKE_COMMAND cp)
    set(ZIP_CMAKE_COMMAND  zip -r)
else ()
    set(ZIP_CMAKE_COMMAND  ${CMAKE_COMMAND} -E tar cf --format=zip)
    set(COPY_CMAKE_COMMAND ${CMAKE_COMMAND} -E copy)
endif ()

%s
%s

ADD_CUSTOM_COMMAND(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/sources/modelDescription.h
  COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/%s
    ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml >
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/modelDescription.h
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml )

ADD_DEFINITIONS( %s )
ADD_LIBRARY(${TARGET} SHARED ${SRCS})
INCLUDE_DIRECTORIES(
    %s
)
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES PREFIX "")
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/binaries/${ARCH}")
SET(LIBS %s)%s
TARGET_LINK_LIBRARIES( ${TARGET} ${LIBS} )

%s

if (CMAKE_VERSION VERSION_LESS "3.5.0")
    set(ZIP_COMMAND  zip -r ${%s_FMU} .)
    set(COPY_COMMAND cp ${SRCS} ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources)
else ()
    # Would use "." for path, but that results in paths like ./modelDescription.xml in the .fmu which is probably a bad thing
    # We could maybe work around this by running a subcommand that lists all files in ${CMAKE_CURRENT_BINARY_DIR}/fmu into a variable
    set(ZIP_COMMAND  ${ZIP_CMAKE_COMMAND} ${%s_FMU} modelDescription.xml binaries sources)
    set(COPY_COMMAND ${CMAKE_COMMAND} -E copy ${SRCS} ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources)
endif ()


# There doesn't seem to be a way to repack an FMU in case it is deleted.
# A post-build command is good enough for now.
# Having to have a separate series of commands for Windows is also not optimal
if (WIN32)
    add_custom_command(TARGET ${TARGET} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo Packing ${TARGET}.fmu
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries/win32
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${TARGET}.dll ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries/win32/
        COMMAND COMMAND ${COPY_COMMAND}
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml ${CMAKE_CURRENT_BINARY_DIR}/fmu
        # Later: COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt ${CMAKE_CURRENT_BINARY_DIR}/fmu
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR}/fmu ${ZIP_COMMAND}
        MAIN_DEPENDENCY ${TARGET}
    )
else ()
    add_custom_command(TARGET ${TARGET} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo Packing ${TARGET}.fmu
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_BINARY_DIR}/binaries ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries
        COMMAND COMMAND ${COPY_COMMAND}
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml ${CMAKE_CURRENT_BINARY_DIR}/fmu
        # Later: COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt ${CMAKE_CURRENT_BINARY_DIR}/fmu
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR}/fmu ${ZIP_COMMAND}
        MAIN_DEPENDENCY ${TARGET}
    )
endif ()
""" % (modelIdentifier,
       modelIdentifier.upper(),
       xml2xml,
       files,
       md2hdr,
       definitions,
       "\n    ".join(include_directories),
       " ".join(link_libraries),
       libmextra,
       console if args.console else "",
       modelIdentifier.upper(),
       modelIdentifier.upper()
)

    f.write( cmakestuff )
    f.close()
    print("Created %s" % (path))
    # Done!
