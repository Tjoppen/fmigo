FROM ubuntu:trusty
RUN apt-get update

#
# Some notes on the packages installed here where it may not be obvious why
# they are installed:
#
#  build-essential: for gcc
#              git: for being able to fetch submodules, since gitlab doesn't
#                   do this for us yet
#           psmisc: for killall
#  mpi-default-bin: for mpiexec
#        coreutils: for sha1sum
#       python-dev: for pip to build psutil
#      libxml2-dev: for lxml
#     libxstl1-dev: for lxml
#
RUN apt-get install --yes \
        build-essential ninja-build git python bc psmisc \
        protobuf-compiler protobuf-c-compiler libprotobuf-dev \
        libsuitesparse-dev libzmqpp-dev libhdf5-dev \
        libopenmpi-dev libgsl0-dev mpi-default-bin \
        wget coreutils clang-3.8 valgrind \
        python-pip python-dev libxml2-dev libxslt1-dev ccache
RUN apt-get install -y python-numpy python-scipy python-matplotlib
RUN apt-get install -y python3-pip libmatio-dev

WORKDIR /root

# CMake 3.5.0
RUN wget https://www.cmake.org/files/v3.5/cmake-3.5.0.tar.gz
RUN echo "4a10116e061bbe806ffdd5164aca7780b0e98f4e  cmake-3.5.0.tar.gz" > cmake-3.5.0.tar.gz.sha1
RUN sha1sum -c cmake-3.5.0.tar.gz.sha1
RUN tar xf cmake-3.5.0.tar.gz
WORKDIR /root/cmake-3.5.0
RUN ./configure
RUN make
RUN make install

# Need gcc-4.9 for -std=c++14
# https://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-on-ubuntu#581497
# https://github.com/moby/moby/issues/5383
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update
RUN apt-get install -y gcc-4.9 g++-4.9
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.8 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-3.8

#
# Create user, since mpiexec doesn't like to run as root
#
RUN useradd -ms /bin/bash gitlab-ci

# Copy code into image
RUN  mkdir              /home/gitlab-ci/umit
COPY .                  /home/gitlab-ci/umit
RUN  chown -R gitlab-ci /home/gitlab-ci/umit

# Install python requirements
WORKDIR /home/gitlab-ci/umit
RUN pip2 install -r Buildstuff/requirements.txt
RUN pip3 install -r Buildstuff/requirements.txt

# Finally, make us run as gitlab-ci
USER gitlab-ci
WORKDIR /home/gitlab-ci/umit
RUN export PATH=/usr/lib/ccache:$PATH

# docker doesn't copy empty directories for some reason
RUN mkdir 3rdparty/FMILibrary-2.0.1/ThirdParty/Expat/expat-2.1.0/src
RUN mkdir build
RUN mkdir build-clang
WORKDIR /home/gitlab-ci/umit/build
# First build without libmatio, then run another build with it enabled
RUN cmake .. -G Ninja -DCMAKE_CXX_FLAGS="-Wno-literal-suffix" -DUSE_MATIO=OFF
RUN ninja install
RUN cmake .. -G Ninja -DCMAKE_CXX_FLAGS="-Wno-literal-suffix" -DUSE_MATIO=ON
RUN ninja install
WORKDIR /home/gitlab-ci/umit/build-clang
RUN cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DUSE_MATIO=OFF
RUN ninja install
RUN cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DUSE_MATIO=ON
RUN ninja install
