#!/usr/bin/python

import sys, platform, tempfile, os, subprocess, zipfile, argparse, shutil, re
import xml.etree.ElementTree as e
from os.path import join as pjoin

# Parse command line arguments
parser = argparse.ArgumentParser(
    description='Compile an FMU using CMake.',
    epilog="""It is assumed that the current directory contains an XML file called "modelDescription.xml" and a directory "sources" containing .c and .h files.
Built by Stefan Hedman at UMIT Research Lab 2013."""
    )
parser.add_argument('-o','--outdir',
                    type=str,
                    help='Where the FMU file will be saved. Default is current directory.',
                    default='.')
parser.add_argument('-l','--link',
                    type=str,
                    help='Libraries to link with, separated with commas.',
                    default='')
parser.add_argument('-d','--definitions',
                    type=str,
                    help='Adds flags to the compiler. Separate with commas and remove the -. Example: -d DFLAG,DKEY=VALUE,msse3',
                    default='')
args = parser.parse_args()
link_libraries = args.link.split(",")
definitions = " -".join(args.definitions.split(","))
if len(definitions):
    definitions = "-"+definitions

# For logging errors and messages
def log(m):
    print( "%s: %s" % (sys.argv[0],m) )

# Parse xml file
tree = e.parse('modelDescription.xml')
root = tree.getroot()

# Get FMU version
fmiVersion = root.get('fmiVersion')

# Get FMU type (co-simulation or model exchange)
fmuType = "cs"

print (fmiVersion)

# Get model identifier.
modelIdentifier = "modelIdentifier"
if fmiVersion == "1.0":
    modelIdentifier = root.get('modelIdentifier')
elif fmiVersion == "2.0":
    if fmuType == "cs":
        modelIdentifier = root.find('CoSimulation').get('modelIdentifier')
    elif fmuType == "me":
        modelIdentifier = root.find('ModelExchange').get('modelIdentifier')

# Get system info
system = platform.system()
is_64bits = sys.maxsize > 2**32
arch = system.lower()+( "64" if is_64bits else "32")

# Create temp dir for the cmake file
d = tempfile.mkdtemp()
path = pjoin(d,"CMakeLists.txt")

with open(path,'w') as f:

    # Find all .c and .h files in the current FMU folder
    cwd = os.getcwd()
    c_files = [ pjoin(cwd,"sources",s) for s in os.listdir(pjoin(cwd,"sources")) if os.path.isfile(pjoin(cwd,"sources",s)) and re.match(r"^.*\.cp?p?$",s) ]
    h_files = [ pjoin(cwd,"sources",s) for s in os.listdir(pjoin(cwd,"sources")) if os.path.isfile(pjoin(cwd,"sources",s)) and ".h" in s ]

    # Check if there were any files
    if not len(c_files):
        log("No C files found in 'sources/'. Exiting...")
        exit(1)

    # Create a CMakeLists.txt
    cmakestuff = """CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(ARCH "%s" CACHE STRING "Architecture: linux64, linux32, win32...")
SET(TARGET %s)
SET(SRCS %s)
SET(HEADERS %s)
ADD_DEFINITIONS( %s )
ADD_LIBRARY(${TARGET} SHARED ${SRCS} ${HEADERS})
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES PREFIX "")
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/binaries/${ARCH}")
TARGET_LINK_LIBRARIES( ${TARGET} %s )""" % (arch, modelIdentifier, " ".join(c_files), " ".join(h_files), definitions, " ".join(link_libraries) )
    f.write( cmakestuff )
    f.close()
    print("\nCreated CMakeLists.txt (%s):\n" % (path))
    print( cmakestuff)
    print("");

    # Run CMake
    print("Running CMake...\n");
    os.chdir(d)
    if subprocess.call(["cmake", "."]) == 0:
        print("\nRunning make...\n");
        if subprocess.call(["make"]) == 0:

            # Zip everything needed in FMU
            with zipfile.ZipFile("%s.fmu" % (modelIdentifier), 'w', zipfile.ZIP_DEFLATED) as myzip:
                # TODO: Should look up what library type (.so, .dll... was created)
                myzip.write(pjoin('binaries',arch,modelIdentifier+".so"))
                os.chdir(cwd)
                myzip.write('modelDescription.xml')
                sources = [ pjoin("sources",s) for s in os.listdir(pjoin(cwd,"sources")) if os.path.isfile(pjoin(cwd,"sources",s)) and (".c" in s or ".h" in s) ]
                for s in sources:
                    myzip.write(s)

            # Move the FMU to the out directory
            shutil.move(pjoin(d,modelIdentifier+".fmu"),args.outdir)
            print("\n"+pjoin(args.outdir,modelIdentifier+".fmu")+" created.");
        else:
            log("Make failed.")
    else:
        log("CMake failed.")
        exit()
