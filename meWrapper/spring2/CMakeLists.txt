#This file is generated by cmake-generator, DO NOT EDIT

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(ARCH "linux64" CACHE STRING "Architecture: linux64, linux32, win32...")
SET(TARGET wrapper_springs2)
SET(SRCS
    ${CMAKE_CURRENT_SOURCE_DIR}/../../templates/fmi2/fmuTemplate.h
    ${CMAKE_CURRENT_SOURCE_DIR}/../../templates/fmi2/fmuTemplate_impl.h
    ${CMAKE_CURRENT_SOURCE_DIR}/../../templates/fmi2/strlcpy.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/commonWrapper/gsl-interface.c
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/commonWrapper/gsl-interface.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/commonWrapper/modelExchange.c
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/commonWrapper/modelExchange.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/commonWrapper/modelExchangeFmiInterface.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/fmi2Functions.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/modelDescription.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/wrapper.c
)

ADD_CUSTOM_COMMAND(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml
  COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/../../fmu-builder/xml2wrappedxml.py
    ${CMAKE_CURRENT_SOURCE_DIR}/fmu/modelDescription.xml >
    ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/fmu/modelDescription.xml )
    
ADD_CUSTOM_COMMAND(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/sources/modelDescription.h
  COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/../../fmu-builder/modeldescription2header -x
    ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml >
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/modelDescription.h
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml )

ADD_DEFINITIONS(  )
ADD_LIBRARY(${TARGET} SHARED ${SRCS})
INCLUDE_DIRECTORIES(
    ../../../FMILibrary-2.0.1/ThirdParty/FMI/default
    ../../templates/fmi2
)
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES PREFIX "")
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/binaries/${ARCH}")
SET(LIBS cgsl fmilib fmilib_shared)
if (UNIX)
    set(LIBS ${LIBS} m)
endif ()
TARGET_LINK_LIBRARIES( ${TARGET} ${LIBS} )


ADD_EXECUTABLE(${TARGET}_c ${SRCS})
SET_TARGET_PROPERTIES(${TARGET}_c PROPERTIES COMPILE_DEFINITIONS CONSOLE)
TARGET_LINK_LIBRARIES( ${TARGET}_c ${LIBS} )


if (CMAKE_VERSION VERSION_LESS "3.5.0")
    set(ZIP_COMMAND  zip -r ${CMAKE_CURRENT_SOURCE_DIR}/${TARGET}.fmu .)
    set(COPY_COMMAND cp ${SRCS} ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources)
else ()
    # Would use "." for path, but that results in paths like ./modelDescription.xml in the .fmu which is probably a bad thing
    # We could maybe work around this by running a subcommand that lists all files in ${CMAKE_CURRENT_BINARY_DIR}/fmu into a variable
    set(ZIP_COMMAND  ${CMAKE_COMMAND} -E tar cf ${CMAKE_CURRENT_SOURCE_DIR}/${TARGET}.fmu --format=zip modelDescription.xml binaries sources)
    set(COPY_COMMAND ${CMAKE_COMMAND} -E copy ${SRCS} ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources)
endif ()


# There doesn't seem to be a way to repack an FMU in case it is deleted.
# A post-build command is good enough for now.
# Having to have a separate series of commands for Windows is also not optimal
if (WIN32)
    add_custom_command(TARGET ${TARGET} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo Packing ${TARGET}.fmu
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries/win32
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${TARGET}.dll ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries/win32/
        COMMAND COMMAND ${COPY_COMMAND}
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml ${CMAKE_CURRENT_BINARY_DIR}/fmu
        # Later: COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt ${CMAKE_CURRENT_BINARY_DIR}/fmu
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR}/fmu ${ZIP_COMMAND}
        MAIN_DEPENDENCY ${TARGET}
    )
else ()
    add_custom_command(TARGET ${TARGET} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo Packing ${TARGET}.fmu
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/fmu/sources
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_BINARY_DIR}/binaries ${CMAKE_CURRENT_BINARY_DIR}/fmu/binaries
        COMMAND COMMAND ${COPY_COMMAND}
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/modelDescription.xml ${CMAKE_CURRENT_BINARY_DIR}/fmu
        # Later: COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt ${CMAKE_CURRENT_BINARY_DIR}/fmu
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR}/fmu ${ZIP_COMMAND}
        MAIN_DEPENDENCY ${TARGET}
    )
endif ()
