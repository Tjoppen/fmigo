// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fmitcp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fmitcp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fmitcp_proto {

namespace {

const ::google::protobuf::Descriptor* fmitcp_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmitcp_message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* fmitcp_message_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* fmi2_event_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_event_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_instantiate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_instantiate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_instantiate_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_instantiate_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_initialize_slave_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_initialize_slave_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_initialize_slave_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_initialize_slave_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_terminate_slave_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_terminate_slave_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_terminate_slave_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_terminate_slave_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_reset_slave_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_reset_slave_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_reset_slave_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_reset_slave_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_slave_instance_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_slave_instance_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_slave_instance_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_slave_instance_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_real_input_derivatives_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_real_input_derivatives_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_real_input_derivatives_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_real_input_derivatives_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_output_derivatives_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_output_derivatives_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_output_derivatives_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_output_derivatives_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_cancel_step_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_cancel_step_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_cancel_step_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_cancel_step_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_do_step_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_do_step_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_do_step_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_do_step_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_status_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_status_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_status_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_status_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_integer_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_integer_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_integer_status_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_integer_status_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_boolean_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_status_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_boolean_status_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_string_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_string_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_string_status_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_string_status_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_instantiate_model_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_instantiate_model_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_instantiate_model_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_instantiate_model_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_model_instance_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_model_instance_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_model_instance_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_model_instance_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_time_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_time_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_continuous_states_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_continuous_states_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_continuous_states_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_continuous_states_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_completed_integrator_step_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_completed_integrator_step_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_completed_integrator_step_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_completed_integrator_step_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_initialize_model_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_initialize_model_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_initialize_model_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_initialize_model_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_derivatives_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_derivatives_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_derivatives_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_derivatives_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_event_indicators_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_event_indicators_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_event_indicators_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_event_indicators_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_eventUpdate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_eventUpdate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_eventUpdate_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_eventUpdate_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_completed_event_iteration_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_completed_event_iteration_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_completed_event_iteration_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_completed_event_iteration_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_continuous_states_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_continuous_states_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_continuous_states_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_continuous_states_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_nominal_continuous_states_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_nominal_continuous_states_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_nominal_continuous_states_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_nominal_continuous_states_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_terminate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_terminate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_terminate_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_terminate_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_version_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_version_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_version_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_version_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_debug_logging_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_debug_logging_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_debug_logging_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_debug_logging_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_real_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_real_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_real_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_real_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_integer_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_integer_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_integer_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_integer_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_boolean_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_boolean_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_boolean_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_boolean_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_string_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_string_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_string_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_string_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_real_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_real_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_integer_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_integer_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_integer_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_integer_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_boolean_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_boolean_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_string_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_string_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_string_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_string_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* char_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  char_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* char_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  char_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_fmu_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_fmu_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_fmu_state_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_fmu_state_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_fmu_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_fmu_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_set_fmu_state_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_set_fmu_state_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_fmu_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_fmu_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_free_fmu_state_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_free_fmu_state_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_directional_derivative_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_directional_derivative_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fmi2_import_get_directional_derivative_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fmi2_import_get_directional_derivative_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_xml_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_xml_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_xml_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_xml_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* jm_log_level_enu_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* fmi2_status_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* fmi2_status_kind_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* jm_status_enu_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fmitcp_2eproto() {
  protobuf_AddDesc_fmitcp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fmitcp.proto");
  GOOGLE_CHECK(file != NULL);
  fmitcp_message_descriptor_ = file->message_type(0);
  static const int fmitcp_message_offsets_[85] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_instantiate_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_instantiate_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_initialize_slave_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_initialize_slave_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_terminate_slave_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_terminate_slave_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_reset_slave_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_reset_slave_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_slave_instance_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_slave_instance_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_real_input_derivatives_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_real_input_derivatives_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_output_derivatives_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_output_derivatives_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_cancel_step_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_cancel_step_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_do_step_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_do_step_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_status_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_status_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_integer_status_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_integer_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_boolean_status_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_boolean_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_string_status_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_string_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_instantiate_model_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_instantiate_model_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_model_instance_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_model_instance_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_time_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_time_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_continuous_states_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_continuous_states_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_completed_integrator_step_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_completed_integrator_step_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_initialize_model_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_initialize_model_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_derivatives_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_derivatives_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_event_indicators_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_event_indicators_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_eventupdate_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_eventupdate_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_completed_event_iteration_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_completed_event_iteration_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_continuous_states_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_continuous_states_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_nominal_continuous_states_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_nominal_continuous_states_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_terminate_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_terminate_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_version_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_version_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_debug_logging_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_debug_logging_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_real_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_real_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_integer_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_integer_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_boolean_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_boolean_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_string_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_string_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_real_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_integer_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_integer_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_boolean_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_boolean_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_string_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_string_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_fmu_state_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_fmu_state_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_fmu_state_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_set_fmu_state_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_fmu_state_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_free_fmu_state_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_directional_derivative_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, fmi2_import_get_directional_derivative_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, get_xml_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, get_xml_res_),
  };
  fmitcp_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmitcp_message_descriptor_,
      fmitcp_message::default_instance_,
      fmitcp_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmitcp_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmitcp_message));
  fmitcp_message_Type_descriptor_ = fmitcp_message_descriptor_->enum_type(0);
  fmi2_event_info_t_descriptor_ = file->message_type(1);
  static const int fmi2_event_info_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, iterationconverged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, statevaluereferenceschanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, statevalueschanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, terminatesimulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, upcomingtimeevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, nexteventtime_),
  };
  fmi2_event_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_event_info_t_descriptor_,
      fmi2_event_info_t::default_instance_,
      fmi2_event_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_event_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_event_info_t));
  fmi2_import_instantiate_req_descriptor_ = file->message_type(2);
  static const int fmi2_import_instantiate_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_req, visible_),
  };
  fmi2_import_instantiate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_instantiate_req_descriptor_,
      fmi2_import_instantiate_req::default_instance_,
      fmi2_import_instantiate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_instantiate_req));
  fmi2_import_instantiate_res_descriptor_ = file->message_type(3);
  static const int fmi2_import_instantiate_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_res, status_),
  };
  fmi2_import_instantiate_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_instantiate_res_descriptor_,
      fmi2_import_instantiate_res::default_instance_,
      fmi2_import_instantiate_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_instantiate_res));
  fmi2_import_initialize_slave_req_descriptor_ = file->message_type(4);
  static const int fmi2_import_initialize_slave_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, tolerancedefined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, stoptimedefined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, stoptime_),
  };
  fmi2_import_initialize_slave_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_initialize_slave_req_descriptor_,
      fmi2_import_initialize_slave_req::default_instance_,
      fmi2_import_initialize_slave_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_initialize_slave_req));
  fmi2_import_initialize_slave_res_descriptor_ = file->message_type(5);
  static const int fmi2_import_initialize_slave_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_res, status_),
  };
  fmi2_import_initialize_slave_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_initialize_slave_res_descriptor_,
      fmi2_import_initialize_slave_res::default_instance_,
      fmi2_import_initialize_slave_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_slave_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_initialize_slave_res));
  fmi2_import_terminate_slave_req_descriptor_ = file->message_type(6);
  static const int fmi2_import_terminate_slave_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_req, fmuid_),
  };
  fmi2_import_terminate_slave_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_terminate_slave_req_descriptor_,
      fmi2_import_terminate_slave_req::default_instance_,
      fmi2_import_terminate_slave_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_terminate_slave_req));
  fmi2_import_terminate_slave_res_descriptor_ = file->message_type(7);
  static const int fmi2_import_terminate_slave_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_res, status_),
  };
  fmi2_import_terminate_slave_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_terminate_slave_res_descriptor_,
      fmi2_import_terminate_slave_res::default_instance_,
      fmi2_import_terminate_slave_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_slave_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_terminate_slave_res));
  fmi2_import_reset_slave_req_descriptor_ = file->message_type(8);
  static const int fmi2_import_reset_slave_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_req, fmuid_),
  };
  fmi2_import_reset_slave_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_reset_slave_req_descriptor_,
      fmi2_import_reset_slave_req::default_instance_,
      fmi2_import_reset_slave_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_reset_slave_req));
  fmi2_import_reset_slave_res_descriptor_ = file->message_type(9);
  static const int fmi2_import_reset_slave_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_res, status_),
  };
  fmi2_import_reset_slave_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_reset_slave_res_descriptor_,
      fmi2_import_reset_slave_res::default_instance_,
      fmi2_import_reset_slave_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_reset_slave_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_reset_slave_res));
  fmi2_import_free_slave_instance_req_descriptor_ = file->message_type(10);
  static const int fmi2_import_free_slave_instance_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_req, fmuid_),
  };
  fmi2_import_free_slave_instance_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_slave_instance_req_descriptor_,
      fmi2_import_free_slave_instance_req::default_instance_,
      fmi2_import_free_slave_instance_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_slave_instance_req));
  fmi2_import_free_slave_instance_res_descriptor_ = file->message_type(11);
  static const int fmi2_import_free_slave_instance_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_res, message_id_),
  };
  fmi2_import_free_slave_instance_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_slave_instance_res_descriptor_,
      fmi2_import_free_slave_instance_res::default_instance_,
      fmi2_import_free_slave_instance_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_slave_instance_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_slave_instance_res));
  fmi2_import_set_real_input_derivatives_req_descriptor_ = file->message_type(12);
  static const int fmi2_import_set_real_input_derivatives_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, values_),
  };
  fmi2_import_set_real_input_derivatives_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_real_input_derivatives_req_descriptor_,
      fmi2_import_set_real_input_derivatives_req::default_instance_,
      fmi2_import_set_real_input_derivatives_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_real_input_derivatives_req));
  fmi2_import_set_real_input_derivatives_res_descriptor_ = file->message_type(13);
  static const int fmi2_import_set_real_input_derivatives_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_res, status_),
  };
  fmi2_import_set_real_input_derivatives_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_real_input_derivatives_res_descriptor_,
      fmi2_import_set_real_input_derivatives_res::default_instance_,
      fmi2_import_set_real_input_derivatives_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_input_derivatives_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_real_input_derivatives_res));
  fmi2_import_get_real_output_derivatives_req_descriptor_ = file->message_type(14);
  static const int fmi2_import_get_real_output_derivatives_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, orders_),
  };
  fmi2_import_get_real_output_derivatives_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_output_derivatives_req_descriptor_,
      fmi2_import_get_real_output_derivatives_req::default_instance_,
      fmi2_import_get_real_output_derivatives_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_output_derivatives_req));
  fmi2_import_get_real_output_derivatives_res_descriptor_ = file->message_type(15);
  static const int fmi2_import_get_real_output_derivatives_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_res, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_res, values_),
  };
  fmi2_import_get_real_output_derivatives_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_output_derivatives_res_descriptor_,
      fmi2_import_get_real_output_derivatives_res::default_instance_,
      fmi2_import_get_real_output_derivatives_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_output_derivatives_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_output_derivatives_res));
  fmi2_import_cancel_step_req_descriptor_ = file->message_type(16);
  static const int fmi2_import_cancel_step_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_req, fmuid_),
  };
  fmi2_import_cancel_step_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_cancel_step_req_descriptor_,
      fmi2_import_cancel_step_req::default_instance_,
      fmi2_import_cancel_step_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_cancel_step_req));
  fmi2_import_cancel_step_res_descriptor_ = file->message_type(17);
  static const int fmi2_import_cancel_step_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_res, status_),
  };
  fmi2_import_cancel_step_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_cancel_step_res_descriptor_,
      fmi2_import_cancel_step_res::default_instance_,
      fmi2_import_cancel_step_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_cancel_step_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_cancel_step_res));
  fmi2_import_do_step_req_descriptor_ = file->message_type(18);
  static const int fmi2_import_do_step_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, currentcommunicationpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, communicationstepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, newstep_),
  };
  fmi2_import_do_step_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_do_step_req_descriptor_,
      fmi2_import_do_step_req::default_instance_,
      fmi2_import_do_step_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_do_step_req));
  fmi2_import_do_step_res_descriptor_ = file->message_type(19);
  static const int fmi2_import_do_step_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_res, status_),
  };
  fmi2_import_do_step_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_do_step_res_descriptor_,
      fmi2_import_do_step_res::default_instance_,
      fmi2_import_do_step_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_do_step_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_do_step_res));
  fmi2_import_get_status_req_descriptor_ = file->message_type(20);
  static const int fmi2_import_get_status_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_req, status_),
  };
  fmi2_import_get_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_status_req_descriptor_,
      fmi2_import_get_status_req::default_instance_,
      fmi2_import_get_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_status_req));
  fmi2_import_get_status_res_descriptor_ = file->message_type(21);
  static const int fmi2_import_get_status_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_res, value_),
  };
  fmi2_import_get_status_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_status_res_descriptor_,
      fmi2_import_get_status_res::default_instance_,
      fmi2_import_get_status_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_status_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_status_res));
  fmi2_import_get_real_status_req_descriptor_ = file->message_type(22);
  static const int fmi2_import_get_real_status_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_req, kind_),
  };
  fmi2_import_get_real_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_status_req_descriptor_,
      fmi2_import_get_real_status_req::default_instance_,
      fmi2_import_get_real_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_status_req));
  fmi2_import_get_real_status_res_descriptor_ = file->message_type(23);
  static const int fmi2_import_get_real_status_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_res, value_),
  };
  fmi2_import_get_real_status_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_status_res_descriptor_,
      fmi2_import_get_real_status_res::default_instance_,
      fmi2_import_get_real_status_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_status_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_status_res));
  fmi2_import_get_integer_status_req_descriptor_ = file->message_type(24);
  static const int fmi2_import_get_integer_status_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_req, kind_),
  };
  fmi2_import_get_integer_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_integer_status_req_descriptor_,
      fmi2_import_get_integer_status_req::default_instance_,
      fmi2_import_get_integer_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_integer_status_req));
  fmi2_import_get_integer_status_res_descriptor_ = file->message_type(25);
  static const int fmi2_import_get_integer_status_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_res, value_),
  };
  fmi2_import_get_integer_status_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_integer_status_res_descriptor_,
      fmi2_import_get_integer_status_res::default_instance_,
      fmi2_import_get_integer_status_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_status_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_integer_status_res));
  fmi2_import_get_boolean_status_req_descriptor_ = file->message_type(26);
  static const int fmi2_import_get_boolean_status_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_req, kind_),
  };
  fmi2_import_get_boolean_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_boolean_status_req_descriptor_,
      fmi2_import_get_boolean_status_req::default_instance_,
      fmi2_import_get_boolean_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_boolean_status_req));
  fmi2_import_get_boolean_status_res_descriptor_ = file->message_type(27);
  static const int fmi2_import_get_boolean_status_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_res, value_),
  };
  fmi2_import_get_boolean_status_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_boolean_status_res_descriptor_,
      fmi2_import_get_boolean_status_res::default_instance_,
      fmi2_import_get_boolean_status_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_status_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_boolean_status_res));
  fmi2_import_get_string_status_req_descriptor_ = file->message_type(28);
  static const int fmi2_import_get_string_status_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_req, kind_),
  };
  fmi2_import_get_string_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_string_status_req_descriptor_,
      fmi2_import_get_string_status_req::default_instance_,
      fmi2_import_get_string_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_string_status_req));
  fmi2_import_get_string_status_res_descriptor_ = file->message_type(29);
  static const int fmi2_import_get_string_status_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_res, value_),
  };
  fmi2_import_get_string_status_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_string_status_res_descriptor_,
      fmi2_import_get_string_status_res::default_instance_,
      fmi2_import_get_string_status_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_status_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_string_status_res));
  fmi2_import_instantiate_model_req_descriptor_ = file->message_type(30);
  static const int fmi2_import_instantiate_model_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, instancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, resourcelocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, visible_),
  };
  fmi2_import_instantiate_model_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_instantiate_model_req_descriptor_,
      fmi2_import_instantiate_model_req::default_instance_,
      fmi2_import_instantiate_model_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_instantiate_model_req));
  fmi2_import_instantiate_model_res_descriptor_ = file->message_type(31);
  static const int fmi2_import_instantiate_model_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_res, status_),
  };
  fmi2_import_instantiate_model_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_instantiate_model_res_descriptor_,
      fmi2_import_instantiate_model_res::default_instance_,
      fmi2_import_instantiate_model_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_instantiate_model_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_instantiate_model_res));
  fmi2_import_free_model_instance_req_descriptor_ = file->message_type(32);
  static const int fmi2_import_free_model_instance_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_req, fmuid_),
  };
  fmi2_import_free_model_instance_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_model_instance_req_descriptor_,
      fmi2_import_free_model_instance_req::default_instance_,
      fmi2_import_free_model_instance_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_model_instance_req));
  fmi2_import_free_model_instance_res_descriptor_ = file->message_type(33);
  static const int fmi2_import_free_model_instance_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_res, message_id_),
  };
  fmi2_import_free_model_instance_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_model_instance_res_descriptor_,
      fmi2_import_free_model_instance_res::default_instance_,
      fmi2_import_free_model_instance_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_model_instance_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_model_instance_res));
  fmi2_import_set_time_req_descriptor_ = file->message_type(34);
  static const int fmi2_import_set_time_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_req, time_),
  };
  fmi2_import_set_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_time_req_descriptor_,
      fmi2_import_set_time_req::default_instance_,
      fmi2_import_set_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_time_req));
  fmi2_import_set_time_res_descriptor_ = file->message_type(35);
  static const int fmi2_import_set_time_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_res, status_),
  };
  fmi2_import_set_time_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_time_res_descriptor_,
      fmi2_import_set_time_res::default_instance_,
      fmi2_import_set_time_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_time_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_time_res));
  fmi2_import_set_continuous_states_req_descriptor_ = file->message_type(36);
  static const int fmi2_import_set_continuous_states_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_req, x_),
  };
  fmi2_import_set_continuous_states_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_continuous_states_req_descriptor_,
      fmi2_import_set_continuous_states_req::default_instance_,
      fmi2_import_set_continuous_states_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_continuous_states_req));
  fmi2_import_set_continuous_states_res_descriptor_ = file->message_type(37);
  static const int fmi2_import_set_continuous_states_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_res, status_),
  };
  fmi2_import_set_continuous_states_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_continuous_states_res_descriptor_,
      fmi2_import_set_continuous_states_res::default_instance_,
      fmi2_import_set_continuous_states_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_continuous_states_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_continuous_states_res));
  fmi2_import_completed_integrator_step_req_descriptor_ = file->message_type(38);
  static const int fmi2_import_completed_integrator_step_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_req, fmuid_),
  };
  fmi2_import_completed_integrator_step_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_completed_integrator_step_req_descriptor_,
      fmi2_import_completed_integrator_step_req::default_instance_,
      fmi2_import_completed_integrator_step_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_completed_integrator_step_req));
  fmi2_import_completed_integrator_step_res_descriptor_ = file->message_type(39);
  static const int fmi2_import_completed_integrator_step_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_res, calleventupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_res, status_),
  };
  fmi2_import_completed_integrator_step_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_completed_integrator_step_res_descriptor_,
      fmi2_import_completed_integrator_step_res::default_instance_,
      fmi2_import_completed_integrator_step_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_integrator_step_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_completed_integrator_step_res));
  fmi2_import_initialize_model_req_descriptor_ = file->message_type(40);
  static const int fmi2_import_initialize_model_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, tolerancecontrolled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, relativetolerance_),
  };
  fmi2_import_initialize_model_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_initialize_model_req_descriptor_,
      fmi2_import_initialize_model_req::default_instance_,
      fmi2_import_initialize_model_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_initialize_model_req));
  fmi2_import_initialize_model_res_descriptor_ = file->message_type(41);
  static const int fmi2_import_initialize_model_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_res, eventinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_res, status_),
  };
  fmi2_import_initialize_model_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_initialize_model_res_descriptor_,
      fmi2_import_initialize_model_res::default_instance_,
      fmi2_import_initialize_model_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_initialize_model_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_initialize_model_res));
  fmi2_import_get_derivatives_req_descriptor_ = file->message_type(42);
  static const int fmi2_import_get_derivatives_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_req, fmuid_),
  };
  fmi2_import_get_derivatives_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_derivatives_req_descriptor_,
      fmi2_import_get_derivatives_req::default_instance_,
      fmi2_import_get_derivatives_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_derivatives_req));
  fmi2_import_get_derivatives_res_descriptor_ = file->message_type(43);
  static const int fmi2_import_get_derivatives_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_res, derivatives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_res, status_),
  };
  fmi2_import_get_derivatives_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_derivatives_res_descriptor_,
      fmi2_import_get_derivatives_res::default_instance_,
      fmi2_import_get_derivatives_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_derivatives_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_derivatives_res));
  fmi2_import_get_event_indicators_req_descriptor_ = file->message_type(44);
  static const int fmi2_import_get_event_indicators_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_req, fmuid_),
  };
  fmi2_import_get_event_indicators_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_event_indicators_req_descriptor_,
      fmi2_import_get_event_indicators_req::default_instance_,
      fmi2_import_get_event_indicators_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_event_indicators_req));
  fmi2_import_get_event_indicators_res_descriptor_ = file->message_type(45);
  static const int fmi2_import_get_event_indicators_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_res, eventindicators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_res, status_),
  };
  fmi2_import_get_event_indicators_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_event_indicators_res_descriptor_,
      fmi2_import_get_event_indicators_res::default_instance_,
      fmi2_import_get_event_indicators_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_event_indicators_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_event_indicators_res));
  fmi2_import_eventUpdate_req_descriptor_ = file->message_type(46);
  static const int fmi2_import_eventUpdate_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_req, intermediateresults_),
  };
  fmi2_import_eventUpdate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_eventUpdate_req_descriptor_,
      fmi2_import_eventUpdate_req::default_instance_,
      fmi2_import_eventUpdate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_eventUpdate_req));
  fmi2_import_eventUpdate_res_descriptor_ = file->message_type(47);
  static const int fmi2_import_eventUpdate_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_res, eventinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_res, status_),
  };
  fmi2_import_eventUpdate_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_eventUpdate_res_descriptor_,
      fmi2_import_eventUpdate_res::default_instance_,
      fmi2_import_eventUpdate_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_eventUpdate_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_eventUpdate_res));
  fmi2_import_completed_event_iteration_req_descriptor_ = file->message_type(48);
  static const int fmi2_import_completed_event_iteration_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_req, fmuid_),
  };
  fmi2_import_completed_event_iteration_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_completed_event_iteration_req_descriptor_,
      fmi2_import_completed_event_iteration_req::default_instance_,
      fmi2_import_completed_event_iteration_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_completed_event_iteration_req));
  fmi2_import_completed_event_iteration_res_descriptor_ = file->message_type(49);
  static const int fmi2_import_completed_event_iteration_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_res, status_),
  };
  fmi2_import_completed_event_iteration_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_completed_event_iteration_res_descriptor_,
      fmi2_import_completed_event_iteration_res::default_instance_,
      fmi2_import_completed_event_iteration_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_completed_event_iteration_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_completed_event_iteration_res));
  fmi2_import_get_continuous_states_req_descriptor_ = file->message_type(50);
  static const int fmi2_import_get_continuous_states_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_req, fmuid_),
  };
  fmi2_import_get_continuous_states_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_continuous_states_req_descriptor_,
      fmi2_import_get_continuous_states_req::default_instance_,
      fmi2_import_get_continuous_states_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_continuous_states_req));
  fmi2_import_get_continuous_states_res_descriptor_ = file->message_type(51);
  static const int fmi2_import_get_continuous_states_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_res, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_res, status_),
  };
  fmi2_import_get_continuous_states_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_continuous_states_res_descriptor_,
      fmi2_import_get_continuous_states_res::default_instance_,
      fmi2_import_get_continuous_states_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_continuous_states_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_continuous_states_res));
  fmi2_import_get_nominal_continuous_states_req_descriptor_ = file->message_type(52);
  static const int fmi2_import_get_nominal_continuous_states_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_req, fmuid_),
  };
  fmi2_import_get_nominal_continuous_states_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_nominal_continuous_states_req_descriptor_,
      fmi2_import_get_nominal_continuous_states_req::default_instance_,
      fmi2_import_get_nominal_continuous_states_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_nominal_continuous_states_req));
  fmi2_import_get_nominal_continuous_states_res_descriptor_ = file->message_type(53);
  static const int fmi2_import_get_nominal_continuous_states_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_res, nominal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_res, status_),
  };
  fmi2_import_get_nominal_continuous_states_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_nominal_continuous_states_res_descriptor_,
      fmi2_import_get_nominal_continuous_states_res::default_instance_,
      fmi2_import_get_nominal_continuous_states_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_nominal_continuous_states_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_nominal_continuous_states_res));
  fmi2_import_terminate_req_descriptor_ = file->message_type(54);
  static const int fmi2_import_terminate_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_req, fmuid_),
  };
  fmi2_import_terminate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_terminate_req_descriptor_,
      fmi2_import_terminate_req::default_instance_,
      fmi2_import_terminate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_terminate_req));
  fmi2_import_terminate_res_descriptor_ = file->message_type(55);
  static const int fmi2_import_terminate_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_res, status_),
  };
  fmi2_import_terminate_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_terminate_res_descriptor_,
      fmi2_import_terminate_res::default_instance_,
      fmi2_import_terminate_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_terminate_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_terminate_res));
  fmi2_import_get_version_req_descriptor_ = file->message_type(56);
  static const int fmi2_import_get_version_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_req, fmuid_),
  };
  fmi2_import_get_version_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_version_req_descriptor_,
      fmi2_import_get_version_req::default_instance_,
      fmi2_import_get_version_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_version_req));
  fmi2_import_get_version_res_descriptor_ = file->message_type(57);
  static const int fmi2_import_get_version_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_res, version_),
  };
  fmi2_import_get_version_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_version_res_descriptor_,
      fmi2_import_get_version_res::default_instance_,
      fmi2_import_get_version_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_version_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_version_res));
  fmi2_import_set_debug_logging_req_descriptor_ = file->message_type(58);
  static const int fmi2_import_set_debug_logging_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, loggingon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, categories_),
  };
  fmi2_import_set_debug_logging_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_debug_logging_req_descriptor_,
      fmi2_import_set_debug_logging_req::default_instance_,
      fmi2_import_set_debug_logging_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_debug_logging_req));
  fmi2_import_set_debug_logging_res_descriptor_ = file->message_type(59);
  static const int fmi2_import_set_debug_logging_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_res, status_),
  };
  fmi2_import_set_debug_logging_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_debug_logging_res_descriptor_,
      fmi2_import_set_debug_logging_res::default_instance_,
      fmi2_import_set_debug_logging_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_debug_logging_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_debug_logging_res));
  fmi2_import_set_real_req_descriptor_ = file->message_type(60);
  static const int fmi2_import_set_real_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, values_),
  };
  fmi2_import_set_real_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_real_req_descriptor_,
      fmi2_import_set_real_req::default_instance_,
      fmi2_import_set_real_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_real_req));
  fmi2_import_set_real_res_descriptor_ = file->message_type(61);
  static const int fmi2_import_set_real_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_res, status_),
  };
  fmi2_import_set_real_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_real_res_descriptor_,
      fmi2_import_set_real_res::default_instance_,
      fmi2_import_set_real_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_real_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_real_res));
  fmi2_import_set_integer_req_descriptor_ = file->message_type(62);
  static const int fmi2_import_set_integer_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, values_),
  };
  fmi2_import_set_integer_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_integer_req_descriptor_,
      fmi2_import_set_integer_req::default_instance_,
      fmi2_import_set_integer_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_integer_req));
  fmi2_import_set_integer_res_descriptor_ = file->message_type(63);
  static const int fmi2_import_set_integer_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_res, status_),
  };
  fmi2_import_set_integer_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_integer_res_descriptor_,
      fmi2_import_set_integer_res::default_instance_,
      fmi2_import_set_integer_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_integer_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_integer_res));
  fmi2_import_set_boolean_req_descriptor_ = file->message_type(64);
  static const int fmi2_import_set_boolean_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, values_),
  };
  fmi2_import_set_boolean_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_boolean_req_descriptor_,
      fmi2_import_set_boolean_req::default_instance_,
      fmi2_import_set_boolean_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_boolean_req));
  fmi2_import_set_boolean_res_descriptor_ = file->message_type(65);
  static const int fmi2_import_set_boolean_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_res, status_),
  };
  fmi2_import_set_boolean_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_boolean_res_descriptor_,
      fmi2_import_set_boolean_res::default_instance_,
      fmi2_import_set_boolean_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_boolean_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_boolean_res));
  fmi2_import_set_string_req_descriptor_ = file->message_type(66);
  static const int fmi2_import_set_string_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, valuereferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, values_),
  };
  fmi2_import_set_string_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_string_req_descriptor_,
      fmi2_import_set_string_req::default_instance_,
      fmi2_import_set_string_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_string_req));
  fmi2_import_set_string_res_descriptor_ = file->message_type(67);
  static const int fmi2_import_set_string_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_res, status_),
  };
  fmi2_import_set_string_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_string_res_descriptor_,
      fmi2_import_set_string_res::default_instance_,
      fmi2_import_set_string_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_string_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_string_res));
  fmi2_import_get_real_req_descriptor_ = file->message_type(68);
  static const int fmi2_import_get_real_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_req, valuereferences_),
  };
  fmi2_import_get_real_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_req_descriptor_,
      fmi2_import_get_real_req::default_instance_,
      fmi2_import_get_real_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_req));
  fmi2_import_get_real_res_descriptor_ = file->message_type(69);
  static const int fmi2_import_get_real_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_res, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_res, status_),
  };
  fmi2_import_get_real_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_real_res_descriptor_,
      fmi2_import_get_real_res::default_instance_,
      fmi2_import_get_real_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_real_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_real_res));
  fmi2_import_get_integer_req_descriptor_ = file->message_type(70);
  static const int fmi2_import_get_integer_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_req, valuereferences_),
  };
  fmi2_import_get_integer_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_integer_req_descriptor_,
      fmi2_import_get_integer_req::default_instance_,
      fmi2_import_get_integer_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_integer_req));
  fmi2_import_get_integer_res_descriptor_ = file->message_type(71);
  static const int fmi2_import_get_integer_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_res, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_res, status_),
  };
  fmi2_import_get_integer_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_integer_res_descriptor_,
      fmi2_import_get_integer_res::default_instance_,
      fmi2_import_get_integer_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_integer_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_integer_res));
  fmi2_import_get_boolean_req_descriptor_ = file->message_type(72);
  static const int fmi2_import_get_boolean_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_req, valuereferences_),
  };
  fmi2_import_get_boolean_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_boolean_req_descriptor_,
      fmi2_import_get_boolean_req::default_instance_,
      fmi2_import_get_boolean_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_boolean_req));
  fmi2_import_get_boolean_res_descriptor_ = file->message_type(73);
  static const int fmi2_import_get_boolean_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_res, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_res, status_),
  };
  fmi2_import_get_boolean_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_boolean_res_descriptor_,
      fmi2_import_get_boolean_res::default_instance_,
      fmi2_import_get_boolean_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_boolean_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_boolean_res));
  fmi2_import_get_string_req_descriptor_ = file->message_type(74);
  static const int fmi2_import_get_string_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_req, valuereferences_),
  };
  fmi2_import_get_string_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_string_req_descriptor_,
      fmi2_import_get_string_req::default_instance_,
      fmi2_import_get_string_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_string_req));
  fmi2_import_get_string_res_descriptor_ = file->message_type(75);
  static const int fmi2_import_get_string_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_res, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_res, status_),
  };
  fmi2_import_get_string_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_string_res_descriptor_,
      fmi2_import_get_string_res::default_instance_,
      fmi2_import_get_string_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_string_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_string_res));
  char_req_descriptor_ = file->message_type(76);
  static const int char_req_offsets_[1] = {
  };
  char_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      char_req_descriptor_,
      char_req::default_instance_,
      char_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(char_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(char_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(char_req));
  char_res_descriptor_ = file->message_type(77);
  static const int char_res_offsets_[1] = {
  };
  char_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      char_res_descriptor_,
      char_res::default_instance_,
      char_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(char_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(char_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(char_res));
  fmi2_import_get_fmu_state_req_descriptor_ = file->message_type(78);
  static const int fmi2_import_get_fmu_state_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_req, fmuid_),
  };
  fmi2_import_get_fmu_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_fmu_state_req_descriptor_,
      fmi2_import_get_fmu_state_req::default_instance_,
      fmi2_import_get_fmu_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_fmu_state_req));
  fmi2_import_get_fmu_state_res_descriptor_ = file->message_type(79);
  static const int fmi2_import_get_fmu_state_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_res, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_res, status_),
  };
  fmi2_import_get_fmu_state_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_fmu_state_res_descriptor_,
      fmi2_import_get_fmu_state_res::default_instance_,
      fmi2_import_get_fmu_state_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_fmu_state_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_fmu_state_res));
  fmi2_import_set_fmu_state_req_descriptor_ = file->message_type(80);
  static const int fmi2_import_set_fmu_state_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_req, stateid_),
  };
  fmi2_import_set_fmu_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_fmu_state_req_descriptor_,
      fmi2_import_set_fmu_state_req::default_instance_,
      fmi2_import_set_fmu_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_fmu_state_req));
  fmi2_import_set_fmu_state_res_descriptor_ = file->message_type(81);
  static const int fmi2_import_set_fmu_state_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_res, status_),
  };
  fmi2_import_set_fmu_state_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_set_fmu_state_res_descriptor_,
      fmi2_import_set_fmu_state_res::default_instance_,
      fmi2_import_set_fmu_state_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_set_fmu_state_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_set_fmu_state_res));
  fmi2_import_free_fmu_state_req_descriptor_ = file->message_type(82);
  static const int fmi2_import_free_fmu_state_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_req, stateid_),
  };
  fmi2_import_free_fmu_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_fmu_state_req_descriptor_,
      fmi2_import_free_fmu_state_req::default_instance_,
      fmi2_import_free_fmu_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_fmu_state_req));
  fmi2_import_free_fmu_state_res_descriptor_ = file->message_type(83);
  static const int fmi2_import_free_fmu_state_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_res, status_),
  };
  fmi2_import_free_fmu_state_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_free_fmu_state_res_descriptor_,
      fmi2_import_free_fmu_state_res::default_instance_,
      fmi2_import_free_fmu_state_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_free_fmu_state_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_free_fmu_state_res));
  fmi2_import_get_directional_derivative_req_descriptor_ = file->message_type(84);
  static const int fmi2_import_get_directional_derivative_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, fmuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, v_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, z_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, dv_),
  };
  fmi2_import_get_directional_derivative_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_directional_derivative_req_descriptor_,
      fmi2_import_get_directional_derivative_req::default_instance_,
      fmi2_import_get_directional_derivative_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_directional_derivative_req));
  fmi2_import_get_directional_derivative_res_descriptor_ = file->message_type(85);
  static const int fmi2_import_get_directional_derivative_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_res, dz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_res, status_),
  };
  fmi2_import_get_directional_derivative_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fmi2_import_get_directional_derivative_res_descriptor_,
      fmi2_import_get_directional_derivative_res::default_instance_,
      fmi2_import_get_directional_derivative_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fmi2_import_get_directional_derivative_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fmi2_import_get_directional_derivative_res));
  get_xml_req_descriptor_ = file->message_type(86);
  static const int get_xml_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_req, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_req, fmuid_),
  };
  get_xml_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_xml_req_descriptor_,
      get_xml_req::default_instance_,
      get_xml_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_xml_req));
  get_xml_res_descriptor_ = file->message_type(87);
  static const int get_xml_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_res, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_res, loglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_res, xml_),
  };
  get_xml_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_xml_res_descriptor_,
      get_xml_res::default_instance_,
      get_xml_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_xml_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_xml_res));
  jm_log_level_enu_t_descriptor_ = file->enum_type(0);
  fmi2_status_t_descriptor_ = file->enum_type(1);
  fmi2_status_kind_t_descriptor_ = file->enum_type(2);
  jm_status_enu_t_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fmitcp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmitcp_message_descriptor_, &fmitcp_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_event_info_t_descriptor_, &fmi2_event_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_instantiate_req_descriptor_, &fmi2_import_instantiate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_instantiate_res_descriptor_, &fmi2_import_instantiate_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_initialize_slave_req_descriptor_, &fmi2_import_initialize_slave_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_initialize_slave_res_descriptor_, &fmi2_import_initialize_slave_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_terminate_slave_req_descriptor_, &fmi2_import_terminate_slave_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_terminate_slave_res_descriptor_, &fmi2_import_terminate_slave_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_reset_slave_req_descriptor_, &fmi2_import_reset_slave_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_reset_slave_res_descriptor_, &fmi2_import_reset_slave_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_slave_instance_req_descriptor_, &fmi2_import_free_slave_instance_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_slave_instance_res_descriptor_, &fmi2_import_free_slave_instance_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_real_input_derivatives_req_descriptor_, &fmi2_import_set_real_input_derivatives_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_real_input_derivatives_res_descriptor_, &fmi2_import_set_real_input_derivatives_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_output_derivatives_req_descriptor_, &fmi2_import_get_real_output_derivatives_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_output_derivatives_res_descriptor_, &fmi2_import_get_real_output_derivatives_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_cancel_step_req_descriptor_, &fmi2_import_cancel_step_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_cancel_step_res_descriptor_, &fmi2_import_cancel_step_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_do_step_req_descriptor_, &fmi2_import_do_step_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_do_step_res_descriptor_, &fmi2_import_do_step_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_status_req_descriptor_, &fmi2_import_get_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_status_res_descriptor_, &fmi2_import_get_status_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_status_req_descriptor_, &fmi2_import_get_real_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_status_res_descriptor_, &fmi2_import_get_real_status_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_integer_status_req_descriptor_, &fmi2_import_get_integer_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_integer_status_res_descriptor_, &fmi2_import_get_integer_status_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_boolean_status_req_descriptor_, &fmi2_import_get_boolean_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_boolean_status_res_descriptor_, &fmi2_import_get_boolean_status_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_string_status_req_descriptor_, &fmi2_import_get_string_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_string_status_res_descriptor_, &fmi2_import_get_string_status_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_instantiate_model_req_descriptor_, &fmi2_import_instantiate_model_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_instantiate_model_res_descriptor_, &fmi2_import_instantiate_model_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_model_instance_req_descriptor_, &fmi2_import_free_model_instance_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_model_instance_res_descriptor_, &fmi2_import_free_model_instance_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_time_req_descriptor_, &fmi2_import_set_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_time_res_descriptor_, &fmi2_import_set_time_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_continuous_states_req_descriptor_, &fmi2_import_set_continuous_states_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_continuous_states_res_descriptor_, &fmi2_import_set_continuous_states_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_completed_integrator_step_req_descriptor_, &fmi2_import_completed_integrator_step_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_completed_integrator_step_res_descriptor_, &fmi2_import_completed_integrator_step_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_initialize_model_req_descriptor_, &fmi2_import_initialize_model_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_initialize_model_res_descriptor_, &fmi2_import_initialize_model_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_derivatives_req_descriptor_, &fmi2_import_get_derivatives_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_derivatives_res_descriptor_, &fmi2_import_get_derivatives_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_event_indicators_req_descriptor_, &fmi2_import_get_event_indicators_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_event_indicators_res_descriptor_, &fmi2_import_get_event_indicators_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_eventUpdate_req_descriptor_, &fmi2_import_eventUpdate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_eventUpdate_res_descriptor_, &fmi2_import_eventUpdate_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_completed_event_iteration_req_descriptor_, &fmi2_import_completed_event_iteration_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_completed_event_iteration_res_descriptor_, &fmi2_import_completed_event_iteration_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_continuous_states_req_descriptor_, &fmi2_import_get_continuous_states_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_continuous_states_res_descriptor_, &fmi2_import_get_continuous_states_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_nominal_continuous_states_req_descriptor_, &fmi2_import_get_nominal_continuous_states_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_nominal_continuous_states_res_descriptor_, &fmi2_import_get_nominal_continuous_states_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_terminate_req_descriptor_, &fmi2_import_terminate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_terminate_res_descriptor_, &fmi2_import_terminate_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_version_req_descriptor_, &fmi2_import_get_version_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_version_res_descriptor_, &fmi2_import_get_version_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_debug_logging_req_descriptor_, &fmi2_import_set_debug_logging_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_debug_logging_res_descriptor_, &fmi2_import_set_debug_logging_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_real_req_descriptor_, &fmi2_import_set_real_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_real_res_descriptor_, &fmi2_import_set_real_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_integer_req_descriptor_, &fmi2_import_set_integer_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_integer_res_descriptor_, &fmi2_import_set_integer_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_boolean_req_descriptor_, &fmi2_import_set_boolean_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_boolean_res_descriptor_, &fmi2_import_set_boolean_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_string_req_descriptor_, &fmi2_import_set_string_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_string_res_descriptor_, &fmi2_import_set_string_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_req_descriptor_, &fmi2_import_get_real_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_real_res_descriptor_, &fmi2_import_get_real_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_integer_req_descriptor_, &fmi2_import_get_integer_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_integer_res_descriptor_, &fmi2_import_get_integer_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_boolean_req_descriptor_, &fmi2_import_get_boolean_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_boolean_res_descriptor_, &fmi2_import_get_boolean_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_string_req_descriptor_, &fmi2_import_get_string_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_string_res_descriptor_, &fmi2_import_get_string_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    char_req_descriptor_, &char_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    char_res_descriptor_, &char_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_fmu_state_req_descriptor_, &fmi2_import_get_fmu_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_fmu_state_res_descriptor_, &fmi2_import_get_fmu_state_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_fmu_state_req_descriptor_, &fmi2_import_set_fmu_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_set_fmu_state_res_descriptor_, &fmi2_import_set_fmu_state_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_fmu_state_req_descriptor_, &fmi2_import_free_fmu_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_free_fmu_state_res_descriptor_, &fmi2_import_free_fmu_state_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_directional_derivative_req_descriptor_, &fmi2_import_get_directional_derivative_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fmi2_import_get_directional_derivative_res_descriptor_, &fmi2_import_get_directional_derivative_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_xml_req_descriptor_, &get_xml_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_xml_res_descriptor_, &get_xml_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fmitcp_2eproto() {
  delete fmitcp_message::default_instance_;
  delete fmitcp_message_reflection_;
  delete fmi2_event_info_t::default_instance_;
  delete fmi2_event_info_t_reflection_;
  delete fmi2_import_instantiate_req::default_instance_;
  delete fmi2_import_instantiate_req_reflection_;
  delete fmi2_import_instantiate_res::default_instance_;
  delete fmi2_import_instantiate_res_reflection_;
  delete fmi2_import_initialize_slave_req::default_instance_;
  delete fmi2_import_initialize_slave_req_reflection_;
  delete fmi2_import_initialize_slave_res::default_instance_;
  delete fmi2_import_initialize_slave_res_reflection_;
  delete fmi2_import_terminate_slave_req::default_instance_;
  delete fmi2_import_terminate_slave_req_reflection_;
  delete fmi2_import_terminate_slave_res::default_instance_;
  delete fmi2_import_terminate_slave_res_reflection_;
  delete fmi2_import_reset_slave_req::default_instance_;
  delete fmi2_import_reset_slave_req_reflection_;
  delete fmi2_import_reset_slave_res::default_instance_;
  delete fmi2_import_reset_slave_res_reflection_;
  delete fmi2_import_free_slave_instance_req::default_instance_;
  delete fmi2_import_free_slave_instance_req_reflection_;
  delete fmi2_import_free_slave_instance_res::default_instance_;
  delete fmi2_import_free_slave_instance_res_reflection_;
  delete fmi2_import_set_real_input_derivatives_req::default_instance_;
  delete fmi2_import_set_real_input_derivatives_req_reflection_;
  delete fmi2_import_set_real_input_derivatives_res::default_instance_;
  delete fmi2_import_set_real_input_derivatives_res_reflection_;
  delete fmi2_import_get_real_output_derivatives_req::default_instance_;
  delete fmi2_import_get_real_output_derivatives_req_reflection_;
  delete fmi2_import_get_real_output_derivatives_res::default_instance_;
  delete fmi2_import_get_real_output_derivatives_res_reflection_;
  delete fmi2_import_cancel_step_req::default_instance_;
  delete fmi2_import_cancel_step_req_reflection_;
  delete fmi2_import_cancel_step_res::default_instance_;
  delete fmi2_import_cancel_step_res_reflection_;
  delete fmi2_import_do_step_req::default_instance_;
  delete fmi2_import_do_step_req_reflection_;
  delete fmi2_import_do_step_res::default_instance_;
  delete fmi2_import_do_step_res_reflection_;
  delete fmi2_import_get_status_req::default_instance_;
  delete fmi2_import_get_status_req_reflection_;
  delete fmi2_import_get_status_res::default_instance_;
  delete fmi2_import_get_status_res_reflection_;
  delete fmi2_import_get_real_status_req::default_instance_;
  delete fmi2_import_get_real_status_req_reflection_;
  delete fmi2_import_get_real_status_res::default_instance_;
  delete fmi2_import_get_real_status_res_reflection_;
  delete fmi2_import_get_integer_status_req::default_instance_;
  delete fmi2_import_get_integer_status_req_reflection_;
  delete fmi2_import_get_integer_status_res::default_instance_;
  delete fmi2_import_get_integer_status_res_reflection_;
  delete fmi2_import_get_boolean_status_req::default_instance_;
  delete fmi2_import_get_boolean_status_req_reflection_;
  delete fmi2_import_get_boolean_status_res::default_instance_;
  delete fmi2_import_get_boolean_status_res_reflection_;
  delete fmi2_import_get_string_status_req::default_instance_;
  delete fmi2_import_get_string_status_req_reflection_;
  delete fmi2_import_get_string_status_res::default_instance_;
  delete fmi2_import_get_string_status_res_reflection_;
  delete fmi2_import_instantiate_model_req::default_instance_;
  delete fmi2_import_instantiate_model_req_reflection_;
  delete fmi2_import_instantiate_model_res::default_instance_;
  delete fmi2_import_instantiate_model_res_reflection_;
  delete fmi2_import_free_model_instance_req::default_instance_;
  delete fmi2_import_free_model_instance_req_reflection_;
  delete fmi2_import_free_model_instance_res::default_instance_;
  delete fmi2_import_free_model_instance_res_reflection_;
  delete fmi2_import_set_time_req::default_instance_;
  delete fmi2_import_set_time_req_reflection_;
  delete fmi2_import_set_time_res::default_instance_;
  delete fmi2_import_set_time_res_reflection_;
  delete fmi2_import_set_continuous_states_req::default_instance_;
  delete fmi2_import_set_continuous_states_req_reflection_;
  delete fmi2_import_set_continuous_states_res::default_instance_;
  delete fmi2_import_set_continuous_states_res_reflection_;
  delete fmi2_import_completed_integrator_step_req::default_instance_;
  delete fmi2_import_completed_integrator_step_req_reflection_;
  delete fmi2_import_completed_integrator_step_res::default_instance_;
  delete fmi2_import_completed_integrator_step_res_reflection_;
  delete fmi2_import_initialize_model_req::default_instance_;
  delete fmi2_import_initialize_model_req_reflection_;
  delete fmi2_import_initialize_model_res::default_instance_;
  delete fmi2_import_initialize_model_res_reflection_;
  delete fmi2_import_get_derivatives_req::default_instance_;
  delete fmi2_import_get_derivatives_req_reflection_;
  delete fmi2_import_get_derivatives_res::default_instance_;
  delete fmi2_import_get_derivatives_res_reflection_;
  delete fmi2_import_get_event_indicators_req::default_instance_;
  delete fmi2_import_get_event_indicators_req_reflection_;
  delete fmi2_import_get_event_indicators_res::default_instance_;
  delete fmi2_import_get_event_indicators_res_reflection_;
  delete fmi2_import_eventUpdate_req::default_instance_;
  delete fmi2_import_eventUpdate_req_reflection_;
  delete fmi2_import_eventUpdate_res::default_instance_;
  delete fmi2_import_eventUpdate_res_reflection_;
  delete fmi2_import_completed_event_iteration_req::default_instance_;
  delete fmi2_import_completed_event_iteration_req_reflection_;
  delete fmi2_import_completed_event_iteration_res::default_instance_;
  delete fmi2_import_completed_event_iteration_res_reflection_;
  delete fmi2_import_get_continuous_states_req::default_instance_;
  delete fmi2_import_get_continuous_states_req_reflection_;
  delete fmi2_import_get_continuous_states_res::default_instance_;
  delete fmi2_import_get_continuous_states_res_reflection_;
  delete fmi2_import_get_nominal_continuous_states_req::default_instance_;
  delete fmi2_import_get_nominal_continuous_states_req_reflection_;
  delete fmi2_import_get_nominal_continuous_states_res::default_instance_;
  delete fmi2_import_get_nominal_continuous_states_res_reflection_;
  delete fmi2_import_terminate_req::default_instance_;
  delete fmi2_import_terminate_req_reflection_;
  delete fmi2_import_terminate_res::default_instance_;
  delete fmi2_import_terminate_res_reflection_;
  delete fmi2_import_get_version_req::default_instance_;
  delete fmi2_import_get_version_req_reflection_;
  delete fmi2_import_get_version_res::default_instance_;
  delete fmi2_import_get_version_res_reflection_;
  delete fmi2_import_set_debug_logging_req::default_instance_;
  delete fmi2_import_set_debug_logging_req_reflection_;
  delete fmi2_import_set_debug_logging_res::default_instance_;
  delete fmi2_import_set_debug_logging_res_reflection_;
  delete fmi2_import_set_real_req::default_instance_;
  delete fmi2_import_set_real_req_reflection_;
  delete fmi2_import_set_real_res::default_instance_;
  delete fmi2_import_set_real_res_reflection_;
  delete fmi2_import_set_integer_req::default_instance_;
  delete fmi2_import_set_integer_req_reflection_;
  delete fmi2_import_set_integer_res::default_instance_;
  delete fmi2_import_set_integer_res_reflection_;
  delete fmi2_import_set_boolean_req::default_instance_;
  delete fmi2_import_set_boolean_req_reflection_;
  delete fmi2_import_set_boolean_res::default_instance_;
  delete fmi2_import_set_boolean_res_reflection_;
  delete fmi2_import_set_string_req::default_instance_;
  delete fmi2_import_set_string_req_reflection_;
  delete fmi2_import_set_string_res::default_instance_;
  delete fmi2_import_set_string_res_reflection_;
  delete fmi2_import_get_real_req::default_instance_;
  delete fmi2_import_get_real_req_reflection_;
  delete fmi2_import_get_real_res::default_instance_;
  delete fmi2_import_get_real_res_reflection_;
  delete fmi2_import_get_integer_req::default_instance_;
  delete fmi2_import_get_integer_req_reflection_;
  delete fmi2_import_get_integer_res::default_instance_;
  delete fmi2_import_get_integer_res_reflection_;
  delete fmi2_import_get_boolean_req::default_instance_;
  delete fmi2_import_get_boolean_req_reflection_;
  delete fmi2_import_get_boolean_res::default_instance_;
  delete fmi2_import_get_boolean_res_reflection_;
  delete fmi2_import_get_string_req::default_instance_;
  delete fmi2_import_get_string_req_reflection_;
  delete fmi2_import_get_string_res::default_instance_;
  delete fmi2_import_get_string_res_reflection_;
  delete char_req::default_instance_;
  delete char_req_reflection_;
  delete char_res::default_instance_;
  delete char_res_reflection_;
  delete fmi2_import_get_fmu_state_req::default_instance_;
  delete fmi2_import_get_fmu_state_req_reflection_;
  delete fmi2_import_get_fmu_state_res::default_instance_;
  delete fmi2_import_get_fmu_state_res_reflection_;
  delete fmi2_import_set_fmu_state_req::default_instance_;
  delete fmi2_import_set_fmu_state_req_reflection_;
  delete fmi2_import_set_fmu_state_res::default_instance_;
  delete fmi2_import_set_fmu_state_res_reflection_;
  delete fmi2_import_free_fmu_state_req::default_instance_;
  delete fmi2_import_free_fmu_state_req_reflection_;
  delete fmi2_import_free_fmu_state_res::default_instance_;
  delete fmi2_import_free_fmu_state_res_reflection_;
  delete fmi2_import_get_directional_derivative_req::default_instance_;
  delete fmi2_import_get_directional_derivative_req_reflection_;
  delete fmi2_import_get_directional_derivative_res::default_instance_;
  delete fmi2_import_get_directional_derivative_res_reflection_;
  delete get_xml_req::default_instance_;
  delete get_xml_req_reflection_;
  delete get_xml_res::default_instance_;
  delete get_xml_res_reflection_;
}

void protobuf_AddDesc_fmitcp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014fmitcp.proto\022\014fmitcp_proto\"\200X\n\016fmitcp_"
    "message\022/\n\004type\030\001 \002(\0162!.fmitcp_proto.fmi"
    "tcp_message.Type\022N\n\033fmi2_import_instanti"
    "ate_req\030\002 \001(\0132).fmitcp_proto.fmi2_import"
    "_instantiate_req\022N\n\033fmi2_import_instanti"
    "ate_res\030\003 \001(\0132).fmitcp_proto.fmi2_import"
    "_instantiate_res\022X\n fmi2_import_initiali"
    "ze_slave_req\030\004 \001(\0132..fmitcp_proto.fmi2_i"
    "mport_initialize_slave_req\022X\n fmi2_impor"
    "t_initialize_slave_res\030\005 \001(\0132..fmitcp_pr"
    "oto.fmi2_import_initialize_slave_res\022V\n\037"
    "fmi2_import_terminate_slave_req\030\006 \001(\0132-."
    "fmitcp_proto.fmi2_import_terminate_slave"
    "_req\022V\n\037fmi2_import_terminate_slave_res\030"
    "\007 \001(\0132-.fmitcp_proto.fmi2_import_termina"
    "te_slave_res\022N\n\033fmi2_import_reset_slave_"
    "req\030\010 \001(\0132).fmitcp_proto.fmi2_import_res"
    "et_slave_req\022N\n\033fmi2_import_reset_slave_"
    "res\030\t \001(\0132).fmitcp_proto.fmi2_import_res"
    "et_slave_res\022^\n#fmi2_import_free_slave_i"
    "nstance_req\030\n \001(\01321.fmitcp_proto.fmi2_im"
    "port_free_slave_instance_req\022^\n#fmi2_imp"
    "ort_free_slave_instance_res\030\013 \001(\01321.fmit"
    "cp_proto.fmi2_import_free_slave_instance"
    "_res\022l\n*fmi2_import_set_real_input_deriv"
    "atives_req\030\014 \001(\01328.fmitcp_proto.fmi2_imp"
    "ort_set_real_input_derivatives_req\022l\n*fm"
    "i2_import_set_real_input_derivatives_res"
    "\030\r \001(\01328.fmitcp_proto.fmi2_import_set_re"
    "al_input_derivatives_res\022n\n+fmi2_import_"
    "get_real_output_derivatives_req\030\016 \001(\01329."
    "fmitcp_proto.fmi2_import_get_real_output"
    "_derivatives_req\022n\n+fmi2_import_get_real"
    "_output_derivatives_res\030\017 \001(\01329.fmitcp_p"
    "roto.fmi2_import_get_real_output_derivat"
    "ives_res\022N\n\033fmi2_import_cancel_step_req\030"
    "\020 \001(\0132).fmitcp_proto.fmi2_import_cancel_"
    "step_req\022N\n\033fmi2_import_cancel_step_res\030"
    "\021 \001(\0132).fmitcp_proto.fmi2_import_cancel_"
    "step_res\022F\n\027fmi2_import_do_step_req\030\022 \001("
    "\0132%.fmitcp_proto.fmi2_import_do_step_req"
    "\022F\n\027fmi2_import_do_step_res\030\023 \001(\0132%.fmit"
    "cp_proto.fmi2_import_do_step_res\022L\n\032fmi2"
    "_import_get_status_req\030\024 \001(\0132(.fmitcp_pr"
    "oto.fmi2_import_get_status_req\022L\n\032fmi2_i"
    "mport_get_status_res\030\025 \001(\0132(.fmitcp_prot"
    "o.fmi2_import_get_status_res\022V\n\037fmi2_imp"
    "ort_get_real_status_req\030\026 \001(\0132-.fmitcp_p"
    "roto.fmi2_import_get_real_status_req\022V\n\037"
    "fmi2_import_get_real_status_res\030\027 \001(\0132-."
    "fmitcp_proto.fmi2_import_get_real_status"
    "_res\022\\\n\"fmi2_import_get_integer_status_r"
    "eq\030\030 \001(\01320.fmitcp_proto.fmi2_import_get_"
    "integer_status_req\022\\\n\"fmi2_import_get_in"
    "teger_status_res\030\031 \001(\01320.fmitcp_proto.fm"
    "i2_import_get_integer_status_res\022\\\n\"fmi2"
    "_import_get_boolean_status_req\030\032 \001(\01320.f"
    "mitcp_proto.fmi2_import_get_boolean_stat"
    "us_req\022\\\n\"fmi2_import_get_boolean_status"
    "_res\030\033 \001(\01320.fmitcp_proto.fmi2_import_ge"
    "t_boolean_status_res\022Z\n!fmi2_import_get_"
    "string_status_req\030\034 \001(\0132/.fmitcp_proto.f"
    "mi2_import_get_string_status_req\022Z\n!fmi2"
    "_import_get_string_status_res\030\035 \001(\0132/.fm"
    "itcp_proto.fmi2_import_get_string_status"
    "_res\022Z\n!fmi2_import_instantiate_model_re"
    "q\030\036 \001(\0132/.fmitcp_proto.fmi2_import_insta"
    "ntiate_model_req\022Z\n!fmi2_import_instanti"
    "ate_model_res\030\037 \001(\0132/.fmitcp_proto.fmi2_"
    "import_instantiate_model_res\022^\n#fmi2_imp"
    "ort_free_model_instance_req\030  \001(\01321.fmit"
    "cp_proto.fmi2_import_free_model_instance"
    "_req\022^\n#fmi2_import_free_model_instance_"
    "res\030! \001(\01321.fmitcp_proto.fmi2_import_fre"
    "e_model_instance_res\022H\n\030fmi2_import_set_"
    "time_req\030\" \001(\0132&.fmitcp_proto.fmi2_impor"
    "t_set_time_req\022H\n\030fmi2_import_set_time_r"
    "es\030# \001(\0132&.fmitcp_proto.fmi2_import_set_"
    "time_res\022b\n%fmi2_import_set_continuous_s"
    "tates_req\030$ \001(\01323.fmitcp_proto.fmi2_impo"
    "rt_set_continuous_states_req\022b\n%fmi2_imp"
    "ort_set_continuous_states_res\030% \001(\01323.fm"
    "itcp_proto.fmi2_import_set_continuous_st"
    "ates_res\022j\n)fmi2_import_completed_integr"
    "ator_step_req\030& \001(\01327.fmitcp_proto.fmi2_"
    "import_completed_integrator_step_req\022j\n)"
    "fmi2_import_completed_integrator_step_re"
    "s\030\' \001(\01327.fmitcp_proto.fmi2_import_compl"
    "eted_integrator_step_res\022X\n fmi2_import_"
    "initialize_model_req\030( \001(\0132..fmitcp_prot"
    "o.fmi2_import_initialize_model_req\022X\n fm"
    "i2_import_initialize_model_res\030) \001(\0132..f"
    "mitcp_proto.fmi2_import_initialize_model"
    "_res\022V\n\037fmi2_import_get_derivatives_req\030"
    "* \001(\0132-.fmitcp_proto.fmi2_import_get_der"
    "ivatives_req\022V\n\037fmi2_import_get_derivati"
    "ves_res\030+ \001(\0132-.fmitcp_proto.fmi2_import"
    "_get_derivatives_res\022`\n$fmi2_import_get_"
    "event_indicators_req\030, \001(\01322.fmitcp_prot"
    "o.fmi2_import_get_event_indicators_req\022`"
    "\n$fmi2_import_get_event_indicators_res\030-"
    " \001(\01322.fmitcp_proto.fmi2_import_get_even"
    "t_indicators_res\022N\n\033fmi2_import_eventUpd"
    "ate_req\030. \001(\0132).fmitcp_proto.fmi2_import"
    "_eventUpdate_req\022N\n\033fmi2_import_eventUpd"
    "ate_res\030/ \001(\0132).fmitcp_proto.fmi2_import"
    "_eventUpdate_res\022j\n)fmi2_import_complete"
    "d_event_iteration_req\0300 \001(\01327.fmitcp_pro"
    "to.fmi2_import_completed_event_iteration"
    "_req\022j\n)fmi2_import_completed_event_iter"
    "ation_res\0301 \001(\01327.fmitcp_proto.fmi2_impo"
    "rt_completed_event_iteration_res\022b\n%fmi2"
    "_import_get_continuous_states_req\0302 \001(\0132"
    "3.fmitcp_proto.fmi2_import_get_continuou"
    "s_states_req\022b\n%fmi2_import_get_continuo"
    "us_states_res\0303 \001(\01323.fmitcp_proto.fmi2_"
    "import_get_continuous_states_res\022r\n-fmi2"
    "_import_get_nominal_continuous_states_re"
    "q\0304 \001(\0132;.fmitcp_proto.fmi2_import_get_n"
    "ominal_continuous_states_req\022r\n-fmi2_imp"
    "ort_get_nominal_continuous_states_res\0305 "
    "\001(\0132;.fmitcp_proto.fmi2_import_get_nomin"
    "al_continuous_states_res\022J\n\031fmi2_import_"
    "terminate_req\0306 \001(\0132\'.fmitcp_proto.fmi2_"
    "import_terminate_req\022J\n\031fmi2_import_term"
    "inate_res\0307 \001(\0132\'.fmitcp_proto.fmi2_impo"
    "rt_terminate_res\022N\n\033fmi2_import_get_vers"
    "ion_req\0308 \001(\0132).fmitcp_proto.fmi2_import"
    "_get_version_req\022N\n\033fmi2_import_get_vers"
    "ion_res\0309 \001(\0132).fmitcp_proto.fmi2_import"
    "_get_version_res\022Z\n!fmi2_import_set_debu"
    "g_logging_req\030: \001(\0132/.fmitcp_proto.fmi2_"
    "import_set_debug_logging_req\022Z\n!fmi2_imp"
    "ort_set_debug_logging_res\030; \001(\0132/.fmitcp"
    "_proto.fmi2_import_set_debug_logging_res"
    "\022H\n\030fmi2_import_set_real_req\030< \001(\0132&.fmi"
    "tcp_proto.fmi2_import_set_real_req\022H\n\030fm"
    "i2_import_set_real_res\030= \001(\0132&.fmitcp_pr"
    "oto.fmi2_import_set_real_res\022N\n\033fmi2_imp"
    "ort_set_integer_req\030> \001(\0132).fmitcp_proto"
    ".fmi2_import_set_integer_req\022N\n\033fmi2_imp"
    "ort_set_integer_res\030\? \001(\0132).fmitcp_proto"
    ".fmi2_import_set_integer_res\022N\n\033fmi2_imp"
    "ort_set_boolean_req\030@ \001(\0132).fmitcp_proto"
    ".fmi2_import_set_boolean_req\022N\n\033fmi2_imp"
    "ort_set_boolean_res\030A \001(\0132).fmitcp_proto"
    ".fmi2_import_set_boolean_res\022L\n\032fmi2_imp"
    "ort_set_string_req\030B \001(\0132(.fmitcp_proto."
    "fmi2_import_set_string_req\022L\n\032fmi2_impor"
    "t_set_string_res\030C \001(\0132(.fmitcp_proto.fm"
    "i2_import_set_string_res\022H\n\030fmi2_import_"
    "get_real_req\030D \001(\0132&.fmitcp_proto.fmi2_i"
    "mport_get_real_req\022H\n\030fmi2_import_get_re"
    "al_res\030E \001(\0132&.fmitcp_proto.fmi2_import_"
    "get_real_res\022N\n\033fmi2_import_get_integer_"
    "req\030F \001(\0132).fmitcp_proto.fmi2_import_get"
    "_integer_req\022N\n\033fmi2_import_get_integer_"
    "res\030G \001(\0132).fmitcp_proto.fmi2_import_get"
    "_integer_res\022N\n\033fmi2_import_get_boolean_"
    "req\030H \001(\0132).fmitcp_proto.fmi2_import_get"
    "_boolean_req\022N\n\033fmi2_import_get_boolean_"
    "res\030I \001(\0132).fmitcp_proto.fmi2_import_get"
    "_boolean_res\022L\n\032fmi2_import_get_string_r"
    "eq\030J \001(\0132(.fmitcp_proto.fmi2_import_get_"
    "string_req\022L\n\032fmi2_import_get_string_res"
    "\030K \001(\0132(.fmitcp_proto.fmi2_import_get_st"
    "ring_res\022R\n\035fmi2_import_get_fmu_state_re"
    "q\030L \001(\0132+.fmitcp_proto.fmi2_import_get_f"
    "mu_state_req\022R\n\035fmi2_import_get_fmu_stat"
    "e_res\030M \001(\0132+.fmitcp_proto.fmi2_import_g"
    "et_fmu_state_res\022R\n\035fmi2_import_set_fmu_"
    "state_req\030N \001(\0132+.fmitcp_proto.fmi2_impo"
    "rt_set_fmu_state_req\022R\n\035fmi2_import_set_"
    "fmu_state_res\030O \001(\0132+.fmitcp_proto.fmi2_"
    "import_set_fmu_state_res\022T\n\036fmi2_import_"
    "free_fmu_state_req\030P \001(\0132,.fmitcp_proto."
    "fmi2_import_free_fmu_state_req\022T\n\036fmi2_i"
    "mport_free_fmu_state_res\030Q \001(\0132,.fmitcp_"
    "proto.fmi2_import_free_fmu_state_res\022l\n*"
    "fmi2_import_get_directional_derivative_r"
    "eq\030X \001(\01328.fmitcp_proto.fmi2_import_get_"
    "directional_derivative_req\022l\n*fmi2_impor"
    "t_get_directional_derivative_res\030Y \001(\01328"
    ".fmitcp_proto.fmi2_import_get_directiona"
    "l_derivative_res\022.\n\013get_xml_req\030Z \001(\0132\031."
    "fmitcp_proto.get_xml_req\022.\n\013get_xml_res\030"
    "[ \001(\0132\031.fmitcp_proto.get_xml_res\"\354\035\n\004Typ"
    "e\022$\n type_fmi2_import_instantiate_req\020\001\022"
    "$\n type_fmi2_import_instantiate_res\020\002\022)\n"
    "%type_fmi2_import_initialize_slave_req\020\003"
    "\022)\n%type_fmi2_import_initialize_slave_re"
    "s\020\004\022(\n$type_fmi2_import_terminate_slave_"
    "req\020\005\022(\n$type_fmi2_import_terminate_slav"
    "e_res\020\006\022$\n type_fmi2_import_reset_slave_"
    "req\020\007\022$\n type_fmi2_import_reset_slave_re"
    "s\020\010\022,\n(type_fmi2_import_free_slave_insta"
    "nce_req\020\t\022,\n(type_fmi2_import_free_slave"
    "_instance_res\020\n\0223\n/type_fmi2_import_set_"
    "real_input_derivatives_req\020\013\0223\n/type_fmi"
    "2_import_set_real_input_derivatives_res\020"
    "\014\0224\n0type_fmi2_import_get_real_output_de"
    "rivatives_req\020\r\0224\n0type_fmi2_import_get_"
    "real_output_derivatives_res\020\016\022$\n type_fm"
    "i2_import_cancel_step_req\020\017\022$\n type_fmi2"
    "_import_cancel_step_res\020\020\022 \n\034type_fmi2_i"
    "mport_do_step_req\020\021\022 \n\034type_fmi2_import_"
    "do_step_res\020\022\022#\n\037type_fmi2_import_get_st"
    "atus_req\020\023\022#\n\037type_fmi2_import_get_statu"
    "s_res\020\024\022(\n$type_fmi2_import_get_real_sta"
    "tus_req\020\025\022(\n$type_fmi2_import_get_real_s"
    "tatus_res\020\026\022+\n\'type_fmi2_import_get_inte"
    "ger_status_req\020\027\022+\n\'type_fmi2_import_get"
    "_integer_status_res\020\030\022+\n\'type_fmi2_impor"
    "t_get_boolean_status_req\020\031\022+\n\'type_fmi2_"
    "import_get_boolean_status_res\020\032\022*\n&type_"
    "fmi2_import_get_string_status_req\020\033\022*\n&t"
    "ype_fmi2_import_get_string_status_res\020\034\022"
    "*\n&type_fmi2_import_instantiate_model_re"
    "q\020\035\022*\n&type_fmi2_import_instantiate_mode"
    "l_res\020\036\022,\n(type_fmi2_import_free_model_i"
    "nstance_req\020\037\022,\n(type_fmi2_import_free_m"
    "odel_instance_res\020 \022!\n\035type_fmi2_import_"
    "set_time_req\020!\022!\n\035type_fmi2_import_set_t"
    "ime_res\020\"\022.\n*type_fmi2_import_set_contin"
    "uous_states_req\020#\022.\n*type_fmi2_import_se"
    "t_continuous_states_res\020$\0222\n.type_fmi2_i"
    "mport_completed_integrator_step_req\020%\0222\n"
    ".type_fmi2_import_completed_integrator_s"
    "tep_res\020&\022)\n%type_fmi2_import_initialize"
    "_model_req\020\'\022)\n%type_fmi2_import_initial"
    "ize_model_res\020(\022(\n$type_fmi2_import_get_"
    "derivatives_req\020)\022(\n$type_fmi2_import_ge"
    "t_derivatives_res\020*\022-\n)type_fmi2_import_"
    "get_event_indicators_req\020+\022-\n)type_fmi2_"
    "import_get_event_indicators_res\020,\022$\n typ"
    "e_fmi2_import_eventUpdate_req\020-\022$\n type_"
    "fmi2_import_eventUpdate_res\020.\0222\n.type_fm"
    "i2_import_completed_event_iteration_req\020"
    "/\0222\n.type_fmi2_import_completed_event_it"
    "eration_res\0200\022.\n*type_fmi2_import_get_co"
    "ntinuous_states_req\0201\022.\n*type_fmi2_impor"
    "t_get_continuous_states_res\0202\0226\n2type_fm"
    "i2_import_get_nominal_continuous_states_"
    "req\0203\0226\n2type_fmi2_import_get_nominal_co"
    "ntinuous_states_res\0204\022\"\n\036type_fmi2_impor"
    "t_terminate_req\0205\022\"\n\036type_fmi2_import_te"
    "rminate_res\0206\022$\n type_fmi2_import_get_ve"
    "rsion_req\0207\022$\n type_fmi2_import_get_vers"
    "ion_res\0208\022*\n&type_fmi2_import_set_debug_"
    "logging_req\0209\022*\n&type_fmi2_import_set_de"
    "bug_logging_res\020:\022!\n\035type_fmi2_import_se"
    "t_real_req\020;\022!\n\035type_fmi2_import_set_rea"
    "l_res\020<\022$\n type_fmi2_import_set_integer_"
    "req\020=\022$\n type_fmi2_import_set_integer_re"
    "s\020>\022$\n type_fmi2_import_set_boolean_req\020"
    "\?\022$\n type_fmi2_import_set_boolean_res\020@\022"
    "#\n\037type_fmi2_import_set_string_req\020A\022#\n\037"
    "type_fmi2_import_set_string_res\020B\022!\n\035typ"
    "e_fmi2_import_get_real_req\020C\022!\n\035type_fmi"
    "2_import_get_real_res\020D\022$\n type_fmi2_imp"
    "ort_get_integer_req\020E\022$\n type_fmi2_impor"
    "t_get_integer_res\020F\022$\n type_fmi2_import_"
    "get_boolean_req\020G\022$\n type_fmi2_import_ge"
    "t_boolean_res\020H\022#\n\037type_fmi2_import_get_"
    "string_req\020I\022#\n\037type_fmi2_import_get_str"
    "ing_res\020J\022&\n\"type_fmi2_import_get_fmu_st"
    "ate_req\020K\022&\n\"type_fmi2_import_get_fmu_st"
    "ate_res\020L\022&\n\"type_fmi2_import_set_fmu_st"
    "ate_req\020M\022&\n\"type_fmi2_import_set_fmu_st"
    "ate_res\020N\022\'\n#type_fmi2_import_free_fmu_s"
    "tate_req\020O\022\'\n#type_fmi2_import_free_fmu_"
    "state_res\020P\0222\n.type_fmi2_import_serializ"
    "ed_fmu_state_size_req\020Q\0222\n.type_fmi2_imp"
    "ort_serialized_fmu_state_size_res\020R\022,\n(t"
    "ype_fmi2_import_serialize_fmu_state_req\020"
    "S\022,\n(type_fmi2_import_serialize_fmu_stat"
    "e_res\020T\022/\n+type_fmi2_import_de_serialize"
    "_fmu_state_req\020U\022/\n+type_fmi2_import_de_"
    "serialize_fmu_state_res\020V\0223\n/type_fmi2_i"
    "mport_get_directional_derivative_req\020W\0223"
    "\n/type_fmi2_import_get_directional_deriv"
    "ative_res\020X\022\024\n\020type_get_xml_req\020Y\022\024\n\020typ"
    "e_get_xml_res\020Z\"\277\001\n\021fmi2_event_info_t\022\032\n"
    "\022iterationConverged\030\001 \002(\010\022#\n\033stateValueR"
    "eferencesChanged\030\002 \002(\010\022\032\n\022stateValuesCha"
    "nged\030\003 \002(\010\022\033\n\023terminateSimulation\030\004 \002(\010\022"
    "\031\n\021upcomingTimeEvent\030\005 \002(\010\022\025\n\rnextEventT"
    "ime\030\006 \002(\001\"B\n\033fmi2_import_instantiate_req"
    "\022\022\n\nmessage_id\030\001 \002(\005\022\017\n\007visible\030\002 \001(\010\"`\n"
    "\033fmi2_import_instantiate_res\022\022\n\nmessage_"
    "id\030\001 \002(\005\022-\n\006status\030\002 \002(\0162\035.fmitcp_proto."
    "jm_status_enu_t\"\260\001\n fmi2_import_initiali"
    "ze_slave_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuI"
    "d\030\002 \002(\005\022\030\n\020toleranceDefined\030\003 \002(\010\022\021\n\ttol"
    "erance\030\004 \002(\001\022\021\n\tstartTime\030\005 \002(\001\022\027\n\017stopT"
    "imeDefined\030\006 \002(\010\022\020\n\010stopTime\030\007 \002(\001\"c\n fm"
    "i2_import_initialize_slave_res\022\022\n\nmessag"
    "e_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitcp_prot"
    "o.fmi2_status_t\"D\n\037fmi2_import_terminate"
    "_slave_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030"
    "\002 \002(\005\"b\n\037fmi2_import_terminate_slave_res"
    "\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.f"
    "mitcp_proto.fmi2_status_t\"@\n\033fmi2_import"
    "_reset_slave_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005"
    "fmuId\030\002 \002(\005\"^\n\033fmi2_import_reset_slave_r"
    "es\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033"
    ".fmitcp_proto.fmi2_status_t\"H\n#fmi2_impo"
    "rt_free_slave_instance_req\022\022\n\nmessage_id"
    "\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"9\n#fmi2_import_fre"
    "e_slave_instance_res\022\022\n\nmessage_id\030\001 \002(\005"
    "\"\210\001\n*fmi2_import_set_real_input_derivati"
    "ves_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002"
    "(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n\006orders\030\004 "
    "\003(\005\022\016\n\006values\030\005 \003(\001\"m\n*fmi2_import_set_r"
    "eal_input_derivatives_res\022\022\n\nmessage_id\030"
    "\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitcp_proto.fmi"
    "2_status_t\"y\n+fmi2_import_get_real_outpu"
    "t_derivatives_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n"
    "\005fmuId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n"
    "\006orders\030\004 \003(\005\"~\n+fmi2_import_get_real_ou"
    "tput_derivatives_res\022\022\n\nmessage_id\030\001 \002(\005"
    "\022+\n\006status\030\002 \002(\0162\033.fmitcp_proto.fmi2_sta"
    "tus_t\022\016\n\006values\030\003 \003(\001\"@\n\033fmi2_import_can"
    "cel_step_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuI"
    "d\030\002 \002(\005\"^\n\033fmi2_import_cancel_step_res\022\022"
    "\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmi"
    "tcp_proto.fmi2_status_t\"\217\001\n\027fmi2_import_"
    "do_step_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId"
    "\030\002 \002(\005\022!\n\031currentCommunicationPoint\030\003 \002("
    "\001\022\035\n\025communicationStepSize\030\004 \002(\001\022\017\n\007newS"
    "tep\030\005 \002(\010\"Z\n\027fmi2_import_do_step_res\022\022\n\n"
    "message_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitc"
    "p_proto.fmi2_status_t\"q\n\032fmi2_import_get"
    "_status_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId"
    "\030\002 \002(\005\0220\n\006status\030\003 \002(\0162 .fmitcp_proto.fm"
    "i2_status_kind_t\"\\\n\032fmi2_import_get_stat"
    "us_res\022\022\n\nmessage_id\030\001 \002(\005\022*\n\005value\030\002 \002("
    "\0162\033.fmitcp_proto.fmi2_status_t\"t\n\037fmi2_i"
    "mport_get_real_status_req\022\022\n\nmessage_id\030"
    "\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022.\n\004kind\030\003 \002(\0162 .fmi"
    "tcp_proto.fmi2_status_kind_t\"D\n\037fmi2_imp"
    "ort_get_real_status_res\022\022\n\nmessage_id\030\001 "
    "\002(\005\022\r\n\005value\030\002 \002(\001\"w\n\"fmi2_import_get_in"
    "teger_status_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005"
    "fmuId\030\002 \002(\005\022.\n\004kind\030\003 \002(\0162 .fmitcp_proto"
    ".fmi2_status_kind_t\"G\n\"fmi2_import_get_i"
    "nteger_status_res\022\022\n\nmessage_id\030\001 \002(\005\022\r\n"
    "\005value\030\002 \002(\005\"w\n\"fmi2_import_get_boolean_"
    "status_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030"
    "\002 \002(\005\022.\n\004kind\030\003 \002(\0162 .fmitcp_proto.fmi2_"
    "status_kind_t\"G\n\"fmi2_import_get_boolean"
    "_status_res\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005value"
    "\030\002 \002(\010\"v\n!fmi2_import_get_string_status_"
    "req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022."
    "\n\004kind\030\003 \002(\0162 .fmitcp_proto.fmi2_status_"
    "kind_t\"F\n!fmi2_import_get_string_status_"
    "res\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005value\030\002 \002(\t\"\207"
    "\001\n!fmi2_import_instantiate_model_req\022\022\n\n"
    "message_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\024\n\014insta"
    "nceName\030\003 \002(\t\022\030\n\020resourceLocation\030\004 \002(\t\022"
    "\017\n\007visible\030\005 \001(\010\"f\n!fmi2_import_instanti"
    "ate_model_res\022\022\n\nmessage_id\030\001 \002(\005\022-\n\006sta"
    "tus\030\002 \002(\0162\035.fmitcp_proto.jm_status_enu_t"
    "\"H\n#fmi2_import_free_model_instance_req\022"
    "\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"9\n#fm"
    "i2_import_free_model_instance_res\022\022\n\nmes"
    "sage_id\030\001 \002(\005\"K\n\030fmi2_import_set_time_re"
    "q\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\014\n\004"
    "time\030\003 \002(\001\"[\n\030fmi2_import_set_time_res\022\022"
    "\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmi"
    "tcp_proto.fmi2_status_t\"U\n%fmi2_import_s"
    "et_continuous_states_req\022\022\n\nmessage_id\030\001"
    " \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\t\n\001x\030\003 \003(\001\"h\n%fmi2_i"
    "mport_set_continuous_states_res\022\022\n\nmessa"
    "ge_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitcp_pro"
    "to.fmi2_status_t\"N\n)fmi2_import_complete"
    "d_integrator_step_req\022\022\n\nmessage_id\030\001 \002("
    "\005\022\r\n\005fmuId\030\002 \002(\005\"\205\001\n)fmi2_import_complet"
    "ed_integrator_step_res\022\022\n\nmessage_id\030\001 \002"
    "(\005\022\027\n\017callEventUpdate\030\002 \002(\010\022+\n\006status\030\003 "
    "\002(\0162\033.fmitcp_proto.fmi2_status_t\"}\n fmi2"
    "_import_initialize_model_req\022\022\n\nmessage_"
    "id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\033\n\023toleranceCont"
    "rolled\030\003 \002(\010\022\031\n\021relativeTolerance\030\004 \002(\001\""
    "\227\001\n fmi2_import_initialize_model_res\022\022\n\n"
    "message_id\030\001 \002(\005\0222\n\teventInfo\030\002 \002(\0132\037.fm"
    "itcp_proto.fmi2_event_info_t\022+\n\006status\030\003"
    " \002(\0162\033.fmitcp_proto.fmi2_status_t\"D\n\037fmi"
    "2_import_get_derivatives_req\022\022\n\nmessage_"
    "id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"w\n\037fmi2_import_g"
    "et_derivatives_res\022\022\n\nmessage_id\030\001 \002(\005\022\023"
    "\n\013derivatives\030\002 \003(\001\022+\n\006status\030\003 \002(\0162\033.fm"
    "itcp_proto.fmi2_status_t\"I\n$fmi2_import_"
    "get_event_indicators_req\022\022\n\nmessage_id\030\001"
    " \002(\005\022\r\n\005fmuId\030\002 \002(\005\"\200\001\n$fmi2_import_get_"
    "event_indicators_res\022\022\n\nmessage_id\030\001 \002(\005"
    "\022\027\n\017eventIndicators\030\002 \003(\001\022+\n\006status\030\003 \002("
    "\0162\033.fmitcp_proto.fmi2_status_t\"]\n\033fmi2_i"
    "mport_eventUpdate_req\022\022\n\nmessage_id\030\001 \002("
    "\005\022\r\n\005fmuId\030\002 \002(\005\022\033\n\023intermediateResults\030"
    "\003 \002(\010\"\222\001\n\033fmi2_import_eventUpdate_res\022\022\n"
    "\nmessage_id\030\001 \002(\005\0222\n\teventInfo\030\002 \002(\0132\037.f"
    "mitcp_proto.fmi2_event_info_t\022+\n\006status\030"
    "\003 \002(\0162\033.fmitcp_proto.fmi2_status_t\"N\n)fm"
    "i2_import_completed_event_iteration_req\022"
    "\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"l\n)fm"
    "i2_import_completed_event_iteration_res\022"
    "\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fm"
    "itcp_proto.fmi2_status_t\"J\n%fmi2_import_"
    "get_continuous_states_req\022\022\n\nmessage_id\030"
    "\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"x\n%fmi2_import_get_"
    "continuous_states_res\022\022\n\nmessage_id\030\001 \002("
    "\005\022\016\n\006states\030\002 \003(\001\022+\n\006status\030\003 \002(\0162\033.fmit"
    "cp_proto.fmi2_status_t\"R\n-fmi2_import_ge"
    "t_nominal_continuous_states_req\022\022\n\nmessa"
    "ge_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"\201\001\n-fmi2_impo"
    "rt_get_nominal_continuous_states_res\022\022\n\n"
    "message_id\030\001 \002(\005\022\017\n\007nominal\030\002 \003(\001\022+\n\006sta"
    "tus\030\003 \002(\0162\033.fmitcp_proto.fmi2_status_t\">"
    "\n\031fmi2_import_terminate_req\022\022\n\nmessage_i"
    "d\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"\\\n\031fmi2_import_te"
    "rminate_res\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006statu"
    "s\030\002 \002(\0162\033.fmitcp_proto.fmi2_status_t\"@\n\033"
    "fmi2_import_get_version_req\022\022\n\nmessage_i"
    "d\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\"B\n\033fmi2_import_ge"
    "t_version_res\022\022\n\nmessage_id\030\001 \002(\005\022\017\n\007ver"
    "sion\030\002 \002(\t\"m\n!fmi2_import_set_debug_logg"
    "ing_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002"
    "(\005\022\021\n\tloggingOn\030\003 \002(\010\022\022\n\ncategories\030\004 \003("
    "\t\"d\n!fmi2_import_set_debug_logging_res\022\022"
    "\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmi"
    "tcp_proto.fmi2_status_t\"f\n\030fmi2_import_s"
    "et_real_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId"
    "\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n\006value"
    "s\030\004 \003(\001\"[\n\030fmi2_import_set_real_res\022\022\n\nm"
    "essage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitcp"
    "_proto.fmi2_status_t\"i\n\033fmi2_import_set_"
    "integer_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId"
    "\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n\006value"
    "s\030\004 \003(\005\"^\n\033fmi2_import_set_integer_res\022\022"
    "\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmi"
    "tcp_proto.fmi2_status_t\"i\n\033fmi2_import_s"
    "et_boolean_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fm"
    "uId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n\006va"
    "lues\030\004 \003(\010\"^\n\033fmi2_import_set_boolean_re"
    "s\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033."
    "fmitcp_proto.fmi2_status_t\"h\n\032fmi2_impor"
    "t_set_string_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005"
    "fmuId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\022\016\n\006"
    "values\030\004 \003(\t\"]\n\032fmi2_import_set_string_r"
    "es\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033"
    ".fmitcp_proto.fmi2_status_t\"V\n\030fmi2_impo"
    "rt_get_real_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005f"
    "muId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\"k\n\030f"
    "mi2_import_get_real_res\022\022\n\nmessage_id\030\001 "
    "\002(\005\022\016\n\006values\030\002 \003(\001\022+\n\006status\030\003 \002(\0162\033.fm"
    "itcp_proto.fmi2_status_t\"Y\n\033fmi2_import_"
    "get_integer_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005f"
    "muId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\"n\n\033f"
    "mi2_import_get_integer_res\022\022\n\nmessage_id"
    "\030\001 \002(\005\022\016\n\006values\030\002 \003(\005\022+\n\006status\030\003 \002(\0162\033"
    ".fmitcp_proto.fmi2_status_t\"Y\n\033fmi2_impo"
    "rt_get_boolean_req\022\022\n\nmessage_id\030\001 \002(\005\022\r"
    "\n\005fmuId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005\"n"
    "\n\033fmi2_import_get_boolean_res\022\022\n\nmessage"
    "_id\030\001 \002(\005\022\016\n\006values\030\002 \003(\010\022+\n\006status\030\003 \002("
    "\0162\033.fmitcp_proto.fmi2_status_t\"X\n\032fmi2_i"
    "mport_get_string_req\022\022\n\nmessage_id\030\001 \002(\005"
    "\022\r\n\005fmuId\030\002 \002(\005\022\027\n\017valueReferences\030\003 \003(\005"
    "\"m\n\032fmi2_import_get_string_res\022\022\n\nmessag"
    "e_id\030\001 \002(\005\022\016\n\006values\030\002 \003(\t\022+\n\006status\030\003 \002"
    "(\0162\033.fmitcp_proto.fmi2_status_t\"\n\n\010char_"
    "req\"\n\n\010char_res\"B\n\035fmi2_import_get_fmu_s"
    "tate_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 "
    "\002(\005\"q\n\035fmi2_import_get_fmu_state_res\022\022\n\n"
    "message_id\030\001 \002(\005\022\017\n\007stateId\030\002 \002(\005\022+\n\006sta"
    "tus\030\003 \002(\0162\033.fmitcp_proto.fmi2_status_t\"S"
    "\n\035fmi2_import_set_fmu_state_req\022\022\n\nmessa"
    "ge_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\017\n\007stateId\030\003 "
    "\002(\005\"`\n\035fmi2_import_set_fmu_state_res\022\022\n\n"
    "message_id\030\001 \002(\005\022+\n\006status\030\002 \002(\0162\033.fmitc"
    "p_proto.fmi2_status_t\"E\n\036fmi2_import_fre"
    "e_fmu_state_req\022\022\n\nmessage_id\030\001 \002(\005\022\017\n\007s"
    "tateId\030\002 \002(\005\"a\n\036fmi2_import_free_fmu_sta"
    "te_res\022\022\n\nmessage_id\030\001 \002(\005\022+\n\006status\030\002 \002"
    "(\0162\033.fmitcp_proto.fmi2_status_t\"y\n*fmi2_"
    "import_get_directional_derivative_req\022\022\n"
    "\nmessage_id\030\001 \002(\005\022\r\n\005fmuId\030\002 \002(\005\022\r\n\005v_re"
    "f\030\003 \003(\005\022\r\n\005z_ref\030\004 \003(\005\022\n\n\002dv\030\005 \003(\001\"y\n*fm"
    "i2_import_get_directional_derivative_res"
    "\022\022\n\nmessage_id\030\001 \002(\005\022\n\n\002dz\030\002 \003(\001\022+\n\006stat"
    "us\030\003 \002(\0162\033.fmitcp_proto.fmi2_status_t\"0\n"
    "\013get_xml_req\022\022\n\nmessage_id\030\001 \002(\005\022\r\n\005fmuI"
    "d\030\002 \002(\005\"b\n\013get_xml_res\022\022\n\nmessage_id\030\001 \002"
    "(\005\0222\n\010logLevel\030\002 \002(\0162 .fmitcp_proto.jm_l"
    "og_level_enu_t\022\013\n\003xml\030\003 \002(\t*\327\001\n\022jm_log_l"
    "evel_enu_t\022\030\n\024jm_log_level_nothing\020\000\022\026\n\022"
    "jm_log_level_fatal\020\001\022\026\n\022jm_log_level_err"
    "or\020\002\022\030\n\024jm_log_level_warning\020\003\022\025\n\021jm_log"
    "_level_info\020\004\022\030\n\024jm_log_level_verbose\020\005\022"
    "\026\n\022jm_log_level_debug\020\006\022\024\n\020jm_log_level_"
    "all\020\007*\234\001\n\rfmi2_status_t\022\022\n\016fmi2_status_o"
    "k\020\000\022\027\n\023fmi2_status_warning\020\001\022\027\n\023fmi2_sta"
    "tus_discard\020\002\022\025\n\021fmi2_status_error\020\003\022\025\n\021"
    "fmi2_status_fatal\020\004\022\027\n\023fmi2_status_pendi"
    "ng\020\005*z\n\022fmi2_status_kind_t\022\027\n\023fmi2_do_st"
    "ep_status\020\000\022\027\n\023fmi2_pending_status\020\001\022\035\n\031"
    "fmi2_last_successful_time\020\002\022\023\n\017fmi2_term"
    "inated\020\003*T\n\017jm_status_enu_t\022\023\n\017jm_status"
    "_error\020\000\022\025\n\021jm_status_success\020\001\022\025\n\021jm_st"
    "atus_warning\020\002", 20414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fmitcp.proto", &protobuf_RegisterTypes);
  fmitcp_message::default_instance_ = new fmitcp_message();
  fmi2_event_info_t::default_instance_ = new fmi2_event_info_t();
  fmi2_import_instantiate_req::default_instance_ = new fmi2_import_instantiate_req();
  fmi2_import_instantiate_res::default_instance_ = new fmi2_import_instantiate_res();
  fmi2_import_initialize_slave_req::default_instance_ = new fmi2_import_initialize_slave_req();
  fmi2_import_initialize_slave_res::default_instance_ = new fmi2_import_initialize_slave_res();
  fmi2_import_terminate_slave_req::default_instance_ = new fmi2_import_terminate_slave_req();
  fmi2_import_terminate_slave_res::default_instance_ = new fmi2_import_terminate_slave_res();
  fmi2_import_reset_slave_req::default_instance_ = new fmi2_import_reset_slave_req();
  fmi2_import_reset_slave_res::default_instance_ = new fmi2_import_reset_slave_res();
  fmi2_import_free_slave_instance_req::default_instance_ = new fmi2_import_free_slave_instance_req();
  fmi2_import_free_slave_instance_res::default_instance_ = new fmi2_import_free_slave_instance_res();
  fmi2_import_set_real_input_derivatives_req::default_instance_ = new fmi2_import_set_real_input_derivatives_req();
  fmi2_import_set_real_input_derivatives_res::default_instance_ = new fmi2_import_set_real_input_derivatives_res();
  fmi2_import_get_real_output_derivatives_req::default_instance_ = new fmi2_import_get_real_output_derivatives_req();
  fmi2_import_get_real_output_derivatives_res::default_instance_ = new fmi2_import_get_real_output_derivatives_res();
  fmi2_import_cancel_step_req::default_instance_ = new fmi2_import_cancel_step_req();
  fmi2_import_cancel_step_res::default_instance_ = new fmi2_import_cancel_step_res();
  fmi2_import_do_step_req::default_instance_ = new fmi2_import_do_step_req();
  fmi2_import_do_step_res::default_instance_ = new fmi2_import_do_step_res();
  fmi2_import_get_status_req::default_instance_ = new fmi2_import_get_status_req();
  fmi2_import_get_status_res::default_instance_ = new fmi2_import_get_status_res();
  fmi2_import_get_real_status_req::default_instance_ = new fmi2_import_get_real_status_req();
  fmi2_import_get_real_status_res::default_instance_ = new fmi2_import_get_real_status_res();
  fmi2_import_get_integer_status_req::default_instance_ = new fmi2_import_get_integer_status_req();
  fmi2_import_get_integer_status_res::default_instance_ = new fmi2_import_get_integer_status_res();
  fmi2_import_get_boolean_status_req::default_instance_ = new fmi2_import_get_boolean_status_req();
  fmi2_import_get_boolean_status_res::default_instance_ = new fmi2_import_get_boolean_status_res();
  fmi2_import_get_string_status_req::default_instance_ = new fmi2_import_get_string_status_req();
  fmi2_import_get_string_status_res::default_instance_ = new fmi2_import_get_string_status_res();
  fmi2_import_instantiate_model_req::default_instance_ = new fmi2_import_instantiate_model_req();
  fmi2_import_instantiate_model_res::default_instance_ = new fmi2_import_instantiate_model_res();
  fmi2_import_free_model_instance_req::default_instance_ = new fmi2_import_free_model_instance_req();
  fmi2_import_free_model_instance_res::default_instance_ = new fmi2_import_free_model_instance_res();
  fmi2_import_set_time_req::default_instance_ = new fmi2_import_set_time_req();
  fmi2_import_set_time_res::default_instance_ = new fmi2_import_set_time_res();
  fmi2_import_set_continuous_states_req::default_instance_ = new fmi2_import_set_continuous_states_req();
  fmi2_import_set_continuous_states_res::default_instance_ = new fmi2_import_set_continuous_states_res();
  fmi2_import_completed_integrator_step_req::default_instance_ = new fmi2_import_completed_integrator_step_req();
  fmi2_import_completed_integrator_step_res::default_instance_ = new fmi2_import_completed_integrator_step_res();
  fmi2_import_initialize_model_req::default_instance_ = new fmi2_import_initialize_model_req();
  fmi2_import_initialize_model_res::default_instance_ = new fmi2_import_initialize_model_res();
  fmi2_import_get_derivatives_req::default_instance_ = new fmi2_import_get_derivatives_req();
  fmi2_import_get_derivatives_res::default_instance_ = new fmi2_import_get_derivatives_res();
  fmi2_import_get_event_indicators_req::default_instance_ = new fmi2_import_get_event_indicators_req();
  fmi2_import_get_event_indicators_res::default_instance_ = new fmi2_import_get_event_indicators_res();
  fmi2_import_eventUpdate_req::default_instance_ = new fmi2_import_eventUpdate_req();
  fmi2_import_eventUpdate_res::default_instance_ = new fmi2_import_eventUpdate_res();
  fmi2_import_completed_event_iteration_req::default_instance_ = new fmi2_import_completed_event_iteration_req();
  fmi2_import_completed_event_iteration_res::default_instance_ = new fmi2_import_completed_event_iteration_res();
  fmi2_import_get_continuous_states_req::default_instance_ = new fmi2_import_get_continuous_states_req();
  fmi2_import_get_continuous_states_res::default_instance_ = new fmi2_import_get_continuous_states_res();
  fmi2_import_get_nominal_continuous_states_req::default_instance_ = new fmi2_import_get_nominal_continuous_states_req();
  fmi2_import_get_nominal_continuous_states_res::default_instance_ = new fmi2_import_get_nominal_continuous_states_res();
  fmi2_import_terminate_req::default_instance_ = new fmi2_import_terminate_req();
  fmi2_import_terminate_res::default_instance_ = new fmi2_import_terminate_res();
  fmi2_import_get_version_req::default_instance_ = new fmi2_import_get_version_req();
  fmi2_import_get_version_res::default_instance_ = new fmi2_import_get_version_res();
  fmi2_import_set_debug_logging_req::default_instance_ = new fmi2_import_set_debug_logging_req();
  fmi2_import_set_debug_logging_res::default_instance_ = new fmi2_import_set_debug_logging_res();
  fmi2_import_set_real_req::default_instance_ = new fmi2_import_set_real_req();
  fmi2_import_set_real_res::default_instance_ = new fmi2_import_set_real_res();
  fmi2_import_set_integer_req::default_instance_ = new fmi2_import_set_integer_req();
  fmi2_import_set_integer_res::default_instance_ = new fmi2_import_set_integer_res();
  fmi2_import_set_boolean_req::default_instance_ = new fmi2_import_set_boolean_req();
  fmi2_import_set_boolean_res::default_instance_ = new fmi2_import_set_boolean_res();
  fmi2_import_set_string_req::default_instance_ = new fmi2_import_set_string_req();
  fmi2_import_set_string_res::default_instance_ = new fmi2_import_set_string_res();
  fmi2_import_get_real_req::default_instance_ = new fmi2_import_get_real_req();
  fmi2_import_get_real_res::default_instance_ = new fmi2_import_get_real_res();
  fmi2_import_get_integer_req::default_instance_ = new fmi2_import_get_integer_req();
  fmi2_import_get_integer_res::default_instance_ = new fmi2_import_get_integer_res();
  fmi2_import_get_boolean_req::default_instance_ = new fmi2_import_get_boolean_req();
  fmi2_import_get_boolean_res::default_instance_ = new fmi2_import_get_boolean_res();
  fmi2_import_get_string_req::default_instance_ = new fmi2_import_get_string_req();
  fmi2_import_get_string_res::default_instance_ = new fmi2_import_get_string_res();
  char_req::default_instance_ = new char_req();
  char_res::default_instance_ = new char_res();
  fmi2_import_get_fmu_state_req::default_instance_ = new fmi2_import_get_fmu_state_req();
  fmi2_import_get_fmu_state_res::default_instance_ = new fmi2_import_get_fmu_state_res();
  fmi2_import_set_fmu_state_req::default_instance_ = new fmi2_import_set_fmu_state_req();
  fmi2_import_set_fmu_state_res::default_instance_ = new fmi2_import_set_fmu_state_res();
  fmi2_import_free_fmu_state_req::default_instance_ = new fmi2_import_free_fmu_state_req();
  fmi2_import_free_fmu_state_res::default_instance_ = new fmi2_import_free_fmu_state_res();
  fmi2_import_get_directional_derivative_req::default_instance_ = new fmi2_import_get_directional_derivative_req();
  fmi2_import_get_directional_derivative_res::default_instance_ = new fmi2_import_get_directional_derivative_res();
  get_xml_req::default_instance_ = new get_xml_req();
  get_xml_res::default_instance_ = new get_xml_res();
  fmitcp_message::default_instance_->InitAsDefaultInstance();
  fmi2_event_info_t::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_reset_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_reset_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_slave_instance_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_slave_instance_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_input_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_input_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_output_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_output_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_cancel_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_cancel_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_do_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_do_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_model_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_model_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_model_instance_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_model_instance_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_time_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_time_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_integrator_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_integrator_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_model_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_model_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_event_indicators_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_event_indicators_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_eventUpdate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_eventUpdate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_event_iteration_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_event_iteration_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_nominal_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_nominal_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_version_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_version_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_debug_logging_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_debug_logging_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_integer_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_integer_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_boolean_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_boolean_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_string_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_string_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_res::default_instance_->InitAsDefaultInstance();
  char_req::default_instance_->InitAsDefaultInstance();
  char_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_directional_derivative_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_directional_derivative_res::default_instance_->InitAsDefaultInstance();
  get_xml_req::default_instance_->InitAsDefaultInstance();
  get_xml_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fmitcp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fmitcp_2eproto {
  StaticDescriptorInitializer_fmitcp_2eproto() {
    protobuf_AddDesc_fmitcp_2eproto();
  }
} static_descriptor_initializer_fmitcp_2eproto_;
const ::google::protobuf::EnumDescriptor* jm_log_level_enu_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jm_log_level_enu_t_descriptor_;
}
bool jm_log_level_enu_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* fmi2_status_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_status_t_descriptor_;
}
bool fmi2_status_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* fmi2_status_kind_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_status_kind_t_descriptor_;
}
bool fmi2_status_kind_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* jm_status_enu_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jm_status_enu_t_descriptor_;
}
bool jm_status_enu_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* fmitcp_message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmitcp_message_Type_descriptor_;
}
bool fmitcp_message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_reset_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_reset_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_slave_instance_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_slave_instance_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_input_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_input_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_output_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_output_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_cancel_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_cancel_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_do_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_do_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_model_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_model_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_model_instance_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_model_instance_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_time_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_time_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_integrator_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_integrator_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_model_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_model_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_event_indicators_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_event_indicators_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_eventUpdate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_eventUpdate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_event_iteration_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_event_iteration_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_nominal_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_nominal_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_version_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_version_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_debug_logging_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_debug_logging_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_integer_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_integer_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_boolean_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_boolean_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_string_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_string_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialized_fmu_state_size_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialized_fmu_state_size_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialize_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialize_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_de_serialize_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_de_serialize_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_directional_derivative_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_directional_derivative_res;
const fmitcp_message_Type fmitcp_message::type_get_xml_req;
const fmitcp_message_Type fmitcp_message::type_get_xml_res;
const fmitcp_message_Type fmitcp_message::Type_MIN;
const fmitcp_message_Type fmitcp_message::Type_MAX;
const int fmitcp_message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int fmitcp_message::kTypeFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateReqFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateResFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportResetSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportResetSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeSlaveInstanceReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeSlaveInstanceResFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealInputDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealInputDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealOutputDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealOutputDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportCancelStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportCancelStepResFieldNumber;
const int fmitcp_message::kFmi2ImportDoStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportDoStepResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateModelReqFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateModelResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeModelInstanceReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeModelInstanceResFieldNumber;
const int fmitcp_message::kFmi2ImportSetTimeReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetTimeResFieldNumber;
const int fmitcp_message::kFmi2ImportSetContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedIntegratorStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedIntegratorStepResFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeModelReqFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeModelResFieldNumber;
const int fmitcp_message::kFmi2ImportGetDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetEventIndicatorsReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetEventIndicatorsResFieldNumber;
const int fmitcp_message::kFmi2ImportEventUpdateReqFieldNumber;
const int fmitcp_message::kFmi2ImportEventUpdateResFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedEventIterationReqFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedEventIterationResFieldNumber;
const int fmitcp_message::kFmi2ImportGetContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetNominalContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetNominalContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateReqFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateResFieldNumber;
const int fmitcp_message::kFmi2ImportGetVersionReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetVersionResFieldNumber;
const int fmitcp_message::kFmi2ImportSetDebugLoggingReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetDebugLoggingResFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealResFieldNumber;
const int fmitcp_message::kFmi2ImportSetIntegerReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetIntegerResFieldNumber;
const int fmitcp_message::kFmi2ImportSetBooleanReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetBooleanResFieldNumber;
const int fmitcp_message::kFmi2ImportSetStringReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetStringResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealResFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerResFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringResFieldNumber;
const int fmitcp_message::kFmi2ImportGetFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportSetFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportGetDirectionalDerivativeReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetDirectionalDerivativeResFieldNumber;
const int fmitcp_message::kGetXmlReqFieldNumber;
const int fmitcp_message::kGetXmlResFieldNumber;
#endif  // !_MSC_VER

fmitcp_message::fmitcp_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmitcp_message::InitAsDefaultInstance() {
  fmi2_import_instantiate_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_req*>(&::fmitcp_proto::fmi2_import_instantiate_req::default_instance());
  fmi2_import_instantiate_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_res*>(&::fmitcp_proto::fmi2_import_instantiate_res::default_instance());
  fmi2_import_initialize_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_req*>(&::fmitcp_proto::fmi2_import_initialize_slave_req::default_instance());
  fmi2_import_initialize_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_res*>(&::fmitcp_proto::fmi2_import_initialize_slave_res::default_instance());
  fmi2_import_terminate_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_req*>(&::fmitcp_proto::fmi2_import_terminate_slave_req::default_instance());
  fmi2_import_terminate_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_res*>(&::fmitcp_proto::fmi2_import_terminate_slave_res::default_instance());
  fmi2_import_reset_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_req*>(&::fmitcp_proto::fmi2_import_reset_slave_req::default_instance());
  fmi2_import_reset_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_res*>(&::fmitcp_proto::fmi2_import_reset_slave_res::default_instance());
  fmi2_import_free_slave_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_req*>(&::fmitcp_proto::fmi2_import_free_slave_instance_req::default_instance());
  fmi2_import_free_slave_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_res*>(&::fmitcp_proto::fmi2_import_free_slave_instance_res::default_instance());
  fmi2_import_set_real_input_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_req*>(&::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::default_instance());
  fmi2_import_set_real_input_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_res*>(&::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::default_instance());
  fmi2_import_get_real_output_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_req*>(&::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::default_instance());
  fmi2_import_get_real_output_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_res*>(&::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::default_instance());
  fmi2_import_cancel_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_req*>(&::fmitcp_proto::fmi2_import_cancel_step_req::default_instance());
  fmi2_import_cancel_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_res*>(&::fmitcp_proto::fmi2_import_cancel_step_res::default_instance());
  fmi2_import_do_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_req*>(&::fmitcp_proto::fmi2_import_do_step_req::default_instance());
  fmi2_import_do_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_res*>(&::fmitcp_proto::fmi2_import_do_step_res::default_instance());
  fmi2_import_get_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_req*>(&::fmitcp_proto::fmi2_import_get_status_req::default_instance());
  fmi2_import_get_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_res*>(&::fmitcp_proto::fmi2_import_get_status_res::default_instance());
  fmi2_import_get_real_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_req*>(&::fmitcp_proto::fmi2_import_get_real_status_req::default_instance());
  fmi2_import_get_real_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_res*>(&::fmitcp_proto::fmi2_import_get_real_status_res::default_instance());
  fmi2_import_get_integer_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_req*>(&::fmitcp_proto::fmi2_import_get_integer_status_req::default_instance());
  fmi2_import_get_integer_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_res*>(&::fmitcp_proto::fmi2_import_get_integer_status_res::default_instance());
  fmi2_import_get_boolean_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_req*>(&::fmitcp_proto::fmi2_import_get_boolean_status_req::default_instance());
  fmi2_import_get_boolean_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_res*>(&::fmitcp_proto::fmi2_import_get_boolean_status_res::default_instance());
  fmi2_import_get_string_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_req*>(&::fmitcp_proto::fmi2_import_get_string_status_req::default_instance());
  fmi2_import_get_string_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_res*>(&::fmitcp_proto::fmi2_import_get_string_status_res::default_instance());
  fmi2_import_instantiate_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_req*>(&::fmitcp_proto::fmi2_import_instantiate_model_req::default_instance());
  fmi2_import_instantiate_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_res*>(&::fmitcp_proto::fmi2_import_instantiate_model_res::default_instance());
  fmi2_import_free_model_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_req*>(&::fmitcp_proto::fmi2_import_free_model_instance_req::default_instance());
  fmi2_import_free_model_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_res*>(&::fmitcp_proto::fmi2_import_free_model_instance_res::default_instance());
  fmi2_import_set_time_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_req*>(&::fmitcp_proto::fmi2_import_set_time_req::default_instance());
  fmi2_import_set_time_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_res*>(&::fmitcp_proto::fmi2_import_set_time_res::default_instance());
  fmi2_import_set_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_req*>(&::fmitcp_proto::fmi2_import_set_continuous_states_req::default_instance());
  fmi2_import_set_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_res*>(&::fmitcp_proto::fmi2_import_set_continuous_states_res::default_instance());
  fmi2_import_completed_integrator_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_req*>(&::fmitcp_proto::fmi2_import_completed_integrator_step_req::default_instance());
  fmi2_import_completed_integrator_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_res*>(&::fmitcp_proto::fmi2_import_completed_integrator_step_res::default_instance());
  fmi2_import_initialize_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_req*>(&::fmitcp_proto::fmi2_import_initialize_model_req::default_instance());
  fmi2_import_initialize_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_res*>(&::fmitcp_proto::fmi2_import_initialize_model_res::default_instance());
  fmi2_import_get_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_req*>(&::fmitcp_proto::fmi2_import_get_derivatives_req::default_instance());
  fmi2_import_get_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_res*>(&::fmitcp_proto::fmi2_import_get_derivatives_res::default_instance());
  fmi2_import_get_event_indicators_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_req*>(&::fmitcp_proto::fmi2_import_get_event_indicators_req::default_instance());
  fmi2_import_get_event_indicators_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_res*>(&::fmitcp_proto::fmi2_import_get_event_indicators_res::default_instance());
  fmi2_import_eventupdate_req_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_req*>(&::fmitcp_proto::fmi2_import_eventUpdate_req::default_instance());
  fmi2_import_eventupdate_res_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_res*>(&::fmitcp_proto::fmi2_import_eventUpdate_res::default_instance());
  fmi2_import_completed_event_iteration_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_req*>(&::fmitcp_proto::fmi2_import_completed_event_iteration_req::default_instance());
  fmi2_import_completed_event_iteration_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_res*>(&::fmitcp_proto::fmi2_import_completed_event_iteration_res::default_instance());
  fmi2_import_get_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_req*>(&::fmitcp_proto::fmi2_import_get_continuous_states_req::default_instance());
  fmi2_import_get_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_res*>(&::fmitcp_proto::fmi2_import_get_continuous_states_res::default_instance());
  fmi2_import_get_nominal_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req*>(&::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::default_instance());
  fmi2_import_get_nominal_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res*>(&::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::default_instance());
  fmi2_import_terminate_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_req*>(&::fmitcp_proto::fmi2_import_terminate_req::default_instance());
  fmi2_import_terminate_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_res*>(&::fmitcp_proto::fmi2_import_terminate_res::default_instance());
  fmi2_import_get_version_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_req*>(&::fmitcp_proto::fmi2_import_get_version_req::default_instance());
  fmi2_import_get_version_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_res*>(&::fmitcp_proto::fmi2_import_get_version_res::default_instance());
  fmi2_import_set_debug_logging_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_req*>(&::fmitcp_proto::fmi2_import_set_debug_logging_req::default_instance());
  fmi2_import_set_debug_logging_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_res*>(&::fmitcp_proto::fmi2_import_set_debug_logging_res::default_instance());
  fmi2_import_set_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_req*>(&::fmitcp_proto::fmi2_import_set_real_req::default_instance());
  fmi2_import_set_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_res*>(&::fmitcp_proto::fmi2_import_set_real_res::default_instance());
  fmi2_import_set_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_req*>(&::fmitcp_proto::fmi2_import_set_integer_req::default_instance());
  fmi2_import_set_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_res*>(&::fmitcp_proto::fmi2_import_set_integer_res::default_instance());
  fmi2_import_set_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_req*>(&::fmitcp_proto::fmi2_import_set_boolean_req::default_instance());
  fmi2_import_set_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_res*>(&::fmitcp_proto::fmi2_import_set_boolean_res::default_instance());
  fmi2_import_set_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_req*>(&::fmitcp_proto::fmi2_import_set_string_req::default_instance());
  fmi2_import_set_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_res*>(&::fmitcp_proto::fmi2_import_set_string_res::default_instance());
  fmi2_import_get_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_req*>(&::fmitcp_proto::fmi2_import_get_real_req::default_instance());
  fmi2_import_get_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_res*>(&::fmitcp_proto::fmi2_import_get_real_res::default_instance());
  fmi2_import_get_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_req*>(&::fmitcp_proto::fmi2_import_get_integer_req::default_instance());
  fmi2_import_get_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_res*>(&::fmitcp_proto::fmi2_import_get_integer_res::default_instance());
  fmi2_import_get_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_req*>(&::fmitcp_proto::fmi2_import_get_boolean_req::default_instance());
  fmi2_import_get_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_res*>(&::fmitcp_proto::fmi2_import_get_boolean_res::default_instance());
  fmi2_import_get_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_req*>(&::fmitcp_proto::fmi2_import_get_string_req::default_instance());
  fmi2_import_get_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_res*>(&::fmitcp_proto::fmi2_import_get_string_res::default_instance());
  fmi2_import_get_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_req*>(&::fmitcp_proto::fmi2_import_get_fmu_state_req::default_instance());
  fmi2_import_get_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_res*>(&::fmitcp_proto::fmi2_import_get_fmu_state_res::default_instance());
  fmi2_import_set_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_req*>(&::fmitcp_proto::fmi2_import_set_fmu_state_req::default_instance());
  fmi2_import_set_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_res*>(&::fmitcp_proto::fmi2_import_set_fmu_state_res::default_instance());
  fmi2_import_free_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_req*>(&::fmitcp_proto::fmi2_import_free_fmu_state_req::default_instance());
  fmi2_import_free_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_res*>(&::fmitcp_proto::fmi2_import_free_fmu_state_res::default_instance());
  fmi2_import_get_directional_derivative_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_req*>(&::fmitcp_proto::fmi2_import_get_directional_derivative_req::default_instance());
  fmi2_import_get_directional_derivative_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_res*>(&::fmitcp_proto::fmi2_import_get_directional_derivative_res::default_instance());
  get_xml_req_ = const_cast< ::fmitcp_proto::get_xml_req*>(&::fmitcp_proto::get_xml_req::default_instance());
  get_xml_res_ = const_cast< ::fmitcp_proto::get_xml_res*>(&::fmitcp_proto::get_xml_res::default_instance());
}

fmitcp_message::fmitcp_message(const fmitcp_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmitcp_message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  fmi2_import_instantiate_req_ = NULL;
  fmi2_import_instantiate_res_ = NULL;
  fmi2_import_initialize_slave_req_ = NULL;
  fmi2_import_initialize_slave_res_ = NULL;
  fmi2_import_terminate_slave_req_ = NULL;
  fmi2_import_terminate_slave_res_ = NULL;
  fmi2_import_reset_slave_req_ = NULL;
  fmi2_import_reset_slave_res_ = NULL;
  fmi2_import_free_slave_instance_req_ = NULL;
  fmi2_import_free_slave_instance_res_ = NULL;
  fmi2_import_set_real_input_derivatives_req_ = NULL;
  fmi2_import_set_real_input_derivatives_res_ = NULL;
  fmi2_import_get_real_output_derivatives_req_ = NULL;
  fmi2_import_get_real_output_derivatives_res_ = NULL;
  fmi2_import_cancel_step_req_ = NULL;
  fmi2_import_cancel_step_res_ = NULL;
  fmi2_import_do_step_req_ = NULL;
  fmi2_import_do_step_res_ = NULL;
  fmi2_import_get_status_req_ = NULL;
  fmi2_import_get_status_res_ = NULL;
  fmi2_import_get_real_status_req_ = NULL;
  fmi2_import_get_real_status_res_ = NULL;
  fmi2_import_get_integer_status_req_ = NULL;
  fmi2_import_get_integer_status_res_ = NULL;
  fmi2_import_get_boolean_status_req_ = NULL;
  fmi2_import_get_boolean_status_res_ = NULL;
  fmi2_import_get_string_status_req_ = NULL;
  fmi2_import_get_string_status_res_ = NULL;
  fmi2_import_instantiate_model_req_ = NULL;
  fmi2_import_instantiate_model_res_ = NULL;
  fmi2_import_free_model_instance_req_ = NULL;
  fmi2_import_free_model_instance_res_ = NULL;
  fmi2_import_set_time_req_ = NULL;
  fmi2_import_set_time_res_ = NULL;
  fmi2_import_set_continuous_states_req_ = NULL;
  fmi2_import_set_continuous_states_res_ = NULL;
  fmi2_import_completed_integrator_step_req_ = NULL;
  fmi2_import_completed_integrator_step_res_ = NULL;
  fmi2_import_initialize_model_req_ = NULL;
  fmi2_import_initialize_model_res_ = NULL;
  fmi2_import_get_derivatives_req_ = NULL;
  fmi2_import_get_derivatives_res_ = NULL;
  fmi2_import_get_event_indicators_req_ = NULL;
  fmi2_import_get_event_indicators_res_ = NULL;
  fmi2_import_eventupdate_req_ = NULL;
  fmi2_import_eventupdate_res_ = NULL;
  fmi2_import_completed_event_iteration_req_ = NULL;
  fmi2_import_completed_event_iteration_res_ = NULL;
  fmi2_import_get_continuous_states_req_ = NULL;
  fmi2_import_get_continuous_states_res_ = NULL;
  fmi2_import_get_nominal_continuous_states_req_ = NULL;
  fmi2_import_get_nominal_continuous_states_res_ = NULL;
  fmi2_import_terminate_req_ = NULL;
  fmi2_import_terminate_res_ = NULL;
  fmi2_import_get_version_req_ = NULL;
  fmi2_import_get_version_res_ = NULL;
  fmi2_import_set_debug_logging_req_ = NULL;
  fmi2_import_set_debug_logging_res_ = NULL;
  fmi2_import_set_real_req_ = NULL;
  fmi2_import_set_real_res_ = NULL;
  fmi2_import_set_integer_req_ = NULL;
  fmi2_import_set_integer_res_ = NULL;
  fmi2_import_set_boolean_req_ = NULL;
  fmi2_import_set_boolean_res_ = NULL;
  fmi2_import_set_string_req_ = NULL;
  fmi2_import_set_string_res_ = NULL;
  fmi2_import_get_real_req_ = NULL;
  fmi2_import_get_real_res_ = NULL;
  fmi2_import_get_integer_req_ = NULL;
  fmi2_import_get_integer_res_ = NULL;
  fmi2_import_get_boolean_req_ = NULL;
  fmi2_import_get_boolean_res_ = NULL;
  fmi2_import_get_string_req_ = NULL;
  fmi2_import_get_string_res_ = NULL;
  fmi2_import_get_fmu_state_req_ = NULL;
  fmi2_import_get_fmu_state_res_ = NULL;
  fmi2_import_set_fmu_state_req_ = NULL;
  fmi2_import_set_fmu_state_res_ = NULL;
  fmi2_import_free_fmu_state_req_ = NULL;
  fmi2_import_free_fmu_state_res_ = NULL;
  fmi2_import_get_directional_derivative_req_ = NULL;
  fmi2_import_get_directional_derivative_res_ = NULL;
  get_xml_req_ = NULL;
  get_xml_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmitcp_message::~fmitcp_message() {
  SharedDtor();
}

void fmitcp_message::SharedDtor() {
  if (this != default_instance_) {
    delete fmi2_import_instantiate_req_;
    delete fmi2_import_instantiate_res_;
    delete fmi2_import_initialize_slave_req_;
    delete fmi2_import_initialize_slave_res_;
    delete fmi2_import_terminate_slave_req_;
    delete fmi2_import_terminate_slave_res_;
    delete fmi2_import_reset_slave_req_;
    delete fmi2_import_reset_slave_res_;
    delete fmi2_import_free_slave_instance_req_;
    delete fmi2_import_free_slave_instance_res_;
    delete fmi2_import_set_real_input_derivatives_req_;
    delete fmi2_import_set_real_input_derivatives_res_;
    delete fmi2_import_get_real_output_derivatives_req_;
    delete fmi2_import_get_real_output_derivatives_res_;
    delete fmi2_import_cancel_step_req_;
    delete fmi2_import_cancel_step_res_;
    delete fmi2_import_do_step_req_;
    delete fmi2_import_do_step_res_;
    delete fmi2_import_get_status_req_;
    delete fmi2_import_get_status_res_;
    delete fmi2_import_get_real_status_req_;
    delete fmi2_import_get_real_status_res_;
    delete fmi2_import_get_integer_status_req_;
    delete fmi2_import_get_integer_status_res_;
    delete fmi2_import_get_boolean_status_req_;
    delete fmi2_import_get_boolean_status_res_;
    delete fmi2_import_get_string_status_req_;
    delete fmi2_import_get_string_status_res_;
    delete fmi2_import_instantiate_model_req_;
    delete fmi2_import_instantiate_model_res_;
    delete fmi2_import_free_model_instance_req_;
    delete fmi2_import_free_model_instance_res_;
    delete fmi2_import_set_time_req_;
    delete fmi2_import_set_time_res_;
    delete fmi2_import_set_continuous_states_req_;
    delete fmi2_import_set_continuous_states_res_;
    delete fmi2_import_completed_integrator_step_req_;
    delete fmi2_import_completed_integrator_step_res_;
    delete fmi2_import_initialize_model_req_;
    delete fmi2_import_initialize_model_res_;
    delete fmi2_import_get_derivatives_req_;
    delete fmi2_import_get_derivatives_res_;
    delete fmi2_import_get_event_indicators_req_;
    delete fmi2_import_get_event_indicators_res_;
    delete fmi2_import_eventupdate_req_;
    delete fmi2_import_eventupdate_res_;
    delete fmi2_import_completed_event_iteration_req_;
    delete fmi2_import_completed_event_iteration_res_;
    delete fmi2_import_get_continuous_states_req_;
    delete fmi2_import_get_continuous_states_res_;
    delete fmi2_import_get_nominal_continuous_states_req_;
    delete fmi2_import_get_nominal_continuous_states_res_;
    delete fmi2_import_terminate_req_;
    delete fmi2_import_terminate_res_;
    delete fmi2_import_get_version_req_;
    delete fmi2_import_get_version_res_;
    delete fmi2_import_set_debug_logging_req_;
    delete fmi2_import_set_debug_logging_res_;
    delete fmi2_import_set_real_req_;
    delete fmi2_import_set_real_res_;
    delete fmi2_import_set_integer_req_;
    delete fmi2_import_set_integer_res_;
    delete fmi2_import_set_boolean_req_;
    delete fmi2_import_set_boolean_res_;
    delete fmi2_import_set_string_req_;
    delete fmi2_import_set_string_res_;
    delete fmi2_import_get_real_req_;
    delete fmi2_import_get_real_res_;
    delete fmi2_import_get_integer_req_;
    delete fmi2_import_get_integer_res_;
    delete fmi2_import_get_boolean_req_;
    delete fmi2_import_get_boolean_res_;
    delete fmi2_import_get_string_req_;
    delete fmi2_import_get_string_res_;
    delete fmi2_import_get_fmu_state_req_;
    delete fmi2_import_get_fmu_state_res_;
    delete fmi2_import_set_fmu_state_req_;
    delete fmi2_import_set_fmu_state_res_;
    delete fmi2_import_free_fmu_state_req_;
    delete fmi2_import_free_fmu_state_res_;
    delete fmi2_import_get_directional_derivative_req_;
    delete fmi2_import_get_directional_derivative_res_;
    delete get_xml_req_;
    delete get_xml_res_;
  }
}

void fmitcp_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmitcp_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmitcp_message_descriptor_;
}

const fmitcp_message& fmitcp_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmitcp_message* fmitcp_message::default_instance_ = NULL;

fmitcp_message* fmitcp_message::New() const {
  return new fmitcp_message;
}

void fmitcp_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_fmi2_import_instantiate_req()) {
      if (fmi2_import_instantiate_req_ != NULL) fmi2_import_instantiate_req_->::fmitcp_proto::fmi2_import_instantiate_req::Clear();
    }
    if (has_fmi2_import_instantiate_res()) {
      if (fmi2_import_instantiate_res_ != NULL) fmi2_import_instantiate_res_->::fmitcp_proto::fmi2_import_instantiate_res::Clear();
    }
    if (has_fmi2_import_initialize_slave_req()) {
      if (fmi2_import_initialize_slave_req_ != NULL) fmi2_import_initialize_slave_req_->::fmitcp_proto::fmi2_import_initialize_slave_req::Clear();
    }
    if (has_fmi2_import_initialize_slave_res()) {
      if (fmi2_import_initialize_slave_res_ != NULL) fmi2_import_initialize_slave_res_->::fmitcp_proto::fmi2_import_initialize_slave_res::Clear();
    }
    if (has_fmi2_import_terminate_slave_req()) {
      if (fmi2_import_terminate_slave_req_ != NULL) fmi2_import_terminate_slave_req_->::fmitcp_proto::fmi2_import_terminate_slave_req::Clear();
    }
    if (has_fmi2_import_terminate_slave_res()) {
      if (fmi2_import_terminate_slave_res_ != NULL) fmi2_import_terminate_slave_res_->::fmitcp_proto::fmi2_import_terminate_slave_res::Clear();
    }
    if (has_fmi2_import_reset_slave_req()) {
      if (fmi2_import_reset_slave_req_ != NULL) fmi2_import_reset_slave_req_->::fmitcp_proto::fmi2_import_reset_slave_req::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fmi2_import_reset_slave_res()) {
      if (fmi2_import_reset_slave_res_ != NULL) fmi2_import_reset_slave_res_->::fmitcp_proto::fmi2_import_reset_slave_res::Clear();
    }
    if (has_fmi2_import_free_slave_instance_req()) {
      if (fmi2_import_free_slave_instance_req_ != NULL) fmi2_import_free_slave_instance_req_->::fmitcp_proto::fmi2_import_free_slave_instance_req::Clear();
    }
    if (has_fmi2_import_free_slave_instance_res()) {
      if (fmi2_import_free_slave_instance_res_ != NULL) fmi2_import_free_slave_instance_res_->::fmitcp_proto::fmi2_import_free_slave_instance_res::Clear();
    }
    if (has_fmi2_import_set_real_input_derivatives_req()) {
      if (fmi2_import_set_real_input_derivatives_req_ != NULL) fmi2_import_set_real_input_derivatives_req_->::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::Clear();
    }
    if (has_fmi2_import_set_real_input_derivatives_res()) {
      if (fmi2_import_set_real_input_derivatives_res_ != NULL) fmi2_import_set_real_input_derivatives_res_->::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::Clear();
    }
    if (has_fmi2_import_get_real_output_derivatives_req()) {
      if (fmi2_import_get_real_output_derivatives_req_ != NULL) fmi2_import_get_real_output_derivatives_req_->::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::Clear();
    }
    if (has_fmi2_import_get_real_output_derivatives_res()) {
      if (fmi2_import_get_real_output_derivatives_res_ != NULL) fmi2_import_get_real_output_derivatives_res_->::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::Clear();
    }
    if (has_fmi2_import_cancel_step_req()) {
      if (fmi2_import_cancel_step_req_ != NULL) fmi2_import_cancel_step_req_->::fmitcp_proto::fmi2_import_cancel_step_req::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fmi2_import_cancel_step_res()) {
      if (fmi2_import_cancel_step_res_ != NULL) fmi2_import_cancel_step_res_->::fmitcp_proto::fmi2_import_cancel_step_res::Clear();
    }
    if (has_fmi2_import_do_step_req()) {
      if (fmi2_import_do_step_req_ != NULL) fmi2_import_do_step_req_->::fmitcp_proto::fmi2_import_do_step_req::Clear();
    }
    if (has_fmi2_import_do_step_res()) {
      if (fmi2_import_do_step_res_ != NULL) fmi2_import_do_step_res_->::fmitcp_proto::fmi2_import_do_step_res::Clear();
    }
    if (has_fmi2_import_get_status_req()) {
      if (fmi2_import_get_status_req_ != NULL) fmi2_import_get_status_req_->::fmitcp_proto::fmi2_import_get_status_req::Clear();
    }
    if (has_fmi2_import_get_status_res()) {
      if (fmi2_import_get_status_res_ != NULL) fmi2_import_get_status_res_->::fmitcp_proto::fmi2_import_get_status_res::Clear();
    }
    if (has_fmi2_import_get_real_status_req()) {
      if (fmi2_import_get_real_status_req_ != NULL) fmi2_import_get_real_status_req_->::fmitcp_proto::fmi2_import_get_real_status_req::Clear();
    }
    if (has_fmi2_import_get_real_status_res()) {
      if (fmi2_import_get_real_status_res_ != NULL) fmi2_import_get_real_status_res_->::fmitcp_proto::fmi2_import_get_real_status_res::Clear();
    }
    if (has_fmi2_import_get_integer_status_req()) {
      if (fmi2_import_get_integer_status_req_ != NULL) fmi2_import_get_integer_status_req_->::fmitcp_proto::fmi2_import_get_integer_status_req::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_fmi2_import_get_integer_status_res()) {
      if (fmi2_import_get_integer_status_res_ != NULL) fmi2_import_get_integer_status_res_->::fmitcp_proto::fmi2_import_get_integer_status_res::Clear();
    }
    if (has_fmi2_import_get_boolean_status_req()) {
      if (fmi2_import_get_boolean_status_req_ != NULL) fmi2_import_get_boolean_status_req_->::fmitcp_proto::fmi2_import_get_boolean_status_req::Clear();
    }
    if (has_fmi2_import_get_boolean_status_res()) {
      if (fmi2_import_get_boolean_status_res_ != NULL) fmi2_import_get_boolean_status_res_->::fmitcp_proto::fmi2_import_get_boolean_status_res::Clear();
    }
    if (has_fmi2_import_get_string_status_req()) {
      if (fmi2_import_get_string_status_req_ != NULL) fmi2_import_get_string_status_req_->::fmitcp_proto::fmi2_import_get_string_status_req::Clear();
    }
    if (has_fmi2_import_get_string_status_res()) {
      if (fmi2_import_get_string_status_res_ != NULL) fmi2_import_get_string_status_res_->::fmitcp_proto::fmi2_import_get_string_status_res::Clear();
    }
    if (has_fmi2_import_instantiate_model_req()) {
      if (fmi2_import_instantiate_model_req_ != NULL) fmi2_import_instantiate_model_req_->::fmitcp_proto::fmi2_import_instantiate_model_req::Clear();
    }
    if (has_fmi2_import_instantiate_model_res()) {
      if (fmi2_import_instantiate_model_res_ != NULL) fmi2_import_instantiate_model_res_->::fmitcp_proto::fmi2_import_instantiate_model_res::Clear();
    }
    if (has_fmi2_import_free_model_instance_req()) {
      if (fmi2_import_free_model_instance_req_ != NULL) fmi2_import_free_model_instance_req_->::fmitcp_proto::fmi2_import_free_model_instance_req::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_fmi2_import_free_model_instance_res()) {
      if (fmi2_import_free_model_instance_res_ != NULL) fmi2_import_free_model_instance_res_->::fmitcp_proto::fmi2_import_free_model_instance_res::Clear();
    }
    if (has_fmi2_import_set_time_req()) {
      if (fmi2_import_set_time_req_ != NULL) fmi2_import_set_time_req_->::fmitcp_proto::fmi2_import_set_time_req::Clear();
    }
    if (has_fmi2_import_set_time_res()) {
      if (fmi2_import_set_time_res_ != NULL) fmi2_import_set_time_res_->::fmitcp_proto::fmi2_import_set_time_res::Clear();
    }
    if (has_fmi2_import_set_continuous_states_req()) {
      if (fmi2_import_set_continuous_states_req_ != NULL) fmi2_import_set_continuous_states_req_->::fmitcp_proto::fmi2_import_set_continuous_states_req::Clear();
    }
    if (has_fmi2_import_set_continuous_states_res()) {
      if (fmi2_import_set_continuous_states_res_ != NULL) fmi2_import_set_continuous_states_res_->::fmitcp_proto::fmi2_import_set_continuous_states_res::Clear();
    }
    if (has_fmi2_import_completed_integrator_step_req()) {
      if (fmi2_import_completed_integrator_step_req_ != NULL) fmi2_import_completed_integrator_step_req_->::fmitcp_proto::fmi2_import_completed_integrator_step_req::Clear();
    }
    if (has_fmi2_import_completed_integrator_step_res()) {
      if (fmi2_import_completed_integrator_step_res_ != NULL) fmi2_import_completed_integrator_step_res_->::fmitcp_proto::fmi2_import_completed_integrator_step_res::Clear();
    }
    if (has_fmi2_import_initialize_model_req()) {
      if (fmi2_import_initialize_model_req_ != NULL) fmi2_import_initialize_model_req_->::fmitcp_proto::fmi2_import_initialize_model_req::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_fmi2_import_initialize_model_res()) {
      if (fmi2_import_initialize_model_res_ != NULL) fmi2_import_initialize_model_res_->::fmitcp_proto::fmi2_import_initialize_model_res::Clear();
    }
    if (has_fmi2_import_get_derivatives_req()) {
      if (fmi2_import_get_derivatives_req_ != NULL) fmi2_import_get_derivatives_req_->::fmitcp_proto::fmi2_import_get_derivatives_req::Clear();
    }
    if (has_fmi2_import_get_derivatives_res()) {
      if (fmi2_import_get_derivatives_res_ != NULL) fmi2_import_get_derivatives_res_->::fmitcp_proto::fmi2_import_get_derivatives_res::Clear();
    }
    if (has_fmi2_import_get_event_indicators_req()) {
      if (fmi2_import_get_event_indicators_req_ != NULL) fmi2_import_get_event_indicators_req_->::fmitcp_proto::fmi2_import_get_event_indicators_req::Clear();
    }
    if (has_fmi2_import_get_event_indicators_res()) {
      if (fmi2_import_get_event_indicators_res_ != NULL) fmi2_import_get_event_indicators_res_->::fmitcp_proto::fmi2_import_get_event_indicators_res::Clear();
    }
    if (has_fmi2_import_eventupdate_req()) {
      if (fmi2_import_eventupdate_req_ != NULL) fmi2_import_eventupdate_req_->::fmitcp_proto::fmi2_import_eventUpdate_req::Clear();
    }
    if (has_fmi2_import_eventupdate_res()) {
      if (fmi2_import_eventupdate_res_ != NULL) fmi2_import_eventupdate_res_->::fmitcp_proto::fmi2_import_eventUpdate_res::Clear();
    }
    if (has_fmi2_import_completed_event_iteration_req()) {
      if (fmi2_import_completed_event_iteration_req_ != NULL) fmi2_import_completed_event_iteration_req_->::fmitcp_proto::fmi2_import_completed_event_iteration_req::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_fmi2_import_completed_event_iteration_res()) {
      if (fmi2_import_completed_event_iteration_res_ != NULL) fmi2_import_completed_event_iteration_res_->::fmitcp_proto::fmi2_import_completed_event_iteration_res::Clear();
    }
    if (has_fmi2_import_get_continuous_states_req()) {
      if (fmi2_import_get_continuous_states_req_ != NULL) fmi2_import_get_continuous_states_req_->::fmitcp_proto::fmi2_import_get_continuous_states_req::Clear();
    }
    if (has_fmi2_import_get_continuous_states_res()) {
      if (fmi2_import_get_continuous_states_res_ != NULL) fmi2_import_get_continuous_states_res_->::fmitcp_proto::fmi2_import_get_continuous_states_res::Clear();
    }
    if (has_fmi2_import_get_nominal_continuous_states_req()) {
      if (fmi2_import_get_nominal_continuous_states_req_ != NULL) fmi2_import_get_nominal_continuous_states_req_->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::Clear();
    }
    if (has_fmi2_import_get_nominal_continuous_states_res()) {
      if (fmi2_import_get_nominal_continuous_states_res_ != NULL) fmi2_import_get_nominal_continuous_states_res_->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::Clear();
    }
    if (has_fmi2_import_terminate_req()) {
      if (fmi2_import_terminate_req_ != NULL) fmi2_import_terminate_req_->::fmitcp_proto::fmi2_import_terminate_req::Clear();
    }
    if (has_fmi2_import_terminate_res()) {
      if (fmi2_import_terminate_res_ != NULL) fmi2_import_terminate_res_->::fmitcp_proto::fmi2_import_terminate_res::Clear();
    }
    if (has_fmi2_import_get_version_req()) {
      if (fmi2_import_get_version_req_ != NULL) fmi2_import_get_version_req_->::fmitcp_proto::fmi2_import_get_version_req::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_fmi2_import_get_version_res()) {
      if (fmi2_import_get_version_res_ != NULL) fmi2_import_get_version_res_->::fmitcp_proto::fmi2_import_get_version_res::Clear();
    }
    if (has_fmi2_import_set_debug_logging_req()) {
      if (fmi2_import_set_debug_logging_req_ != NULL) fmi2_import_set_debug_logging_req_->::fmitcp_proto::fmi2_import_set_debug_logging_req::Clear();
    }
    if (has_fmi2_import_set_debug_logging_res()) {
      if (fmi2_import_set_debug_logging_res_ != NULL) fmi2_import_set_debug_logging_res_->::fmitcp_proto::fmi2_import_set_debug_logging_res::Clear();
    }
    if (has_fmi2_import_set_real_req()) {
      if (fmi2_import_set_real_req_ != NULL) fmi2_import_set_real_req_->::fmitcp_proto::fmi2_import_set_real_req::Clear();
    }
    if (has_fmi2_import_set_real_res()) {
      if (fmi2_import_set_real_res_ != NULL) fmi2_import_set_real_res_->::fmitcp_proto::fmi2_import_set_real_res::Clear();
    }
    if (has_fmi2_import_set_integer_req()) {
      if (fmi2_import_set_integer_req_ != NULL) fmi2_import_set_integer_req_->::fmitcp_proto::fmi2_import_set_integer_req::Clear();
    }
    if (has_fmi2_import_set_integer_res()) {
      if (fmi2_import_set_integer_res_ != NULL) fmi2_import_set_integer_res_->::fmitcp_proto::fmi2_import_set_integer_res::Clear();
    }
    if (has_fmi2_import_set_boolean_req()) {
      if (fmi2_import_set_boolean_req_ != NULL) fmi2_import_set_boolean_req_->::fmitcp_proto::fmi2_import_set_boolean_req::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_fmi2_import_set_boolean_res()) {
      if (fmi2_import_set_boolean_res_ != NULL) fmi2_import_set_boolean_res_->::fmitcp_proto::fmi2_import_set_boolean_res::Clear();
    }
    if (has_fmi2_import_set_string_req()) {
      if (fmi2_import_set_string_req_ != NULL) fmi2_import_set_string_req_->::fmitcp_proto::fmi2_import_set_string_req::Clear();
    }
    if (has_fmi2_import_set_string_res()) {
      if (fmi2_import_set_string_res_ != NULL) fmi2_import_set_string_res_->::fmitcp_proto::fmi2_import_set_string_res::Clear();
    }
    if (has_fmi2_import_get_real_req()) {
      if (fmi2_import_get_real_req_ != NULL) fmi2_import_get_real_req_->::fmitcp_proto::fmi2_import_get_real_req::Clear();
    }
    if (has_fmi2_import_get_real_res()) {
      if (fmi2_import_get_real_res_ != NULL) fmi2_import_get_real_res_->::fmitcp_proto::fmi2_import_get_real_res::Clear();
    }
    if (has_fmi2_import_get_integer_req()) {
      if (fmi2_import_get_integer_req_ != NULL) fmi2_import_get_integer_req_->::fmitcp_proto::fmi2_import_get_integer_req::Clear();
    }
    if (has_fmi2_import_get_integer_res()) {
      if (fmi2_import_get_integer_res_ != NULL) fmi2_import_get_integer_res_->::fmitcp_proto::fmi2_import_get_integer_res::Clear();
    }
    if (has_fmi2_import_get_boolean_req()) {
      if (fmi2_import_get_boolean_req_ != NULL) fmi2_import_get_boolean_req_->::fmitcp_proto::fmi2_import_get_boolean_req::Clear();
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has_fmi2_import_get_boolean_res()) {
      if (fmi2_import_get_boolean_res_ != NULL) fmi2_import_get_boolean_res_->::fmitcp_proto::fmi2_import_get_boolean_res::Clear();
    }
    if (has_fmi2_import_get_string_req()) {
      if (fmi2_import_get_string_req_ != NULL) fmi2_import_get_string_req_->::fmitcp_proto::fmi2_import_get_string_req::Clear();
    }
    if (has_fmi2_import_get_string_res()) {
      if (fmi2_import_get_string_res_ != NULL) fmi2_import_get_string_res_->::fmitcp_proto::fmi2_import_get_string_res::Clear();
    }
    if (has_fmi2_import_get_fmu_state_req()) {
      if (fmi2_import_get_fmu_state_req_ != NULL) fmi2_import_get_fmu_state_req_->::fmitcp_proto::fmi2_import_get_fmu_state_req::Clear();
    }
    if (has_fmi2_import_get_fmu_state_res()) {
      if (fmi2_import_get_fmu_state_res_ != NULL) fmi2_import_get_fmu_state_res_->::fmitcp_proto::fmi2_import_get_fmu_state_res::Clear();
    }
    if (has_fmi2_import_set_fmu_state_req()) {
      if (fmi2_import_set_fmu_state_req_ != NULL) fmi2_import_set_fmu_state_req_->::fmitcp_proto::fmi2_import_set_fmu_state_req::Clear();
    }
    if (has_fmi2_import_set_fmu_state_res()) {
      if (fmi2_import_set_fmu_state_res_ != NULL) fmi2_import_set_fmu_state_res_->::fmitcp_proto::fmi2_import_set_fmu_state_res::Clear();
    }
    if (has_fmi2_import_free_fmu_state_req()) {
      if (fmi2_import_free_fmu_state_req_ != NULL) fmi2_import_free_fmu_state_req_->::fmitcp_proto::fmi2_import_free_fmu_state_req::Clear();
    }
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (has_fmi2_import_free_fmu_state_res()) {
      if (fmi2_import_free_fmu_state_res_ != NULL) fmi2_import_free_fmu_state_res_->::fmitcp_proto::fmi2_import_free_fmu_state_res::Clear();
    }
    if (has_fmi2_import_get_directional_derivative_req()) {
      if (fmi2_import_get_directional_derivative_req_ != NULL) fmi2_import_get_directional_derivative_req_->::fmitcp_proto::fmi2_import_get_directional_derivative_req::Clear();
    }
    if (has_fmi2_import_get_directional_derivative_res()) {
      if (fmi2_import_get_directional_derivative_res_ != NULL) fmi2_import_get_directional_derivative_res_->::fmitcp_proto::fmi2_import_get_directional_derivative_res::Clear();
    }
    if (has_get_xml_req()) {
      if (get_xml_req_ != NULL) get_xml_req_->::fmitcp_proto::get_xml_req::Clear();
    }
    if (has_get_xml_res()) {
      if (get_xml_res_ != NULL) get_xml_res_->::fmitcp_proto::get_xml_res::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmitcp_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fmitcp_proto.fmitcp_message.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmitcp_message_Type_IsValid(value)) {
            set_type(static_cast< ::fmitcp_proto::fmitcp_message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fmi2_import_instantiate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fmi2_import_instantiate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fmi2_import_initialize_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fmi2_import_initialize_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fmi2_import_terminate_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fmi2_import_terminate_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fmi2_import_reset_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_reset_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_reset_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fmi2_import_reset_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_reset_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_reset_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fmi2_import_free_slave_instance_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_slave_instance_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_slave_instance_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fmi2_import_free_slave_instance_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_slave_instance_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_slave_instance_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fmi2_import_set_real_input_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_input_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_input_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_fmi2_import_set_real_input_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_input_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_input_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fmi2_import_get_real_output_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_output_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_output_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fmi2_import_get_real_output_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_output_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_output_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fmi2_import_cancel_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_cancel_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_cancel_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fmi2_import_cancel_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_cancel_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_cancel_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fmi2_import_do_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_do_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_do_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_fmi2_import_do_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_do_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_do_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fmi2_import_get_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fmi2_import_get_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_fmi2_import_get_real_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fmi2_import_get_real_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_fmi2_import_get_integer_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_fmi2_import_get_integer_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fmi2_import_get_boolean_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_fmi2_import_get_boolean_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_fmi2_import_get_string_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_fmi2_import_get_string_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_fmi2_import_instantiate_model_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_model_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_model_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_fmi2_import_instantiate_model_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_model_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_model_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_fmi2_import_free_model_instance_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_model_instance_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_model_instance_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_fmi2_import_free_model_instance_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_model_instance_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_model_instance_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_fmi2_import_set_time_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_time_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_time_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_fmi2_import_set_time_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_time_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_time_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_fmi2_import_set_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_fmi2_import_set_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_fmi2_import_completed_integrator_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_integrator_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_integrator_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_fmi2_import_completed_integrator_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_integrator_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_integrator_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_fmi2_import_initialize_model_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_model_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_model_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_fmi2_import_initialize_model_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_model_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_model_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_fmi2_import_get_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_fmi2_import_get_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_fmi2_import_get_event_indicators_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_event_indicators_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_event_indicators_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_fmi2_import_get_event_indicators_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_event_indicators_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_event_indicators_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_fmi2_import_eventUpdate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_eventUpdate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_eventupdate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_fmi2_import_eventUpdate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_eventUpdate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_eventupdate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_fmi2_import_completed_event_iteration_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_event_iteration_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_event_iteration_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_fmi2_import_completed_event_iteration_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_event_iteration_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_event_iteration_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_fmi2_import_get_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_fmi2_import_get_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_fmi2_import_get_nominal_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_nominal_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_nominal_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_fmi2_import_get_nominal_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_nominal_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_nominal_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_fmi2_import_terminate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_fmi2_import_terminate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_fmi2_import_get_version_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_version_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_version_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_fmi2_import_get_version_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_version_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_version_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_fmi2_import_set_debug_logging_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_debug_logging_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_debug_logging_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_fmi2_import_set_debug_logging_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_debug_logging_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_debug_logging_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fmi2_import_set_real_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_fmi2_import_set_real_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_fmi2_import_set_integer_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_integer_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_integer_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_fmi2_import_set_integer_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_integer_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_integer_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_fmi2_import_set_boolean_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_boolean_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_boolean_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_fmi2_import_set_boolean_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_boolean_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_boolean_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_fmi2_import_set_string_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_string_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_string_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_fmi2_import_set_string_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_string_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_string_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_fmi2_import_get_real_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_fmi2_import_get_real_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_fmi2_import_get_integer_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_fmi2_import_get_integer_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_fmi2_import_get_boolean_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_fmi2_import_get_boolean_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_fmi2_import_get_string_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_fmi2_import_get_string_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_fmi2_import_get_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_fmi2_import_get_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(626)) goto parse_fmi2_import_set_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_fmi2_import_set_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_fmi2_import_free_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(650)) goto parse_fmi2_import_free_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(706)) goto parse_fmi2_import_get_directional_derivative_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_directional_derivative_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_directional_derivative_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(714)) goto parse_fmi2_import_get_directional_derivative_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_directional_derivative_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_directional_derivative_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_get_xml_req;
        break;
      }

      // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_xml_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_xml_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_get_xml_res;
        break;
      }

      // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_xml_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_xml_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmitcp_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fmitcp_proto.fmitcp_message.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
  if (has_fmi2_import_instantiate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fmi2_import_instantiate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
  if (has_fmi2_import_instantiate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fmi2_import_instantiate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
  if (has_fmi2_import_initialize_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fmi2_import_initialize_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
  if (has_fmi2_import_initialize_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fmi2_import_initialize_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
  if (has_fmi2_import_terminate_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fmi2_import_terminate_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
  if (has_fmi2_import_terminate_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fmi2_import_terminate_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
  if (has_fmi2_import_reset_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fmi2_import_reset_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
  if (has_fmi2_import_reset_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fmi2_import_reset_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
  if (has_fmi2_import_free_slave_instance_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fmi2_import_free_slave_instance_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
  if (has_fmi2_import_free_slave_instance_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fmi2_import_free_slave_instance_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
  if (has_fmi2_import_set_real_input_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fmi2_import_set_real_input_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
  if (has_fmi2_import_set_real_input_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->fmi2_import_set_real_input_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
  if (has_fmi2_import_get_real_output_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->fmi2_import_get_real_output_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
  if (has_fmi2_import_get_real_output_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fmi2_import_get_real_output_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
  if (has_fmi2_import_cancel_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->fmi2_import_cancel_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
  if (has_fmi2_import_cancel_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fmi2_import_cancel_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
  if (has_fmi2_import_do_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->fmi2_import_do_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
  if (has_fmi2_import_do_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->fmi2_import_do_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
  if (has_fmi2_import_get_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->fmi2_import_get_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
  if (has_fmi2_import_get_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->fmi2_import_get_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
  if (has_fmi2_import_get_real_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->fmi2_import_get_real_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
  if (has_fmi2_import_get_real_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->fmi2_import_get_real_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
  if (has_fmi2_import_get_integer_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->fmi2_import_get_integer_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
  if (has_fmi2_import_get_integer_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->fmi2_import_get_integer_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
  if (has_fmi2_import_get_boolean_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->fmi2_import_get_boolean_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
  if (has_fmi2_import_get_boolean_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->fmi2_import_get_boolean_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
  if (has_fmi2_import_get_string_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->fmi2_import_get_string_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
  if (has_fmi2_import_get_string_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->fmi2_import_get_string_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
  if (has_fmi2_import_instantiate_model_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->fmi2_import_instantiate_model_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
  if (has_fmi2_import_instantiate_model_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->fmi2_import_instantiate_model_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
  if (has_fmi2_import_free_model_instance_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->fmi2_import_free_model_instance_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
  if (has_fmi2_import_free_model_instance_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->fmi2_import_free_model_instance_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
  if (has_fmi2_import_set_time_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->fmi2_import_set_time_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
  if (has_fmi2_import_set_time_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->fmi2_import_set_time_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
  if (has_fmi2_import_set_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->fmi2_import_set_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
  if (has_fmi2_import_set_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->fmi2_import_set_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
  if (has_fmi2_import_completed_integrator_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->fmi2_import_completed_integrator_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
  if (has_fmi2_import_completed_integrator_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->fmi2_import_completed_integrator_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
  if (has_fmi2_import_initialize_model_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->fmi2_import_initialize_model_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
  if (has_fmi2_import_initialize_model_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->fmi2_import_initialize_model_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
  if (has_fmi2_import_get_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->fmi2_import_get_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
  if (has_fmi2_import_get_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->fmi2_import_get_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
  if (has_fmi2_import_get_event_indicators_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->fmi2_import_get_event_indicators_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
  if (has_fmi2_import_get_event_indicators_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->fmi2_import_get_event_indicators_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
  if (has_fmi2_import_eventupdate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->fmi2_import_eventupdate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
  if (has_fmi2_import_eventupdate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->fmi2_import_eventupdate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
  if (has_fmi2_import_completed_event_iteration_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->fmi2_import_completed_event_iteration_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
  if (has_fmi2_import_completed_event_iteration_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->fmi2_import_completed_event_iteration_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
  if (has_fmi2_import_get_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->fmi2_import_get_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
  if (has_fmi2_import_get_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->fmi2_import_get_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
  if (has_fmi2_import_get_nominal_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->fmi2_import_get_nominal_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
  if (has_fmi2_import_get_nominal_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->fmi2_import_get_nominal_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
  if (has_fmi2_import_terminate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->fmi2_import_terminate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
  if (has_fmi2_import_terminate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->fmi2_import_terminate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
  if (has_fmi2_import_get_version_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->fmi2_import_get_version_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
  if (has_fmi2_import_get_version_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->fmi2_import_get_version_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
  if (has_fmi2_import_set_debug_logging_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->fmi2_import_set_debug_logging_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
  if (has_fmi2_import_set_debug_logging_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->fmi2_import_set_debug_logging_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
  if (has_fmi2_import_set_real_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->fmi2_import_set_real_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
  if (has_fmi2_import_set_real_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->fmi2_import_set_real_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
  if (has_fmi2_import_set_integer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->fmi2_import_set_integer_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
  if (has_fmi2_import_set_integer_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->fmi2_import_set_integer_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
  if (has_fmi2_import_set_boolean_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->fmi2_import_set_boolean_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
  if (has_fmi2_import_set_boolean_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->fmi2_import_set_boolean_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
  if (has_fmi2_import_set_string_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->fmi2_import_set_string_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
  if (has_fmi2_import_set_string_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->fmi2_import_set_string_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
  if (has_fmi2_import_get_real_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->fmi2_import_get_real_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
  if (has_fmi2_import_get_real_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->fmi2_import_get_real_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
  if (has_fmi2_import_get_integer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->fmi2_import_get_integer_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
  if (has_fmi2_import_get_integer_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->fmi2_import_get_integer_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
  if (has_fmi2_import_get_boolean_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->fmi2_import_get_boolean_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
  if (has_fmi2_import_get_boolean_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->fmi2_import_get_boolean_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
  if (has_fmi2_import_get_string_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->fmi2_import_get_string_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
  if (has_fmi2_import_get_string_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->fmi2_import_get_string_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
  if (has_fmi2_import_get_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->fmi2_import_get_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
  if (has_fmi2_import_get_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->fmi2_import_get_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
  if (has_fmi2_import_set_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->fmi2_import_set_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
  if (has_fmi2_import_set_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->fmi2_import_set_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
  if (has_fmi2_import_free_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->fmi2_import_free_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
  if (has_fmi2_import_free_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->fmi2_import_free_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
  if (has_fmi2_import_get_directional_derivative_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88, this->fmi2_import_get_directional_derivative_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
  if (has_fmi2_import_get_directional_derivative_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89, this->fmi2_import_get_directional_derivative_res(), output);
  }

  // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
  if (has_get_xml_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->get_xml_req(), output);
  }

  // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
  if (has_get_xml_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->get_xml_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmitcp_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fmitcp_proto.fmitcp_message.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
  if (has_fmi2_import_instantiate_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fmi2_import_instantiate_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
  if (has_fmi2_import_instantiate_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fmi2_import_instantiate_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
  if (has_fmi2_import_initialize_slave_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fmi2_import_initialize_slave_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
  if (has_fmi2_import_initialize_slave_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fmi2_import_initialize_slave_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
  if (has_fmi2_import_terminate_slave_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fmi2_import_terminate_slave_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
  if (has_fmi2_import_terminate_slave_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fmi2_import_terminate_slave_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
  if (has_fmi2_import_reset_slave_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fmi2_import_reset_slave_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
  if (has_fmi2_import_reset_slave_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fmi2_import_reset_slave_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
  if (has_fmi2_import_free_slave_instance_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fmi2_import_free_slave_instance_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
  if (has_fmi2_import_free_slave_instance_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fmi2_import_free_slave_instance_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
  if (has_fmi2_import_set_real_input_derivatives_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fmi2_import_set_real_input_derivatives_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
  if (has_fmi2_import_set_real_input_derivatives_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->fmi2_import_set_real_input_derivatives_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
  if (has_fmi2_import_get_real_output_derivatives_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->fmi2_import_get_real_output_derivatives_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
  if (has_fmi2_import_get_real_output_derivatives_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->fmi2_import_get_real_output_derivatives_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
  if (has_fmi2_import_cancel_step_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->fmi2_import_cancel_step_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
  if (has_fmi2_import_cancel_step_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fmi2_import_cancel_step_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
  if (has_fmi2_import_do_step_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->fmi2_import_do_step_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
  if (has_fmi2_import_do_step_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->fmi2_import_do_step_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
  if (has_fmi2_import_get_status_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->fmi2_import_get_status_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
  if (has_fmi2_import_get_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->fmi2_import_get_status_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
  if (has_fmi2_import_get_real_status_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->fmi2_import_get_real_status_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
  if (has_fmi2_import_get_real_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->fmi2_import_get_real_status_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
  if (has_fmi2_import_get_integer_status_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->fmi2_import_get_integer_status_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
  if (has_fmi2_import_get_integer_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->fmi2_import_get_integer_status_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
  if (has_fmi2_import_get_boolean_status_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->fmi2_import_get_boolean_status_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
  if (has_fmi2_import_get_boolean_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->fmi2_import_get_boolean_status_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
  if (has_fmi2_import_get_string_status_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->fmi2_import_get_string_status_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
  if (has_fmi2_import_get_string_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->fmi2_import_get_string_status_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
  if (has_fmi2_import_instantiate_model_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->fmi2_import_instantiate_model_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
  if (has_fmi2_import_instantiate_model_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->fmi2_import_instantiate_model_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
  if (has_fmi2_import_free_model_instance_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->fmi2_import_free_model_instance_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
  if (has_fmi2_import_free_model_instance_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->fmi2_import_free_model_instance_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
  if (has_fmi2_import_set_time_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->fmi2_import_set_time_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
  if (has_fmi2_import_set_time_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->fmi2_import_set_time_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
  if (has_fmi2_import_set_continuous_states_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->fmi2_import_set_continuous_states_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
  if (has_fmi2_import_set_continuous_states_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->fmi2_import_set_continuous_states_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
  if (has_fmi2_import_completed_integrator_step_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->fmi2_import_completed_integrator_step_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
  if (has_fmi2_import_completed_integrator_step_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->fmi2_import_completed_integrator_step_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
  if (has_fmi2_import_initialize_model_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->fmi2_import_initialize_model_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
  if (has_fmi2_import_initialize_model_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->fmi2_import_initialize_model_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
  if (has_fmi2_import_get_derivatives_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->fmi2_import_get_derivatives_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
  if (has_fmi2_import_get_derivatives_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->fmi2_import_get_derivatives_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
  if (has_fmi2_import_get_event_indicators_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->fmi2_import_get_event_indicators_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
  if (has_fmi2_import_get_event_indicators_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->fmi2_import_get_event_indicators_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
  if (has_fmi2_import_eventupdate_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->fmi2_import_eventupdate_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
  if (has_fmi2_import_eventupdate_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->fmi2_import_eventupdate_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
  if (has_fmi2_import_completed_event_iteration_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->fmi2_import_completed_event_iteration_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
  if (has_fmi2_import_completed_event_iteration_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->fmi2_import_completed_event_iteration_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
  if (has_fmi2_import_get_continuous_states_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->fmi2_import_get_continuous_states_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
  if (has_fmi2_import_get_continuous_states_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->fmi2_import_get_continuous_states_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
  if (has_fmi2_import_get_nominal_continuous_states_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->fmi2_import_get_nominal_continuous_states_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
  if (has_fmi2_import_get_nominal_continuous_states_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->fmi2_import_get_nominal_continuous_states_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
  if (has_fmi2_import_terminate_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->fmi2_import_terminate_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
  if (has_fmi2_import_terminate_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->fmi2_import_terminate_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
  if (has_fmi2_import_get_version_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->fmi2_import_get_version_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
  if (has_fmi2_import_get_version_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->fmi2_import_get_version_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
  if (has_fmi2_import_set_debug_logging_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->fmi2_import_set_debug_logging_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
  if (has_fmi2_import_set_debug_logging_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->fmi2_import_set_debug_logging_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
  if (has_fmi2_import_set_real_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->fmi2_import_set_real_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
  if (has_fmi2_import_set_real_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->fmi2_import_set_real_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
  if (has_fmi2_import_set_integer_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->fmi2_import_set_integer_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
  if (has_fmi2_import_set_integer_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->fmi2_import_set_integer_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
  if (has_fmi2_import_set_boolean_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->fmi2_import_set_boolean_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
  if (has_fmi2_import_set_boolean_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->fmi2_import_set_boolean_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
  if (has_fmi2_import_set_string_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->fmi2_import_set_string_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
  if (has_fmi2_import_set_string_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->fmi2_import_set_string_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
  if (has_fmi2_import_get_real_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->fmi2_import_get_real_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
  if (has_fmi2_import_get_real_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->fmi2_import_get_real_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
  if (has_fmi2_import_get_integer_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->fmi2_import_get_integer_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
  if (has_fmi2_import_get_integer_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->fmi2_import_get_integer_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
  if (has_fmi2_import_get_boolean_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->fmi2_import_get_boolean_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
  if (has_fmi2_import_get_boolean_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->fmi2_import_get_boolean_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
  if (has_fmi2_import_get_string_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->fmi2_import_get_string_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
  if (has_fmi2_import_get_string_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->fmi2_import_get_string_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
  if (has_fmi2_import_get_fmu_state_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->fmi2_import_get_fmu_state_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
  if (has_fmi2_import_get_fmu_state_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->fmi2_import_get_fmu_state_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
  if (has_fmi2_import_set_fmu_state_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->fmi2_import_set_fmu_state_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
  if (has_fmi2_import_set_fmu_state_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->fmi2_import_set_fmu_state_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
  if (has_fmi2_import_free_fmu_state_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->fmi2_import_free_fmu_state_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
  if (has_fmi2_import_free_fmu_state_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->fmi2_import_free_fmu_state_res(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
  if (has_fmi2_import_get_directional_derivative_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, this->fmi2_import_get_directional_derivative_req(), target);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
  if (has_fmi2_import_get_directional_derivative_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, this->fmi2_import_get_directional_derivative_res(), target);
  }

  // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
  if (has_get_xml_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->get_xml_req(), target);
  }

  // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
  if (has_get_xml_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, this->get_xml_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmitcp_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fmitcp_proto.fmitcp_message.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
    if (has_fmi2_import_instantiate_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_req());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
    if (has_fmi2_import_instantiate_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_res());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
    if (has_fmi2_import_initialize_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_slave_req());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
    if (has_fmi2_import_initialize_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
    if (has_fmi2_import_terminate_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_slave_req());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
    if (has_fmi2_import_terminate_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
    if (has_fmi2_import_reset_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_reset_slave_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
    if (has_fmi2_import_reset_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_reset_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
    if (has_fmi2_import_free_slave_instance_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_slave_instance_req());
    }

    // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
    if (has_fmi2_import_free_slave_instance_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_slave_instance_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
    if (has_fmi2_import_set_real_input_derivatives_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_input_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
    if (has_fmi2_import_set_real_input_derivatives_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_input_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
    if (has_fmi2_import_get_real_output_derivatives_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_output_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
    if (has_fmi2_import_get_real_output_derivatives_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_output_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
    if (has_fmi2_import_cancel_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_cancel_step_req());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
    if (has_fmi2_import_cancel_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_cancel_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
    if (has_fmi2_import_do_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_do_step_req());
    }

    // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
    if (has_fmi2_import_do_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_do_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
    if (has_fmi2_import_get_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
    if (has_fmi2_import_get_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
    if (has_fmi2_import_get_real_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
    if (has_fmi2_import_get_real_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
    if (has_fmi2_import_get_integer_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_status_req());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
    if (has_fmi2_import_get_integer_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
    if (has_fmi2_import_get_boolean_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
    if (has_fmi2_import_get_boolean_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
    if (has_fmi2_import_get_string_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
    if (has_fmi2_import_get_string_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
    if (has_fmi2_import_instantiate_model_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_model_req());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
    if (has_fmi2_import_instantiate_model_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_model_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
    if (has_fmi2_import_free_model_instance_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_model_instance_req());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
    if (has_fmi2_import_free_model_instance_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_model_instance_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
    if (has_fmi2_import_set_time_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_time_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
    if (has_fmi2_import_set_time_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_time_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
    if (has_fmi2_import_set_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
    if (has_fmi2_import_set_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
    if (has_fmi2_import_completed_integrator_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_integrator_step_req());
    }

    // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
    if (has_fmi2_import_completed_integrator_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_integrator_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
    if (has_fmi2_import_initialize_model_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_model_req());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
    if (has_fmi2_import_initialize_model_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_model_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
    if (has_fmi2_import_get_derivatives_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
    if (has_fmi2_import_get_derivatives_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
    if (has_fmi2_import_get_event_indicators_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_event_indicators_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
    if (has_fmi2_import_get_event_indicators_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_event_indicators_res());
    }

    // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
    if (has_fmi2_import_eventupdate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_eventupdate_req());
    }

    // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
    if (has_fmi2_import_eventupdate_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_eventupdate_res());
    }

    // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
    if (has_fmi2_import_completed_event_iteration_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_event_iteration_req());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
    if (has_fmi2_import_completed_event_iteration_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_event_iteration_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
    if (has_fmi2_import_get_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
    if (has_fmi2_import_get_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
    if (has_fmi2_import_get_nominal_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_nominal_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
    if (has_fmi2_import_get_nominal_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_nominal_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
    if (has_fmi2_import_terminate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_req());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
    if (has_fmi2_import_terminate_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
    if (has_fmi2_import_get_version_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_version_req());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
    if (has_fmi2_import_get_version_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_version_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
    if (has_fmi2_import_set_debug_logging_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_debug_logging_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
    if (has_fmi2_import_set_debug_logging_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_debug_logging_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
    if (has_fmi2_import_set_real_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
    if (has_fmi2_import_set_real_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
    if (has_fmi2_import_set_integer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_integer_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
    if (has_fmi2_import_set_integer_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_integer_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
    if (has_fmi2_import_set_boolean_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_boolean_req());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
    if (has_fmi2_import_set_boolean_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_boolean_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
    if (has_fmi2_import_set_string_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_string_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
    if (has_fmi2_import_set_string_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_string_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
    if (has_fmi2_import_get_real_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
    if (has_fmi2_import_get_real_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
    if (has_fmi2_import_get_integer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
    if (has_fmi2_import_get_integer_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
    if (has_fmi2_import_get_boolean_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_req());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
    if (has_fmi2_import_get_boolean_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
    if (has_fmi2_import_get_string_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
    if (has_fmi2_import_get_string_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
    if (has_fmi2_import_get_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_fmu_state_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
    if (has_fmi2_import_get_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
    if (has_fmi2_import_set_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_fmu_state_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
    if (has_fmi2_import_set_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
    if (has_fmi2_import_free_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_fmu_state_req());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
    if (has_fmi2_import_free_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
    if (has_fmi2_import_get_directional_derivative_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_directional_derivative_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
    if (has_fmi2_import_get_directional_derivative_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_directional_derivative_res());
    }

    // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
    if (has_get_xml_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_xml_req());
    }

    // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
    if (has_get_xml_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_xml_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmitcp_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmitcp_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmitcp_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmitcp_message::MergeFrom(const fmitcp_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fmi2_import_instantiate_req()) {
      mutable_fmi2_import_instantiate_req()->::fmitcp_proto::fmi2_import_instantiate_req::MergeFrom(from.fmi2_import_instantiate_req());
    }
    if (from.has_fmi2_import_instantiate_res()) {
      mutable_fmi2_import_instantiate_res()->::fmitcp_proto::fmi2_import_instantiate_res::MergeFrom(from.fmi2_import_instantiate_res());
    }
    if (from.has_fmi2_import_initialize_slave_req()) {
      mutable_fmi2_import_initialize_slave_req()->::fmitcp_proto::fmi2_import_initialize_slave_req::MergeFrom(from.fmi2_import_initialize_slave_req());
    }
    if (from.has_fmi2_import_initialize_slave_res()) {
      mutable_fmi2_import_initialize_slave_res()->::fmitcp_proto::fmi2_import_initialize_slave_res::MergeFrom(from.fmi2_import_initialize_slave_res());
    }
    if (from.has_fmi2_import_terminate_slave_req()) {
      mutable_fmi2_import_terminate_slave_req()->::fmitcp_proto::fmi2_import_terminate_slave_req::MergeFrom(from.fmi2_import_terminate_slave_req());
    }
    if (from.has_fmi2_import_terminate_slave_res()) {
      mutable_fmi2_import_terminate_slave_res()->::fmitcp_proto::fmi2_import_terminate_slave_res::MergeFrom(from.fmi2_import_terminate_slave_res());
    }
    if (from.has_fmi2_import_reset_slave_req()) {
      mutable_fmi2_import_reset_slave_req()->::fmitcp_proto::fmi2_import_reset_slave_req::MergeFrom(from.fmi2_import_reset_slave_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fmi2_import_reset_slave_res()) {
      mutable_fmi2_import_reset_slave_res()->::fmitcp_proto::fmi2_import_reset_slave_res::MergeFrom(from.fmi2_import_reset_slave_res());
    }
    if (from.has_fmi2_import_free_slave_instance_req()) {
      mutable_fmi2_import_free_slave_instance_req()->::fmitcp_proto::fmi2_import_free_slave_instance_req::MergeFrom(from.fmi2_import_free_slave_instance_req());
    }
    if (from.has_fmi2_import_free_slave_instance_res()) {
      mutable_fmi2_import_free_slave_instance_res()->::fmitcp_proto::fmi2_import_free_slave_instance_res::MergeFrom(from.fmi2_import_free_slave_instance_res());
    }
    if (from.has_fmi2_import_set_real_input_derivatives_req()) {
      mutable_fmi2_import_set_real_input_derivatives_req()->::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::MergeFrom(from.fmi2_import_set_real_input_derivatives_req());
    }
    if (from.has_fmi2_import_set_real_input_derivatives_res()) {
      mutable_fmi2_import_set_real_input_derivatives_res()->::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::MergeFrom(from.fmi2_import_set_real_input_derivatives_res());
    }
    if (from.has_fmi2_import_get_real_output_derivatives_req()) {
      mutable_fmi2_import_get_real_output_derivatives_req()->::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::MergeFrom(from.fmi2_import_get_real_output_derivatives_req());
    }
    if (from.has_fmi2_import_get_real_output_derivatives_res()) {
      mutable_fmi2_import_get_real_output_derivatives_res()->::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::MergeFrom(from.fmi2_import_get_real_output_derivatives_res());
    }
    if (from.has_fmi2_import_cancel_step_req()) {
      mutable_fmi2_import_cancel_step_req()->::fmitcp_proto::fmi2_import_cancel_step_req::MergeFrom(from.fmi2_import_cancel_step_req());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fmi2_import_cancel_step_res()) {
      mutable_fmi2_import_cancel_step_res()->::fmitcp_proto::fmi2_import_cancel_step_res::MergeFrom(from.fmi2_import_cancel_step_res());
    }
    if (from.has_fmi2_import_do_step_req()) {
      mutable_fmi2_import_do_step_req()->::fmitcp_proto::fmi2_import_do_step_req::MergeFrom(from.fmi2_import_do_step_req());
    }
    if (from.has_fmi2_import_do_step_res()) {
      mutable_fmi2_import_do_step_res()->::fmitcp_proto::fmi2_import_do_step_res::MergeFrom(from.fmi2_import_do_step_res());
    }
    if (from.has_fmi2_import_get_status_req()) {
      mutable_fmi2_import_get_status_req()->::fmitcp_proto::fmi2_import_get_status_req::MergeFrom(from.fmi2_import_get_status_req());
    }
    if (from.has_fmi2_import_get_status_res()) {
      mutable_fmi2_import_get_status_res()->::fmitcp_proto::fmi2_import_get_status_res::MergeFrom(from.fmi2_import_get_status_res());
    }
    if (from.has_fmi2_import_get_real_status_req()) {
      mutable_fmi2_import_get_real_status_req()->::fmitcp_proto::fmi2_import_get_real_status_req::MergeFrom(from.fmi2_import_get_real_status_req());
    }
    if (from.has_fmi2_import_get_real_status_res()) {
      mutable_fmi2_import_get_real_status_res()->::fmitcp_proto::fmi2_import_get_real_status_res::MergeFrom(from.fmi2_import_get_real_status_res());
    }
    if (from.has_fmi2_import_get_integer_status_req()) {
      mutable_fmi2_import_get_integer_status_req()->::fmitcp_proto::fmi2_import_get_integer_status_req::MergeFrom(from.fmi2_import_get_integer_status_req());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fmi2_import_get_integer_status_res()) {
      mutable_fmi2_import_get_integer_status_res()->::fmitcp_proto::fmi2_import_get_integer_status_res::MergeFrom(from.fmi2_import_get_integer_status_res());
    }
    if (from.has_fmi2_import_get_boolean_status_req()) {
      mutable_fmi2_import_get_boolean_status_req()->::fmitcp_proto::fmi2_import_get_boolean_status_req::MergeFrom(from.fmi2_import_get_boolean_status_req());
    }
    if (from.has_fmi2_import_get_boolean_status_res()) {
      mutable_fmi2_import_get_boolean_status_res()->::fmitcp_proto::fmi2_import_get_boolean_status_res::MergeFrom(from.fmi2_import_get_boolean_status_res());
    }
    if (from.has_fmi2_import_get_string_status_req()) {
      mutable_fmi2_import_get_string_status_req()->::fmitcp_proto::fmi2_import_get_string_status_req::MergeFrom(from.fmi2_import_get_string_status_req());
    }
    if (from.has_fmi2_import_get_string_status_res()) {
      mutable_fmi2_import_get_string_status_res()->::fmitcp_proto::fmi2_import_get_string_status_res::MergeFrom(from.fmi2_import_get_string_status_res());
    }
    if (from.has_fmi2_import_instantiate_model_req()) {
      mutable_fmi2_import_instantiate_model_req()->::fmitcp_proto::fmi2_import_instantiate_model_req::MergeFrom(from.fmi2_import_instantiate_model_req());
    }
    if (from.has_fmi2_import_instantiate_model_res()) {
      mutable_fmi2_import_instantiate_model_res()->::fmitcp_proto::fmi2_import_instantiate_model_res::MergeFrom(from.fmi2_import_instantiate_model_res());
    }
    if (from.has_fmi2_import_free_model_instance_req()) {
      mutable_fmi2_import_free_model_instance_req()->::fmitcp_proto::fmi2_import_free_model_instance_req::MergeFrom(from.fmi2_import_free_model_instance_req());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fmi2_import_free_model_instance_res()) {
      mutable_fmi2_import_free_model_instance_res()->::fmitcp_proto::fmi2_import_free_model_instance_res::MergeFrom(from.fmi2_import_free_model_instance_res());
    }
    if (from.has_fmi2_import_set_time_req()) {
      mutable_fmi2_import_set_time_req()->::fmitcp_proto::fmi2_import_set_time_req::MergeFrom(from.fmi2_import_set_time_req());
    }
    if (from.has_fmi2_import_set_time_res()) {
      mutable_fmi2_import_set_time_res()->::fmitcp_proto::fmi2_import_set_time_res::MergeFrom(from.fmi2_import_set_time_res());
    }
    if (from.has_fmi2_import_set_continuous_states_req()) {
      mutable_fmi2_import_set_continuous_states_req()->::fmitcp_proto::fmi2_import_set_continuous_states_req::MergeFrom(from.fmi2_import_set_continuous_states_req());
    }
    if (from.has_fmi2_import_set_continuous_states_res()) {
      mutable_fmi2_import_set_continuous_states_res()->::fmitcp_proto::fmi2_import_set_continuous_states_res::MergeFrom(from.fmi2_import_set_continuous_states_res());
    }
    if (from.has_fmi2_import_completed_integrator_step_req()) {
      mutable_fmi2_import_completed_integrator_step_req()->::fmitcp_proto::fmi2_import_completed_integrator_step_req::MergeFrom(from.fmi2_import_completed_integrator_step_req());
    }
    if (from.has_fmi2_import_completed_integrator_step_res()) {
      mutable_fmi2_import_completed_integrator_step_res()->::fmitcp_proto::fmi2_import_completed_integrator_step_res::MergeFrom(from.fmi2_import_completed_integrator_step_res());
    }
    if (from.has_fmi2_import_initialize_model_req()) {
      mutable_fmi2_import_initialize_model_req()->::fmitcp_proto::fmi2_import_initialize_model_req::MergeFrom(from.fmi2_import_initialize_model_req());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_fmi2_import_initialize_model_res()) {
      mutable_fmi2_import_initialize_model_res()->::fmitcp_proto::fmi2_import_initialize_model_res::MergeFrom(from.fmi2_import_initialize_model_res());
    }
    if (from.has_fmi2_import_get_derivatives_req()) {
      mutable_fmi2_import_get_derivatives_req()->::fmitcp_proto::fmi2_import_get_derivatives_req::MergeFrom(from.fmi2_import_get_derivatives_req());
    }
    if (from.has_fmi2_import_get_derivatives_res()) {
      mutable_fmi2_import_get_derivatives_res()->::fmitcp_proto::fmi2_import_get_derivatives_res::MergeFrom(from.fmi2_import_get_derivatives_res());
    }
    if (from.has_fmi2_import_get_event_indicators_req()) {
      mutable_fmi2_import_get_event_indicators_req()->::fmitcp_proto::fmi2_import_get_event_indicators_req::MergeFrom(from.fmi2_import_get_event_indicators_req());
    }
    if (from.has_fmi2_import_get_event_indicators_res()) {
      mutable_fmi2_import_get_event_indicators_res()->::fmitcp_proto::fmi2_import_get_event_indicators_res::MergeFrom(from.fmi2_import_get_event_indicators_res());
    }
    if (from.has_fmi2_import_eventupdate_req()) {
      mutable_fmi2_import_eventupdate_req()->::fmitcp_proto::fmi2_import_eventUpdate_req::MergeFrom(from.fmi2_import_eventupdate_req());
    }
    if (from.has_fmi2_import_eventupdate_res()) {
      mutable_fmi2_import_eventupdate_res()->::fmitcp_proto::fmi2_import_eventUpdate_res::MergeFrom(from.fmi2_import_eventupdate_res());
    }
    if (from.has_fmi2_import_completed_event_iteration_req()) {
      mutable_fmi2_import_completed_event_iteration_req()->::fmitcp_proto::fmi2_import_completed_event_iteration_req::MergeFrom(from.fmi2_import_completed_event_iteration_req());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_fmi2_import_completed_event_iteration_res()) {
      mutable_fmi2_import_completed_event_iteration_res()->::fmitcp_proto::fmi2_import_completed_event_iteration_res::MergeFrom(from.fmi2_import_completed_event_iteration_res());
    }
    if (from.has_fmi2_import_get_continuous_states_req()) {
      mutable_fmi2_import_get_continuous_states_req()->::fmitcp_proto::fmi2_import_get_continuous_states_req::MergeFrom(from.fmi2_import_get_continuous_states_req());
    }
    if (from.has_fmi2_import_get_continuous_states_res()) {
      mutable_fmi2_import_get_continuous_states_res()->::fmitcp_proto::fmi2_import_get_continuous_states_res::MergeFrom(from.fmi2_import_get_continuous_states_res());
    }
    if (from.has_fmi2_import_get_nominal_continuous_states_req()) {
      mutable_fmi2_import_get_nominal_continuous_states_req()->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::MergeFrom(from.fmi2_import_get_nominal_continuous_states_req());
    }
    if (from.has_fmi2_import_get_nominal_continuous_states_res()) {
      mutable_fmi2_import_get_nominal_continuous_states_res()->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::MergeFrom(from.fmi2_import_get_nominal_continuous_states_res());
    }
    if (from.has_fmi2_import_terminate_req()) {
      mutable_fmi2_import_terminate_req()->::fmitcp_proto::fmi2_import_terminate_req::MergeFrom(from.fmi2_import_terminate_req());
    }
    if (from.has_fmi2_import_terminate_res()) {
      mutable_fmi2_import_terminate_res()->::fmitcp_proto::fmi2_import_terminate_res::MergeFrom(from.fmi2_import_terminate_res());
    }
    if (from.has_fmi2_import_get_version_req()) {
      mutable_fmi2_import_get_version_req()->::fmitcp_proto::fmi2_import_get_version_req::MergeFrom(from.fmi2_import_get_version_req());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_fmi2_import_get_version_res()) {
      mutable_fmi2_import_get_version_res()->::fmitcp_proto::fmi2_import_get_version_res::MergeFrom(from.fmi2_import_get_version_res());
    }
    if (from.has_fmi2_import_set_debug_logging_req()) {
      mutable_fmi2_import_set_debug_logging_req()->::fmitcp_proto::fmi2_import_set_debug_logging_req::MergeFrom(from.fmi2_import_set_debug_logging_req());
    }
    if (from.has_fmi2_import_set_debug_logging_res()) {
      mutable_fmi2_import_set_debug_logging_res()->::fmitcp_proto::fmi2_import_set_debug_logging_res::MergeFrom(from.fmi2_import_set_debug_logging_res());
    }
    if (from.has_fmi2_import_set_real_req()) {
      mutable_fmi2_import_set_real_req()->::fmitcp_proto::fmi2_import_set_real_req::MergeFrom(from.fmi2_import_set_real_req());
    }
    if (from.has_fmi2_import_set_real_res()) {
      mutable_fmi2_import_set_real_res()->::fmitcp_proto::fmi2_import_set_real_res::MergeFrom(from.fmi2_import_set_real_res());
    }
    if (from.has_fmi2_import_set_integer_req()) {
      mutable_fmi2_import_set_integer_req()->::fmitcp_proto::fmi2_import_set_integer_req::MergeFrom(from.fmi2_import_set_integer_req());
    }
    if (from.has_fmi2_import_set_integer_res()) {
      mutable_fmi2_import_set_integer_res()->::fmitcp_proto::fmi2_import_set_integer_res::MergeFrom(from.fmi2_import_set_integer_res());
    }
    if (from.has_fmi2_import_set_boolean_req()) {
      mutable_fmi2_import_set_boolean_req()->::fmitcp_proto::fmi2_import_set_boolean_req::MergeFrom(from.fmi2_import_set_boolean_req());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_fmi2_import_set_boolean_res()) {
      mutable_fmi2_import_set_boolean_res()->::fmitcp_proto::fmi2_import_set_boolean_res::MergeFrom(from.fmi2_import_set_boolean_res());
    }
    if (from.has_fmi2_import_set_string_req()) {
      mutable_fmi2_import_set_string_req()->::fmitcp_proto::fmi2_import_set_string_req::MergeFrom(from.fmi2_import_set_string_req());
    }
    if (from.has_fmi2_import_set_string_res()) {
      mutable_fmi2_import_set_string_res()->::fmitcp_proto::fmi2_import_set_string_res::MergeFrom(from.fmi2_import_set_string_res());
    }
    if (from.has_fmi2_import_get_real_req()) {
      mutable_fmi2_import_get_real_req()->::fmitcp_proto::fmi2_import_get_real_req::MergeFrom(from.fmi2_import_get_real_req());
    }
    if (from.has_fmi2_import_get_real_res()) {
      mutable_fmi2_import_get_real_res()->::fmitcp_proto::fmi2_import_get_real_res::MergeFrom(from.fmi2_import_get_real_res());
    }
    if (from.has_fmi2_import_get_integer_req()) {
      mutable_fmi2_import_get_integer_req()->::fmitcp_proto::fmi2_import_get_integer_req::MergeFrom(from.fmi2_import_get_integer_req());
    }
    if (from.has_fmi2_import_get_integer_res()) {
      mutable_fmi2_import_get_integer_res()->::fmitcp_proto::fmi2_import_get_integer_res::MergeFrom(from.fmi2_import_get_integer_res());
    }
    if (from.has_fmi2_import_get_boolean_req()) {
      mutable_fmi2_import_get_boolean_req()->::fmitcp_proto::fmi2_import_get_boolean_req::MergeFrom(from.fmi2_import_get_boolean_req());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_fmi2_import_get_boolean_res()) {
      mutable_fmi2_import_get_boolean_res()->::fmitcp_proto::fmi2_import_get_boolean_res::MergeFrom(from.fmi2_import_get_boolean_res());
    }
    if (from.has_fmi2_import_get_string_req()) {
      mutable_fmi2_import_get_string_req()->::fmitcp_proto::fmi2_import_get_string_req::MergeFrom(from.fmi2_import_get_string_req());
    }
    if (from.has_fmi2_import_get_string_res()) {
      mutable_fmi2_import_get_string_res()->::fmitcp_proto::fmi2_import_get_string_res::MergeFrom(from.fmi2_import_get_string_res());
    }
    if (from.has_fmi2_import_get_fmu_state_req()) {
      mutable_fmi2_import_get_fmu_state_req()->::fmitcp_proto::fmi2_import_get_fmu_state_req::MergeFrom(from.fmi2_import_get_fmu_state_req());
    }
    if (from.has_fmi2_import_get_fmu_state_res()) {
      mutable_fmi2_import_get_fmu_state_res()->::fmitcp_proto::fmi2_import_get_fmu_state_res::MergeFrom(from.fmi2_import_get_fmu_state_res());
    }
    if (from.has_fmi2_import_set_fmu_state_req()) {
      mutable_fmi2_import_set_fmu_state_req()->::fmitcp_proto::fmi2_import_set_fmu_state_req::MergeFrom(from.fmi2_import_set_fmu_state_req());
    }
    if (from.has_fmi2_import_set_fmu_state_res()) {
      mutable_fmi2_import_set_fmu_state_res()->::fmitcp_proto::fmi2_import_set_fmu_state_res::MergeFrom(from.fmi2_import_set_fmu_state_res());
    }
    if (from.has_fmi2_import_free_fmu_state_req()) {
      mutable_fmi2_import_free_fmu_state_req()->::fmitcp_proto::fmi2_import_free_fmu_state_req::MergeFrom(from.fmi2_import_free_fmu_state_req());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_fmi2_import_free_fmu_state_res()) {
      mutable_fmi2_import_free_fmu_state_res()->::fmitcp_proto::fmi2_import_free_fmu_state_res::MergeFrom(from.fmi2_import_free_fmu_state_res());
    }
    if (from.has_fmi2_import_get_directional_derivative_req()) {
      mutable_fmi2_import_get_directional_derivative_req()->::fmitcp_proto::fmi2_import_get_directional_derivative_req::MergeFrom(from.fmi2_import_get_directional_derivative_req());
    }
    if (from.has_fmi2_import_get_directional_derivative_res()) {
      mutable_fmi2_import_get_directional_derivative_res()->::fmitcp_proto::fmi2_import_get_directional_derivative_res::MergeFrom(from.fmi2_import_get_directional_derivative_res());
    }
    if (from.has_get_xml_req()) {
      mutable_get_xml_req()->::fmitcp_proto::get_xml_req::MergeFrom(from.get_xml_req());
    }
    if (from.has_get_xml_res()) {
      mutable_get_xml_res()->::fmitcp_proto::get_xml_res::MergeFrom(from.get_xml_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmitcp_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmitcp_message::CopyFrom(const fmitcp_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmitcp_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fmi2_import_instantiate_req()) {
    if (!this->fmi2_import_instantiate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_res()) {
    if (!this->fmi2_import_instantiate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_slave_req()) {
    if (!this->fmi2_import_initialize_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_slave_res()) {
    if (!this->fmi2_import_initialize_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_slave_req()) {
    if (!this->fmi2_import_terminate_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_slave_res()) {
    if (!this->fmi2_import_terminate_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_reset_slave_req()) {
    if (!this->fmi2_import_reset_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_reset_slave_res()) {
    if (!this->fmi2_import_reset_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_slave_instance_req()) {
    if (!this->fmi2_import_free_slave_instance_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_slave_instance_res()) {
    if (!this->fmi2_import_free_slave_instance_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_input_derivatives_req()) {
    if (!this->fmi2_import_set_real_input_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_input_derivatives_res()) {
    if (!this->fmi2_import_set_real_input_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_output_derivatives_req()) {
    if (!this->fmi2_import_get_real_output_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_output_derivatives_res()) {
    if (!this->fmi2_import_get_real_output_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_cancel_step_req()) {
    if (!this->fmi2_import_cancel_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_cancel_step_res()) {
    if (!this->fmi2_import_cancel_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_do_step_req()) {
    if (!this->fmi2_import_do_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_do_step_res()) {
    if (!this->fmi2_import_do_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_status_req()) {
    if (!this->fmi2_import_get_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_status_res()) {
    if (!this->fmi2_import_get_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_status_req()) {
    if (!this->fmi2_import_get_real_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_status_res()) {
    if (!this->fmi2_import_get_real_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_status_req()) {
    if (!this->fmi2_import_get_integer_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_status_res()) {
    if (!this->fmi2_import_get_integer_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_status_req()) {
    if (!this->fmi2_import_get_boolean_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_status_res()) {
    if (!this->fmi2_import_get_boolean_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_status_req()) {
    if (!this->fmi2_import_get_string_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_status_res()) {
    if (!this->fmi2_import_get_string_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_model_req()) {
    if (!this->fmi2_import_instantiate_model_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_model_res()) {
    if (!this->fmi2_import_instantiate_model_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_model_instance_req()) {
    if (!this->fmi2_import_free_model_instance_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_model_instance_res()) {
    if (!this->fmi2_import_free_model_instance_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_time_req()) {
    if (!this->fmi2_import_set_time_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_time_res()) {
    if (!this->fmi2_import_set_time_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_continuous_states_req()) {
    if (!this->fmi2_import_set_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_continuous_states_res()) {
    if (!this->fmi2_import_set_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_integrator_step_req()) {
    if (!this->fmi2_import_completed_integrator_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_integrator_step_res()) {
    if (!this->fmi2_import_completed_integrator_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_model_req()) {
    if (!this->fmi2_import_initialize_model_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_model_res()) {
    if (!this->fmi2_import_initialize_model_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_derivatives_req()) {
    if (!this->fmi2_import_get_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_derivatives_res()) {
    if (!this->fmi2_import_get_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_event_indicators_req()) {
    if (!this->fmi2_import_get_event_indicators_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_event_indicators_res()) {
    if (!this->fmi2_import_get_event_indicators_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_eventupdate_req()) {
    if (!this->fmi2_import_eventupdate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_eventupdate_res()) {
    if (!this->fmi2_import_eventupdate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_event_iteration_req()) {
    if (!this->fmi2_import_completed_event_iteration_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_event_iteration_res()) {
    if (!this->fmi2_import_completed_event_iteration_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_continuous_states_req()) {
    if (!this->fmi2_import_get_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_continuous_states_res()) {
    if (!this->fmi2_import_get_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_nominal_continuous_states_req()) {
    if (!this->fmi2_import_get_nominal_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_nominal_continuous_states_res()) {
    if (!this->fmi2_import_get_nominal_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_req()) {
    if (!this->fmi2_import_terminate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_res()) {
    if (!this->fmi2_import_terminate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_version_req()) {
    if (!this->fmi2_import_get_version_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_version_res()) {
    if (!this->fmi2_import_get_version_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_debug_logging_req()) {
    if (!this->fmi2_import_set_debug_logging_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_debug_logging_res()) {
    if (!this->fmi2_import_set_debug_logging_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_req()) {
    if (!this->fmi2_import_set_real_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_res()) {
    if (!this->fmi2_import_set_real_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_integer_req()) {
    if (!this->fmi2_import_set_integer_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_integer_res()) {
    if (!this->fmi2_import_set_integer_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_boolean_req()) {
    if (!this->fmi2_import_set_boolean_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_boolean_res()) {
    if (!this->fmi2_import_set_boolean_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_string_req()) {
    if (!this->fmi2_import_set_string_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_string_res()) {
    if (!this->fmi2_import_set_string_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_req()) {
    if (!this->fmi2_import_get_real_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_res()) {
    if (!this->fmi2_import_get_real_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_req()) {
    if (!this->fmi2_import_get_integer_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_res()) {
    if (!this->fmi2_import_get_integer_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_req()) {
    if (!this->fmi2_import_get_boolean_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_res()) {
    if (!this->fmi2_import_get_boolean_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_req()) {
    if (!this->fmi2_import_get_string_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_res()) {
    if (!this->fmi2_import_get_string_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_fmu_state_req()) {
    if (!this->fmi2_import_get_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_fmu_state_res()) {
    if (!this->fmi2_import_get_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_fmu_state_req()) {
    if (!this->fmi2_import_set_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_fmu_state_res()) {
    if (!this->fmi2_import_set_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_fmu_state_req()) {
    if (!this->fmi2_import_free_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_fmu_state_res()) {
    if (!this->fmi2_import_free_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_directional_derivative_req()) {
    if (!this->fmi2_import_get_directional_derivative_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_directional_derivative_res()) {
    if (!this->fmi2_import_get_directional_derivative_res().IsInitialized()) return false;
  }
  if (has_get_xml_req()) {
    if (!this->get_xml_req().IsInitialized()) return false;
  }
  if (has_get_xml_res()) {
    if (!this->get_xml_res().IsInitialized()) return false;
  }
  return true;
}

void fmitcp_message::Swap(fmitcp_message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(fmi2_import_instantiate_req_, other->fmi2_import_instantiate_req_);
    std::swap(fmi2_import_instantiate_res_, other->fmi2_import_instantiate_res_);
    std::swap(fmi2_import_initialize_slave_req_, other->fmi2_import_initialize_slave_req_);
    std::swap(fmi2_import_initialize_slave_res_, other->fmi2_import_initialize_slave_res_);
    std::swap(fmi2_import_terminate_slave_req_, other->fmi2_import_terminate_slave_req_);
    std::swap(fmi2_import_terminate_slave_res_, other->fmi2_import_terminate_slave_res_);
    std::swap(fmi2_import_reset_slave_req_, other->fmi2_import_reset_slave_req_);
    std::swap(fmi2_import_reset_slave_res_, other->fmi2_import_reset_slave_res_);
    std::swap(fmi2_import_free_slave_instance_req_, other->fmi2_import_free_slave_instance_req_);
    std::swap(fmi2_import_free_slave_instance_res_, other->fmi2_import_free_slave_instance_res_);
    std::swap(fmi2_import_set_real_input_derivatives_req_, other->fmi2_import_set_real_input_derivatives_req_);
    std::swap(fmi2_import_set_real_input_derivatives_res_, other->fmi2_import_set_real_input_derivatives_res_);
    std::swap(fmi2_import_get_real_output_derivatives_req_, other->fmi2_import_get_real_output_derivatives_req_);
    std::swap(fmi2_import_get_real_output_derivatives_res_, other->fmi2_import_get_real_output_derivatives_res_);
    std::swap(fmi2_import_cancel_step_req_, other->fmi2_import_cancel_step_req_);
    std::swap(fmi2_import_cancel_step_res_, other->fmi2_import_cancel_step_res_);
    std::swap(fmi2_import_do_step_req_, other->fmi2_import_do_step_req_);
    std::swap(fmi2_import_do_step_res_, other->fmi2_import_do_step_res_);
    std::swap(fmi2_import_get_status_req_, other->fmi2_import_get_status_req_);
    std::swap(fmi2_import_get_status_res_, other->fmi2_import_get_status_res_);
    std::swap(fmi2_import_get_real_status_req_, other->fmi2_import_get_real_status_req_);
    std::swap(fmi2_import_get_real_status_res_, other->fmi2_import_get_real_status_res_);
    std::swap(fmi2_import_get_integer_status_req_, other->fmi2_import_get_integer_status_req_);
    std::swap(fmi2_import_get_integer_status_res_, other->fmi2_import_get_integer_status_res_);
    std::swap(fmi2_import_get_boolean_status_req_, other->fmi2_import_get_boolean_status_req_);
    std::swap(fmi2_import_get_boolean_status_res_, other->fmi2_import_get_boolean_status_res_);
    std::swap(fmi2_import_get_string_status_req_, other->fmi2_import_get_string_status_req_);
    std::swap(fmi2_import_get_string_status_res_, other->fmi2_import_get_string_status_res_);
    std::swap(fmi2_import_instantiate_model_req_, other->fmi2_import_instantiate_model_req_);
    std::swap(fmi2_import_instantiate_model_res_, other->fmi2_import_instantiate_model_res_);
    std::swap(fmi2_import_free_model_instance_req_, other->fmi2_import_free_model_instance_req_);
    std::swap(fmi2_import_free_model_instance_res_, other->fmi2_import_free_model_instance_res_);
    std::swap(fmi2_import_set_time_req_, other->fmi2_import_set_time_req_);
    std::swap(fmi2_import_set_time_res_, other->fmi2_import_set_time_res_);
    std::swap(fmi2_import_set_continuous_states_req_, other->fmi2_import_set_continuous_states_req_);
    std::swap(fmi2_import_set_continuous_states_res_, other->fmi2_import_set_continuous_states_res_);
    std::swap(fmi2_import_completed_integrator_step_req_, other->fmi2_import_completed_integrator_step_req_);
    std::swap(fmi2_import_completed_integrator_step_res_, other->fmi2_import_completed_integrator_step_res_);
    std::swap(fmi2_import_initialize_model_req_, other->fmi2_import_initialize_model_req_);
    std::swap(fmi2_import_initialize_model_res_, other->fmi2_import_initialize_model_res_);
    std::swap(fmi2_import_get_derivatives_req_, other->fmi2_import_get_derivatives_req_);
    std::swap(fmi2_import_get_derivatives_res_, other->fmi2_import_get_derivatives_res_);
    std::swap(fmi2_import_get_event_indicators_req_, other->fmi2_import_get_event_indicators_req_);
    std::swap(fmi2_import_get_event_indicators_res_, other->fmi2_import_get_event_indicators_res_);
    std::swap(fmi2_import_eventupdate_req_, other->fmi2_import_eventupdate_req_);
    std::swap(fmi2_import_eventupdate_res_, other->fmi2_import_eventupdate_res_);
    std::swap(fmi2_import_completed_event_iteration_req_, other->fmi2_import_completed_event_iteration_req_);
    std::swap(fmi2_import_completed_event_iteration_res_, other->fmi2_import_completed_event_iteration_res_);
    std::swap(fmi2_import_get_continuous_states_req_, other->fmi2_import_get_continuous_states_req_);
    std::swap(fmi2_import_get_continuous_states_res_, other->fmi2_import_get_continuous_states_res_);
    std::swap(fmi2_import_get_nominal_continuous_states_req_, other->fmi2_import_get_nominal_continuous_states_req_);
    std::swap(fmi2_import_get_nominal_continuous_states_res_, other->fmi2_import_get_nominal_continuous_states_res_);
    std::swap(fmi2_import_terminate_req_, other->fmi2_import_terminate_req_);
    std::swap(fmi2_import_terminate_res_, other->fmi2_import_terminate_res_);
    std::swap(fmi2_import_get_version_req_, other->fmi2_import_get_version_req_);
    std::swap(fmi2_import_get_version_res_, other->fmi2_import_get_version_res_);
    std::swap(fmi2_import_set_debug_logging_req_, other->fmi2_import_set_debug_logging_req_);
    std::swap(fmi2_import_set_debug_logging_res_, other->fmi2_import_set_debug_logging_res_);
    std::swap(fmi2_import_set_real_req_, other->fmi2_import_set_real_req_);
    std::swap(fmi2_import_set_real_res_, other->fmi2_import_set_real_res_);
    std::swap(fmi2_import_set_integer_req_, other->fmi2_import_set_integer_req_);
    std::swap(fmi2_import_set_integer_res_, other->fmi2_import_set_integer_res_);
    std::swap(fmi2_import_set_boolean_req_, other->fmi2_import_set_boolean_req_);
    std::swap(fmi2_import_set_boolean_res_, other->fmi2_import_set_boolean_res_);
    std::swap(fmi2_import_set_string_req_, other->fmi2_import_set_string_req_);
    std::swap(fmi2_import_set_string_res_, other->fmi2_import_set_string_res_);
    std::swap(fmi2_import_get_real_req_, other->fmi2_import_get_real_req_);
    std::swap(fmi2_import_get_real_res_, other->fmi2_import_get_real_res_);
    std::swap(fmi2_import_get_integer_req_, other->fmi2_import_get_integer_req_);
    std::swap(fmi2_import_get_integer_res_, other->fmi2_import_get_integer_res_);
    std::swap(fmi2_import_get_boolean_req_, other->fmi2_import_get_boolean_req_);
    std::swap(fmi2_import_get_boolean_res_, other->fmi2_import_get_boolean_res_);
    std::swap(fmi2_import_get_string_req_, other->fmi2_import_get_string_req_);
    std::swap(fmi2_import_get_string_res_, other->fmi2_import_get_string_res_);
    std::swap(fmi2_import_get_fmu_state_req_, other->fmi2_import_get_fmu_state_req_);
    std::swap(fmi2_import_get_fmu_state_res_, other->fmi2_import_get_fmu_state_res_);
    std::swap(fmi2_import_set_fmu_state_req_, other->fmi2_import_set_fmu_state_req_);
    std::swap(fmi2_import_set_fmu_state_res_, other->fmi2_import_set_fmu_state_res_);
    std::swap(fmi2_import_free_fmu_state_req_, other->fmi2_import_free_fmu_state_req_);
    std::swap(fmi2_import_free_fmu_state_res_, other->fmi2_import_free_fmu_state_res_);
    std::swap(fmi2_import_get_directional_derivative_req_, other->fmi2_import_get_directional_derivative_req_);
    std::swap(fmi2_import_get_directional_derivative_res_, other->fmi2_import_get_directional_derivative_res_);
    std::swap(get_xml_req_, other->get_xml_req_);
    std::swap(get_xml_res_, other->get_xml_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmitcp_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmitcp_message_descriptor_;
  metadata.reflection = fmitcp_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_event_info_t::kIterationConvergedFieldNumber;
const int fmi2_event_info_t::kStateValueReferencesChangedFieldNumber;
const int fmi2_event_info_t::kStateValuesChangedFieldNumber;
const int fmi2_event_info_t::kTerminateSimulationFieldNumber;
const int fmi2_event_info_t::kUpcomingTimeEventFieldNumber;
const int fmi2_event_info_t::kNextEventTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_event_info_t::fmi2_event_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_event_info_t::InitAsDefaultInstance() {
}

fmi2_event_info_t::fmi2_event_info_t(const fmi2_event_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_event_info_t::SharedCtor() {
  _cached_size_ = 0;
  iterationconverged_ = false;
  statevaluereferenceschanged_ = false;
  statevalueschanged_ = false;
  terminatesimulation_ = false;
  upcomingtimeevent_ = false;
  nexteventtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_event_info_t::~fmi2_event_info_t() {
  SharedDtor();
}

void fmi2_event_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_event_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_event_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_event_info_t_descriptor_;
}

const fmi2_event_info_t& fmi2_event_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_event_info_t* fmi2_event_info_t::default_instance_ = NULL;

fmi2_event_info_t* fmi2_event_info_t::New() const {
  return new fmi2_event_info_t;
}

void fmi2_event_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iterationconverged_ = false;
    statevaluereferenceschanged_ = false;
    statevalueschanged_ = false;
    terminatesimulation_ = false;
    upcomingtimeevent_ = false;
    nexteventtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_event_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool iterationConverged = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iterationconverged_)));
          set_has_iterationconverged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateValueReferencesChanged;
        break;
      }

      // required bool stateValueReferencesChanged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateValueReferencesChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &statevaluereferenceschanged_)));
          set_has_statevaluereferenceschanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateValuesChanged;
        break;
      }

      // required bool stateValuesChanged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateValuesChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &statevalueschanged_)));
          set_has_statevalueschanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_terminateSimulation;
        break;
      }

      // required bool terminateSimulation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminateSimulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminatesimulation_)));
          set_has_terminatesimulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upcomingTimeEvent;
        break;
      }

      // required bool upcomingTimeEvent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upcomingTimeEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upcomingtimeevent_)));
          set_has_upcomingtimeevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_nextEventTime;
        break;
      }

      // required double nextEventTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nextEventTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nexteventtime_)));
          set_has_nexteventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_event_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool iterationConverged = 1;
  if (has_iterationconverged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iterationconverged(), output);
  }

  // required bool stateValueReferencesChanged = 2;
  if (has_statevaluereferenceschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->statevaluereferenceschanged(), output);
  }

  // required bool stateValuesChanged = 3;
  if (has_statevalueschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->statevalueschanged(), output);
  }

  // required bool terminateSimulation = 4;
  if (has_terminatesimulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->terminatesimulation(), output);
  }

  // required bool upcomingTimeEvent = 5;
  if (has_upcomingtimeevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upcomingtimeevent(), output);
  }

  // required double nextEventTime = 6;
  if (has_nexteventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->nexteventtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_event_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool iterationConverged = 1;
  if (has_iterationconverged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iterationconverged(), target);
  }

  // required bool stateValueReferencesChanged = 2;
  if (has_statevaluereferenceschanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->statevaluereferenceschanged(), target);
  }

  // required bool stateValuesChanged = 3;
  if (has_statevalueschanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->statevalueschanged(), target);
  }

  // required bool terminateSimulation = 4;
  if (has_terminatesimulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->terminatesimulation(), target);
  }

  // required bool upcomingTimeEvent = 5;
  if (has_upcomingtimeevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upcomingtimeevent(), target);
  }

  // required double nextEventTime = 6;
  if (has_nexteventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->nexteventtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_event_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool iterationConverged = 1;
    if (has_iterationconverged()) {
      total_size += 1 + 1;
    }

    // required bool stateValueReferencesChanged = 2;
    if (has_statevaluereferenceschanged()) {
      total_size += 1 + 1;
    }

    // required bool stateValuesChanged = 3;
    if (has_statevalueschanged()) {
      total_size += 1 + 1;
    }

    // required bool terminateSimulation = 4;
    if (has_terminatesimulation()) {
      total_size += 1 + 1;
    }

    // required bool upcomingTimeEvent = 5;
    if (has_upcomingtimeevent()) {
      total_size += 1 + 1;
    }

    // required double nextEventTime = 6;
    if (has_nexteventtime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_event_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_event_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_event_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_event_info_t::MergeFrom(const fmi2_event_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iterationconverged()) {
      set_iterationconverged(from.iterationconverged());
    }
    if (from.has_statevaluereferenceschanged()) {
      set_statevaluereferenceschanged(from.statevaluereferenceschanged());
    }
    if (from.has_statevalueschanged()) {
      set_statevalueschanged(from.statevalueschanged());
    }
    if (from.has_terminatesimulation()) {
      set_terminatesimulation(from.terminatesimulation());
    }
    if (from.has_upcomingtimeevent()) {
      set_upcomingtimeevent(from.upcomingtimeevent());
    }
    if (from.has_nexteventtime()) {
      set_nexteventtime(from.nexteventtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_event_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_event_info_t::CopyFrom(const fmi2_event_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_event_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void fmi2_event_info_t::Swap(fmi2_event_info_t* other) {
  if (other != this) {
    std::swap(iterationconverged_, other->iterationconverged_);
    std::swap(statevaluereferenceschanged_, other->statevaluereferenceschanged_);
    std::swap(statevalueschanged_, other->statevalueschanged_);
    std::swap(terminatesimulation_, other->terminatesimulation_);
    std::swap(upcomingtimeevent_, other->upcomingtimeevent_);
    std::swap(nexteventtime_, other->nexteventtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_event_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_event_info_t_descriptor_;
  metadata.reflection = fmi2_event_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_req::kMessageIdFieldNumber;
const int fmi2_import_instantiate_req::kVisibleFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_req::fmi2_import_instantiate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_instantiate_req::InitAsDefaultInstance() {
}

fmi2_import_instantiate_req::fmi2_import_instantiate_req(const fmi2_import_instantiate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_req::~fmi2_import_instantiate_req() {
  SharedDtor();
}

void fmi2_import_instantiate_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_instantiate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_instantiate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_instantiate_req_descriptor_;
}

const fmi2_import_instantiate_req& fmi2_import_instantiate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_instantiate_req* fmi2_import_instantiate_req::default_instance_ = NULL;

fmi2_import_instantiate_req* fmi2_import_instantiate_req::New() const {
  return new fmi2_import_instantiate_req;
}

void fmi2_import_instantiate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_instantiate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // optional bool visible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_instantiate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_instantiate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // optional bool visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_instantiate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_instantiate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_instantiate_req::MergeFrom(const fmi2_import_instantiate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_instantiate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_instantiate_req::CopyFrom(const fmi2_import_instantiate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_instantiate_req::Swap(fmi2_import_instantiate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_instantiate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_instantiate_req_descriptor_;
  metadata.reflection = fmi2_import_instantiate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_res::kMessageIdFieldNumber;
const int fmi2_import_instantiate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_res::fmi2_import_instantiate_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_instantiate_res::InitAsDefaultInstance() {
}

fmi2_import_instantiate_res::fmi2_import_instantiate_res(const fmi2_import_instantiate_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_res::~fmi2_import_instantiate_res() {
  SharedDtor();
}

void fmi2_import_instantiate_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_instantiate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_instantiate_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_instantiate_res_descriptor_;
}

const fmi2_import_instantiate_res& fmi2_import_instantiate_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_instantiate_res* fmi2_import_instantiate_res::default_instance_ = NULL;

fmi2_import_instantiate_res* fmi2_import_instantiate_res::New() const {
  return new fmi2_import_instantiate_res;
}

void fmi2_import_instantiate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_instantiate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.jm_status_enu_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_status_enu_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::jm_status_enu_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_instantiate_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_instantiate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_status_enu_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_instantiate_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_instantiate_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_instantiate_res::MergeFrom(const fmi2_import_instantiate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_instantiate_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_instantiate_res::CopyFrom(const fmi2_import_instantiate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_instantiate_res::Swap(fmi2_import_instantiate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_instantiate_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_instantiate_res_descriptor_;
  metadata.reflection = fmi2_import_instantiate_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_slave_req::kMessageIdFieldNumber;
const int fmi2_import_initialize_slave_req::kFmuIdFieldNumber;
const int fmi2_import_initialize_slave_req::kToleranceDefinedFieldNumber;
const int fmi2_import_initialize_slave_req::kToleranceFieldNumber;
const int fmi2_import_initialize_slave_req::kStartTimeFieldNumber;
const int fmi2_import_initialize_slave_req::kStopTimeDefinedFieldNumber;
const int fmi2_import_initialize_slave_req::kStopTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_slave_req::fmi2_import_initialize_slave_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_initialize_slave_req::InitAsDefaultInstance() {
}

fmi2_import_initialize_slave_req::fmi2_import_initialize_slave_req(const fmi2_import_initialize_slave_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  tolerancedefined_ = false;
  tolerance_ = 0;
  starttime_ = 0;
  stoptimedefined_ = false;
  stoptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_slave_req::~fmi2_import_initialize_slave_req() {
  SharedDtor();
}

void fmi2_import_initialize_slave_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_initialize_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_initialize_slave_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_initialize_slave_req_descriptor_;
}

const fmi2_import_initialize_slave_req& fmi2_import_initialize_slave_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_initialize_slave_req* fmi2_import_initialize_slave_req::default_instance_ = NULL;

fmi2_import_initialize_slave_req* fmi2_import_initialize_slave_req::New() const {
  return new fmi2_import_initialize_slave_req;
}

void fmi2_import_initialize_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    tolerancedefined_ = false;
    tolerance_ = 0;
    starttime_ = 0;
    stoptimedefined_ = false;
    stoptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_initialize_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toleranceDefined;
        break;
      }

      // required bool toleranceDefined = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toleranceDefined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tolerancedefined_)));
          set_has_tolerancedefined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_tolerance;
        break;
      }

      // required double tolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_startTime;
        break;
      }

      // required double startTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stopTimeDefined;
        break;
      }

      // required bool stopTimeDefined = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopTimeDefined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stoptimedefined_)));
          set_has_stoptimedefined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_stopTime;
        break;
      }

      // required double stopTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool toleranceDefined = 3;
  if (has_tolerancedefined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tolerancedefined(), output);
  }

  // required double tolerance = 4;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tolerance(), output);
  }

  // required double startTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->starttime(), output);
  }

  // required bool stopTimeDefined = 6;
  if (has_stoptimedefined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stoptimedefined(), output);
  }

  // required double stopTime = 7;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stoptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_initialize_slave_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required bool toleranceDefined = 3;
  if (has_tolerancedefined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tolerancedefined(), target);
  }

  // required double tolerance = 4;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tolerance(), target);
  }

  // required double startTime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->starttime(), target);
  }

  // required bool stopTimeDefined = 6;
  if (has_stoptimedefined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stoptimedefined(), target);
  }

  // required double stopTime = 7;
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stoptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_initialize_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool toleranceDefined = 3;
    if (has_tolerancedefined()) {
      total_size += 1 + 1;
    }

    // required double tolerance = 4;
    if (has_tolerance()) {
      total_size += 1 + 8;
    }

    // required double startTime = 5;
    if (has_starttime()) {
      total_size += 1 + 8;
    }

    // required bool stopTimeDefined = 6;
    if (has_stoptimedefined()) {
      total_size += 1 + 1;
    }

    // required double stopTime = 7;
    if (has_stoptime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_slave_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_initialize_slave_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_initialize_slave_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_initialize_slave_req::MergeFrom(const fmi2_import_initialize_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_tolerancedefined()) {
      set_tolerancedefined(from.tolerancedefined());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptimedefined()) {
      set_stoptimedefined(from.stoptimedefined());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_initialize_slave_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_req::CopyFrom(const fmi2_import_initialize_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void fmi2_import_initialize_slave_req::Swap(fmi2_import_initialize_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(tolerancedefined_, other->tolerancedefined_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptimedefined_, other->stoptimedefined_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_initialize_slave_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_initialize_slave_req_descriptor_;
  metadata.reflection = fmi2_import_initialize_slave_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_slave_res::kMessageIdFieldNumber;
const int fmi2_import_initialize_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_slave_res::fmi2_import_initialize_slave_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_initialize_slave_res::InitAsDefaultInstance() {
}

fmi2_import_initialize_slave_res::fmi2_import_initialize_slave_res(const fmi2_import_initialize_slave_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_slave_res::~fmi2_import_initialize_slave_res() {
  SharedDtor();
}

void fmi2_import_initialize_slave_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_initialize_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_initialize_slave_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_initialize_slave_res_descriptor_;
}

const fmi2_import_initialize_slave_res& fmi2_import_initialize_slave_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_initialize_slave_res* fmi2_import_initialize_slave_res::default_instance_ = NULL;

fmi2_import_initialize_slave_res* fmi2_import_initialize_slave_res::New() const {
  return new fmi2_import_initialize_slave_res;
}

void fmi2_import_initialize_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_initialize_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_initialize_slave_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_initialize_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_slave_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_initialize_slave_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_initialize_slave_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_initialize_slave_res::MergeFrom(const fmi2_import_initialize_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_initialize_slave_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_res::CopyFrom(const fmi2_import_initialize_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_initialize_slave_res::Swap(fmi2_import_initialize_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_initialize_slave_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_initialize_slave_res_descriptor_;
  metadata.reflection = fmi2_import_initialize_slave_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_slave_req::kMessageIdFieldNumber;
const int fmi2_import_terminate_slave_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_slave_req::fmi2_import_terminate_slave_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_terminate_slave_req::InitAsDefaultInstance() {
}

fmi2_import_terminate_slave_req::fmi2_import_terminate_slave_req(const fmi2_import_terminate_slave_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_slave_req::~fmi2_import_terminate_slave_req() {
  SharedDtor();
}

void fmi2_import_terminate_slave_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_terminate_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_terminate_slave_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_terminate_slave_req_descriptor_;
}

const fmi2_import_terminate_slave_req& fmi2_import_terminate_slave_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_terminate_slave_req* fmi2_import_terminate_slave_req::default_instance_ = NULL;

fmi2_import_terminate_slave_req* fmi2_import_terminate_slave_req::New() const {
  return new fmi2_import_terminate_slave_req;
}

void fmi2_import_terminate_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_terminate_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_terminate_slave_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_terminate_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_slave_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_terminate_slave_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_terminate_slave_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_terminate_slave_req::MergeFrom(const fmi2_import_terminate_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_terminate_slave_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_req::CopyFrom(const fmi2_import_terminate_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_slave_req::Swap(fmi2_import_terminate_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_terminate_slave_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_terminate_slave_req_descriptor_;
  metadata.reflection = fmi2_import_terminate_slave_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_slave_res::kMessageIdFieldNumber;
const int fmi2_import_terminate_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_slave_res::fmi2_import_terminate_slave_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_terminate_slave_res::InitAsDefaultInstance() {
}

fmi2_import_terminate_slave_res::fmi2_import_terminate_slave_res(const fmi2_import_terminate_slave_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_slave_res::~fmi2_import_terminate_slave_res() {
  SharedDtor();
}

void fmi2_import_terminate_slave_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_terminate_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_terminate_slave_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_terminate_slave_res_descriptor_;
}

const fmi2_import_terminate_slave_res& fmi2_import_terminate_slave_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_terminate_slave_res* fmi2_import_terminate_slave_res::default_instance_ = NULL;

fmi2_import_terminate_slave_res* fmi2_import_terminate_slave_res::New() const {
  return new fmi2_import_terminate_slave_res;
}

void fmi2_import_terminate_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_terminate_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_terminate_slave_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_terminate_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_slave_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_terminate_slave_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_terminate_slave_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_terminate_slave_res::MergeFrom(const fmi2_import_terminate_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_terminate_slave_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_res::CopyFrom(const fmi2_import_terminate_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_slave_res::Swap(fmi2_import_terminate_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_terminate_slave_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_terminate_slave_res_descriptor_;
  metadata.reflection = fmi2_import_terminate_slave_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_reset_slave_req::kMessageIdFieldNumber;
const int fmi2_import_reset_slave_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_reset_slave_req::fmi2_import_reset_slave_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_reset_slave_req::InitAsDefaultInstance() {
}

fmi2_import_reset_slave_req::fmi2_import_reset_slave_req(const fmi2_import_reset_slave_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_reset_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_reset_slave_req::~fmi2_import_reset_slave_req() {
  SharedDtor();
}

void fmi2_import_reset_slave_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_reset_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_reset_slave_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_reset_slave_req_descriptor_;
}

const fmi2_import_reset_slave_req& fmi2_import_reset_slave_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_reset_slave_req* fmi2_import_reset_slave_req::default_instance_ = NULL;

fmi2_import_reset_slave_req* fmi2_import_reset_slave_req::New() const {
  return new fmi2_import_reset_slave_req;
}

void fmi2_import_reset_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_reset_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_reset_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_reset_slave_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_reset_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_reset_slave_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_reset_slave_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_reset_slave_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_reset_slave_req::MergeFrom(const fmi2_import_reset_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_reset_slave_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_reset_slave_req::CopyFrom(const fmi2_import_reset_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_reset_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_reset_slave_req::Swap(fmi2_import_reset_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_reset_slave_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_reset_slave_req_descriptor_;
  metadata.reflection = fmi2_import_reset_slave_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_reset_slave_res::kMessageIdFieldNumber;
const int fmi2_import_reset_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_reset_slave_res::fmi2_import_reset_slave_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_reset_slave_res::InitAsDefaultInstance() {
}

fmi2_import_reset_slave_res::fmi2_import_reset_slave_res(const fmi2_import_reset_slave_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_reset_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_reset_slave_res::~fmi2_import_reset_slave_res() {
  SharedDtor();
}

void fmi2_import_reset_slave_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_reset_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_reset_slave_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_reset_slave_res_descriptor_;
}

const fmi2_import_reset_slave_res& fmi2_import_reset_slave_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_reset_slave_res* fmi2_import_reset_slave_res::default_instance_ = NULL;

fmi2_import_reset_slave_res* fmi2_import_reset_slave_res::New() const {
  return new fmi2_import_reset_slave_res;
}

void fmi2_import_reset_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_reset_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_reset_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_reset_slave_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_reset_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_reset_slave_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_reset_slave_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_reset_slave_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_reset_slave_res::MergeFrom(const fmi2_import_reset_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_reset_slave_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_reset_slave_res::CopyFrom(const fmi2_import_reset_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_reset_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_reset_slave_res::Swap(fmi2_import_reset_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_reset_slave_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_reset_slave_res_descriptor_;
  metadata.reflection = fmi2_import_reset_slave_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_slave_instance_req::kMessageIdFieldNumber;
const int fmi2_import_free_slave_instance_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_slave_instance_req::fmi2_import_free_slave_instance_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_slave_instance_req::InitAsDefaultInstance() {
}

fmi2_import_free_slave_instance_req::fmi2_import_free_slave_instance_req(const fmi2_import_free_slave_instance_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_slave_instance_req::~fmi2_import_free_slave_instance_req() {
  SharedDtor();
}

void fmi2_import_free_slave_instance_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_slave_instance_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_slave_instance_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_slave_instance_req_descriptor_;
}

const fmi2_import_free_slave_instance_req& fmi2_import_free_slave_instance_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_slave_instance_req* fmi2_import_free_slave_instance_req::default_instance_ = NULL;

fmi2_import_free_slave_instance_req* fmi2_import_free_slave_instance_req::New() const {
  return new fmi2_import_free_slave_instance_req;
}

void fmi2_import_free_slave_instance_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_slave_instance_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_slave_instance_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_slave_instance_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_slave_instance_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_slave_instance_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_slave_instance_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_slave_instance_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_slave_instance_req::MergeFrom(const fmi2_import_free_slave_instance_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_slave_instance_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_req::CopyFrom(const fmi2_import_free_slave_instance_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_slave_instance_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_slave_instance_req::Swap(fmi2_import_free_slave_instance_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_slave_instance_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_slave_instance_req_descriptor_;
  metadata.reflection = fmi2_import_free_slave_instance_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_slave_instance_res::kMessageIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_slave_instance_res::fmi2_import_free_slave_instance_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_slave_instance_res::InitAsDefaultInstance() {
}

fmi2_import_free_slave_instance_res::fmi2_import_free_slave_instance_res(const fmi2_import_free_slave_instance_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_slave_instance_res::~fmi2_import_free_slave_instance_res() {
  SharedDtor();
}

void fmi2_import_free_slave_instance_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_slave_instance_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_slave_instance_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_slave_instance_res_descriptor_;
}

const fmi2_import_free_slave_instance_res& fmi2_import_free_slave_instance_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_slave_instance_res* fmi2_import_free_slave_instance_res::default_instance_ = NULL;

fmi2_import_free_slave_instance_res* fmi2_import_free_slave_instance_res::New() const {
  return new fmi2_import_free_slave_instance_res;
}

void fmi2_import_free_slave_instance_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_slave_instance_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_slave_instance_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_slave_instance_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_slave_instance_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_slave_instance_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_slave_instance_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_slave_instance_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_slave_instance_res::MergeFrom(const fmi2_import_free_slave_instance_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_slave_instance_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_res::CopyFrom(const fmi2_import_free_slave_instance_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_slave_instance_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_free_slave_instance_res::Swap(fmi2_import_free_slave_instance_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_slave_instance_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_slave_instance_res_descriptor_;
  metadata.reflection = fmi2_import_free_slave_instance_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_input_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kFmuIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kValueReferencesFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kOrdersFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_input_derivatives_req::fmi2_import_set_real_input_derivatives_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_real_input_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_set_real_input_derivatives_req::fmi2_import_set_real_input_derivatives_req(const fmi2_import_set_real_input_derivatives_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_input_derivatives_req::~fmi2_import_set_real_input_derivatives_req() {
  SharedDtor();
}

void fmi2_import_set_real_input_derivatives_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_real_input_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_real_input_derivatives_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_real_input_derivatives_req_descriptor_;
}

const fmi2_import_set_real_input_derivatives_req& fmi2_import_set_real_input_derivatives_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_real_input_derivatives_req* fmi2_import_set_real_input_derivatives_req::default_instance_ = NULL;

fmi2_import_set_real_input_derivatives_req* fmi2_import_set_real_input_derivatives_req::New() const {
  return new fmi2_import_set_real_input_derivatives_req;
}

void fmi2_import_set_real_input_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  orders_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_real_input_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_orders;
        break;
      }

      // repeated int32 orders = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_orders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_orders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orders;
        if (input->ExpectTag(41)) goto parse_values;
        break;
      }

      // repeated double values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_input_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->orders(i), output);
  }

  // repeated double values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_real_input_derivatives_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->orders(i), target);
  }

  // repeated double values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_real_input_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 orders = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->orders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->orders(i));
    }
    total_size += 1 * this->orders_size() + data_size;
  }

  // repeated double values = 5;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_input_derivatives_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_real_input_derivatives_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_real_input_derivatives_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_real_input_derivatives_req::MergeFrom(const fmi2_import_set_real_input_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  orders_.MergeFrom(from.orders_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_real_input_derivatives_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_req::CopyFrom(const fmi2_import_set_real_input_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_input_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_input_derivatives_req::Swap(fmi2_import_set_real_input_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    orders_.Swap(&other->orders_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_real_input_derivatives_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_real_input_derivatives_req_descriptor_;
  metadata.reflection = fmi2_import_set_real_input_derivatives_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_input_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_input_derivatives_res::fmi2_import_set_real_input_derivatives_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_real_input_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_set_real_input_derivatives_res::fmi2_import_set_real_input_derivatives_res(const fmi2_import_set_real_input_derivatives_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_input_derivatives_res::~fmi2_import_set_real_input_derivatives_res() {
  SharedDtor();
}

void fmi2_import_set_real_input_derivatives_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_real_input_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_real_input_derivatives_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_real_input_derivatives_res_descriptor_;
}

const fmi2_import_set_real_input_derivatives_res& fmi2_import_set_real_input_derivatives_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_real_input_derivatives_res* fmi2_import_set_real_input_derivatives_res::default_instance_ = NULL;

fmi2_import_set_real_input_derivatives_res* fmi2_import_set_real_input_derivatives_res::New() const {
  return new fmi2_import_set_real_input_derivatives_res;
}

void fmi2_import_set_real_input_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_real_input_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_input_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_real_input_derivatives_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_real_input_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_input_derivatives_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_real_input_derivatives_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_real_input_derivatives_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_real_input_derivatives_res::MergeFrom(const fmi2_import_set_real_input_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_real_input_derivatives_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_res::CopyFrom(const fmi2_import_set_real_input_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_input_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_input_derivatives_res::Swap(fmi2_import_set_real_input_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_real_input_derivatives_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_real_input_derivatives_res_descriptor_;
  metadata.reflection = fmi2_import_set_real_input_derivatives_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_output_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kValueReferencesFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kOrdersFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_output_derivatives_req::fmi2_import_get_real_output_derivatives_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_output_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_output_derivatives_req::fmi2_import_get_real_output_derivatives_req(const fmi2_import_get_real_output_derivatives_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_output_derivatives_req::~fmi2_import_get_real_output_derivatives_req() {
  SharedDtor();
}

void fmi2_import_get_real_output_derivatives_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_output_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_output_derivatives_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_output_derivatives_req_descriptor_;
}

const fmi2_import_get_real_output_derivatives_req& fmi2_import_get_real_output_derivatives_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_output_derivatives_req* fmi2_import_get_real_output_derivatives_req::default_instance_ = NULL;

fmi2_import_get_real_output_derivatives_req* fmi2_import_get_real_output_derivatives_req::New() const {
  return new fmi2_import_get_real_output_derivatives_req;
}

void fmi2_import_get_real_output_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_output_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_orders;
        break;
      }

      // repeated int32 orders = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_orders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_orders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_output_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_output_derivatives_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_output_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 orders = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->orders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->orders(i));
    }
    total_size += 1 * this->orders_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_output_derivatives_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_output_derivatives_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_output_derivatives_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_output_derivatives_req::MergeFrom(const fmi2_import_get_real_output_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_output_derivatives_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_req::CopyFrom(const fmi2_import_get_real_output_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_output_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_output_derivatives_req::Swap(fmi2_import_get_real_output_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_output_derivatives_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_output_derivatives_req_descriptor_;
  metadata.reflection = fmi2_import_get_real_output_derivatives_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_output_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_res::kStatusFieldNumber;
const int fmi2_import_get_real_output_derivatives_res::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_output_derivatives_res::fmi2_import_get_real_output_derivatives_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_output_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_output_derivatives_res::fmi2_import_get_real_output_derivatives_res(const fmi2_import_get_real_output_derivatives_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_output_derivatives_res::~fmi2_import_get_real_output_derivatives_res() {
  SharedDtor();
}

void fmi2_import_get_real_output_derivatives_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_output_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_output_derivatives_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_output_derivatives_res_descriptor_;
}

const fmi2_import_get_real_output_derivatives_res& fmi2_import_get_real_output_derivatives_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_output_derivatives_res* fmi2_import_get_real_output_derivatives_res::default_instance_ = NULL;

fmi2_import_get_real_output_derivatives_res* fmi2_import_get_real_output_derivatives_res::New() const {
  return new fmi2_import_get_real_output_derivatives_res;
}

void fmi2_import_get_real_output_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_output_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_values;
        break;
      }

      // repeated double values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_output_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated double values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_output_derivatives_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated double values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_output_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double values = 3;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_output_derivatives_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_output_derivatives_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_output_derivatives_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_output_derivatives_res::MergeFrom(const fmi2_import_get_real_output_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_output_derivatives_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_res::CopyFrom(const fmi2_import_get_real_output_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_output_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_output_derivatives_res::Swap(fmi2_import_get_real_output_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_output_derivatives_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_output_derivatives_res_descriptor_;
  metadata.reflection = fmi2_import_get_real_output_derivatives_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_cancel_step_req::kMessageIdFieldNumber;
const int fmi2_import_cancel_step_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_cancel_step_req::fmi2_import_cancel_step_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_cancel_step_req::InitAsDefaultInstance() {
}

fmi2_import_cancel_step_req::fmi2_import_cancel_step_req(const fmi2_import_cancel_step_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_cancel_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_cancel_step_req::~fmi2_import_cancel_step_req() {
  SharedDtor();
}

void fmi2_import_cancel_step_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_cancel_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_cancel_step_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_cancel_step_req_descriptor_;
}

const fmi2_import_cancel_step_req& fmi2_import_cancel_step_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_cancel_step_req* fmi2_import_cancel_step_req::default_instance_ = NULL;

fmi2_import_cancel_step_req* fmi2_import_cancel_step_req::New() const {
  return new fmi2_import_cancel_step_req;
}

void fmi2_import_cancel_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_cancel_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_cancel_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_cancel_step_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_cancel_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_cancel_step_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_cancel_step_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_cancel_step_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_cancel_step_req::MergeFrom(const fmi2_import_cancel_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_cancel_step_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_cancel_step_req::CopyFrom(const fmi2_import_cancel_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_cancel_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_cancel_step_req::Swap(fmi2_import_cancel_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_cancel_step_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_cancel_step_req_descriptor_;
  metadata.reflection = fmi2_import_cancel_step_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_cancel_step_res::kMessageIdFieldNumber;
const int fmi2_import_cancel_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_cancel_step_res::fmi2_import_cancel_step_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_cancel_step_res::InitAsDefaultInstance() {
}

fmi2_import_cancel_step_res::fmi2_import_cancel_step_res(const fmi2_import_cancel_step_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_cancel_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_cancel_step_res::~fmi2_import_cancel_step_res() {
  SharedDtor();
}

void fmi2_import_cancel_step_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_cancel_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_cancel_step_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_cancel_step_res_descriptor_;
}

const fmi2_import_cancel_step_res& fmi2_import_cancel_step_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_cancel_step_res* fmi2_import_cancel_step_res::default_instance_ = NULL;

fmi2_import_cancel_step_res* fmi2_import_cancel_step_res::New() const {
  return new fmi2_import_cancel_step_res;
}

void fmi2_import_cancel_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_cancel_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_cancel_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_cancel_step_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_cancel_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_cancel_step_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_cancel_step_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_cancel_step_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_cancel_step_res::MergeFrom(const fmi2_import_cancel_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_cancel_step_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_cancel_step_res::CopyFrom(const fmi2_import_cancel_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_cancel_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_cancel_step_res::Swap(fmi2_import_cancel_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_cancel_step_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_cancel_step_res_descriptor_;
  metadata.reflection = fmi2_import_cancel_step_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_do_step_req::kMessageIdFieldNumber;
const int fmi2_import_do_step_req::kFmuIdFieldNumber;
const int fmi2_import_do_step_req::kCurrentCommunicationPointFieldNumber;
const int fmi2_import_do_step_req::kCommunicationStepSizeFieldNumber;
const int fmi2_import_do_step_req::kNewStepFieldNumber;
#endif  // !_MSC_VER

fmi2_import_do_step_req::fmi2_import_do_step_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_do_step_req::InitAsDefaultInstance() {
}

fmi2_import_do_step_req::fmi2_import_do_step_req(const fmi2_import_do_step_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_do_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  currentcommunicationpoint_ = 0;
  communicationstepsize_ = 0;
  newstep_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_do_step_req::~fmi2_import_do_step_req() {
  SharedDtor();
}

void fmi2_import_do_step_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_do_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_do_step_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_do_step_req_descriptor_;
}

const fmi2_import_do_step_req& fmi2_import_do_step_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_do_step_req* fmi2_import_do_step_req::default_instance_ = NULL;

fmi2_import_do_step_req* fmi2_import_do_step_req::New() const {
  return new fmi2_import_do_step_req;
}

void fmi2_import_do_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    currentcommunicationpoint_ = 0;
    communicationstepsize_ = 0;
    newstep_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_do_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currentCommunicationPoint;
        break;
      }

      // required double currentCommunicationPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentCommunicationPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentcommunicationpoint_)));
          set_has_currentcommunicationpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_communicationStepSize;
        break;
      }

      // required double communicationStepSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_communicationStepSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &communicationstepsize_)));
          set_has_communicationstepsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newStep;
        break;
      }

      // required bool newStep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newstep_)));
          set_has_newstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_do_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required double currentCommunicationPoint = 3;
  if (has_currentcommunicationpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->currentcommunicationpoint(), output);
  }

  // required double communicationStepSize = 4;
  if (has_communicationstepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->communicationstepsize(), output);
  }

  // required bool newStep = 5;
  if (has_newstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->newstep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_do_step_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required double currentCommunicationPoint = 3;
  if (has_currentcommunicationpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->currentcommunicationpoint(), target);
  }

  // required double communicationStepSize = 4;
  if (has_communicationstepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->communicationstepsize(), target);
  }

  // required bool newStep = 5;
  if (has_newstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->newstep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_do_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required double currentCommunicationPoint = 3;
    if (has_currentcommunicationpoint()) {
      total_size += 1 + 8;
    }

    // required double communicationStepSize = 4;
    if (has_communicationstepsize()) {
      total_size += 1 + 8;
    }

    // required bool newStep = 5;
    if (has_newstep()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_do_step_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_do_step_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_do_step_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_do_step_req::MergeFrom(const fmi2_import_do_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_currentcommunicationpoint()) {
      set_currentcommunicationpoint(from.currentcommunicationpoint());
    }
    if (from.has_communicationstepsize()) {
      set_communicationstepsize(from.communicationstepsize());
    }
    if (from.has_newstep()) {
      set_newstep(from.newstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_do_step_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_do_step_req::CopyFrom(const fmi2_import_do_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_do_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void fmi2_import_do_step_req::Swap(fmi2_import_do_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(currentcommunicationpoint_, other->currentcommunicationpoint_);
    std::swap(communicationstepsize_, other->communicationstepsize_);
    std::swap(newstep_, other->newstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_do_step_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_do_step_req_descriptor_;
  metadata.reflection = fmi2_import_do_step_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_do_step_res::kMessageIdFieldNumber;
const int fmi2_import_do_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_do_step_res::fmi2_import_do_step_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_do_step_res::InitAsDefaultInstance() {
}

fmi2_import_do_step_res::fmi2_import_do_step_res(const fmi2_import_do_step_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_do_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_do_step_res::~fmi2_import_do_step_res() {
  SharedDtor();
}

void fmi2_import_do_step_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_do_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_do_step_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_do_step_res_descriptor_;
}

const fmi2_import_do_step_res& fmi2_import_do_step_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_do_step_res* fmi2_import_do_step_res::default_instance_ = NULL;

fmi2_import_do_step_res* fmi2_import_do_step_res::New() const {
  return new fmi2_import_do_step_res;
}

void fmi2_import_do_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_do_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_do_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_do_step_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_do_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_do_step_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_do_step_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_do_step_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_do_step_res::MergeFrom(const fmi2_import_do_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_do_step_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_do_step_res::CopyFrom(const fmi2_import_do_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_do_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_do_step_res::Swap(fmi2_import_do_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_do_step_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_do_step_res_descriptor_;
  metadata.reflection = fmi2_import_do_step_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_status_req::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_status_req::fmi2_import_get_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_status_req::fmi2_import_get_status_req(const fmi2_import_get_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_status_req::~fmi2_import_get_status_req() {
  SharedDtor();
}

void fmi2_import_get_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_status_req_descriptor_;
}

const fmi2_import_get_status_req& fmi2_import_get_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_status_req* fmi2_import_get_status_req::default_instance_ = NULL;

fmi2_import_get_status_req* fmi2_import_get_status_req::New() const {
  return new fmi2_import_get_status_req;
}

void fmi2_import_get_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required .fmitcp_proto.fmi2_status_kind_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_status_req::MergeFrom(const fmi2_import_get_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_status_req::CopyFrom(const fmi2_import_get_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_status_req::Swap(fmi2_import_get_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_status_req_descriptor_;
  metadata.reflection = fmi2_import_get_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_status_res::fmi2_import_get_status_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_status_res::fmi2_import_get_status_res(const fmi2_import_get_status_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_status_res::~fmi2_import_get_status_res() {
  SharedDtor();
}

void fmi2_import_get_status_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_status_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_status_res_descriptor_;
}

const fmi2_import_get_status_res& fmi2_import_get_status_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_status_res* fmi2_import_get_status_res::default_instance_ = NULL;

fmi2_import_get_status_res* fmi2_import_get_status_res::New() const {
  return new fmi2_import_get_status_res;
}

void fmi2_import_get_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_value(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_status_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_status_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_status_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_status_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_status_res::MergeFrom(const fmi2_import_get_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_status_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_status_res::CopyFrom(const fmi2_import_get_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_status_res::Swap(fmi2_import_get_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_status_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_status_res_descriptor_;
  metadata.reflection = fmi2_import_get_status_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_status_req::fmi2_import_get_real_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_status_req::fmi2_import_get_real_status_req(const fmi2_import_get_real_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_status_req::~fmi2_import_get_real_status_req() {
  SharedDtor();
}

void fmi2_import_get_real_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_status_req_descriptor_;
}

const fmi2_import_get_real_status_req& fmi2_import_get_real_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_status_req* fmi2_import_get_real_status_req::default_instance_ = NULL;

fmi2_import_get_real_status_req* fmi2_import_get_real_status_req::New() const {
  return new fmi2_import_get_real_status_req;
}

void fmi2_import_get_real_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_status_req::MergeFrom(const fmi2_import_get_real_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_status_req::CopyFrom(const fmi2_import_get_real_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_real_status_req::Swap(fmi2_import_get_real_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_status_req_descriptor_;
  metadata.reflection = fmi2_import_get_real_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_status_res::fmi2_import_get_real_status_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_status_res::fmi2_import_get_real_status_res(const fmi2_import_get_real_status_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_status_res::~fmi2_import_get_real_status_res() {
  SharedDtor();
}

void fmi2_import_get_real_status_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_status_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_status_res_descriptor_;
}

const fmi2_import_get_real_status_res& fmi2_import_get_real_status_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_status_res* fmi2_import_get_real_status_res::default_instance_ = NULL;

fmi2_import_get_real_status_res* fmi2_import_get_real_status_res::New() const {
  return new fmi2_import_get_real_status_res;
}

void fmi2_import_get_real_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_status_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_status_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_status_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_status_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_status_res::MergeFrom(const fmi2_import_get_real_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_status_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_status_res::CopyFrom(const fmi2_import_get_real_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_status_res::Swap(fmi2_import_get_real_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_status_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_status_res_descriptor_;
  metadata.reflection = fmi2_import_get_real_status_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_integer_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_integer_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_status_req::fmi2_import_get_integer_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_integer_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_integer_status_req::fmi2_import_get_integer_status_req(const fmi2_import_get_integer_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_status_req::~fmi2_import_get_integer_status_req() {
  SharedDtor();
}

void fmi2_import_get_integer_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_integer_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_integer_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_integer_status_req_descriptor_;
}

const fmi2_import_get_integer_status_req& fmi2_import_get_integer_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_integer_status_req* fmi2_import_get_integer_status_req::default_instance_ = NULL;

fmi2_import_get_integer_status_req* fmi2_import_get_integer_status_req::New() const {
  return new fmi2_import_get_integer_status_req;
}

void fmi2_import_get_integer_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_integer_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_integer_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_integer_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_integer_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_integer_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_integer_status_req::MergeFrom(const fmi2_import_get_integer_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_integer_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_req::CopyFrom(const fmi2_import_get_integer_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_integer_status_req::Swap(fmi2_import_get_integer_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_integer_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_integer_status_req_descriptor_;
  metadata.reflection = fmi2_import_get_integer_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_integer_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_status_res::fmi2_import_get_integer_status_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_integer_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_integer_status_res::fmi2_import_get_integer_status_res(const fmi2_import_get_integer_status_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_status_res::~fmi2_import_get_integer_status_res() {
  SharedDtor();
}

void fmi2_import_get_integer_status_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_integer_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_integer_status_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_integer_status_res_descriptor_;
}

const fmi2_import_get_integer_status_res& fmi2_import_get_integer_status_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_integer_status_res* fmi2_import_get_integer_status_res::default_instance_ = NULL;

fmi2_import_get_integer_status_res* fmi2_import_get_integer_status_res::New() const {
  return new fmi2_import_get_integer_status_res;
}

void fmi2_import_get_integer_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_integer_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_integer_status_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_integer_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_status_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_integer_status_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_integer_status_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_integer_status_res::MergeFrom(const fmi2_import_get_integer_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_integer_status_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_res::CopyFrom(const fmi2_import_get_integer_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_integer_status_res::Swap(fmi2_import_get_integer_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_integer_status_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_integer_status_res_descriptor_;
  metadata.reflection = fmi2_import_get_integer_status_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_boolean_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_status_req::fmi2_import_get_boolean_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_boolean_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_status_req::fmi2_import_get_boolean_status_req(const fmi2_import_get_boolean_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_status_req::~fmi2_import_get_boolean_status_req() {
  SharedDtor();
}

void fmi2_import_get_boolean_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_boolean_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_boolean_status_req_descriptor_;
}

const fmi2_import_get_boolean_status_req& fmi2_import_get_boolean_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_boolean_status_req* fmi2_import_get_boolean_status_req::default_instance_ = NULL;

fmi2_import_get_boolean_status_req* fmi2_import_get_boolean_status_req::New() const {
  return new fmi2_import_get_boolean_status_req;
}

void fmi2_import_get_boolean_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_boolean_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_boolean_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_boolean_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_boolean_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_boolean_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_boolean_status_req::MergeFrom(const fmi2_import_get_boolean_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_boolean_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_req::CopyFrom(const fmi2_import_get_boolean_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_boolean_status_req::Swap(fmi2_import_get_boolean_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_boolean_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_boolean_status_req_descriptor_;
  metadata.reflection = fmi2_import_get_boolean_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_status_res::fmi2_import_get_boolean_status_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_boolean_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_status_res::fmi2_import_get_boolean_status_res(const fmi2_import_get_boolean_status_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_status_res::~fmi2_import_get_boolean_status_res() {
  SharedDtor();
}

void fmi2_import_get_boolean_status_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_boolean_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_status_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_boolean_status_res_descriptor_;
}

const fmi2_import_get_boolean_status_res& fmi2_import_get_boolean_status_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_boolean_status_res* fmi2_import_get_boolean_status_res::default_instance_ = NULL;

fmi2_import_get_boolean_status_res* fmi2_import_get_boolean_status_res::New() const {
  return new fmi2_import_get_boolean_status_res;
}

void fmi2_import_get_boolean_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_boolean_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_boolean_status_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_boolean_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_status_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_boolean_status_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_boolean_status_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_boolean_status_res::MergeFrom(const fmi2_import_get_boolean_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_boolean_status_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_res::CopyFrom(const fmi2_import_get_boolean_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_boolean_status_res::Swap(fmi2_import_get_boolean_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_boolean_status_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_boolean_status_res_descriptor_;
  metadata.reflection = fmi2_import_get_boolean_status_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_string_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_string_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_status_req::fmi2_import_get_string_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_string_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_string_status_req::fmi2_import_get_string_status_req(const fmi2_import_get_string_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_status_req::~fmi2_import_get_string_status_req() {
  SharedDtor();
}

void fmi2_import_get_string_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_string_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_string_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_string_status_req_descriptor_;
}

const fmi2_import_get_string_status_req& fmi2_import_get_string_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_string_status_req* fmi2_import_get_string_status_req::default_instance_ = NULL;

fmi2_import_get_string_status_req* fmi2_import_get_string_status_req::New() const {
  return new fmi2_import_get_string_status_req;
}

void fmi2_import_get_string_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_string_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_string_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_string_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_string_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_string_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_string_status_req::MergeFrom(const fmi2_import_get_string_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_string_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_string_status_req::CopyFrom(const fmi2_import_get_string_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_string_status_req::Swap(fmi2_import_get_string_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_string_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_string_status_req_descriptor_;
  metadata.reflection = fmi2_import_get_string_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_string_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_status_res::fmi2_import_get_string_status_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_string_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_string_status_res::fmi2_import_get_string_status_res(const fmi2_import_get_string_status_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_status_res::~fmi2_import_get_string_status_res() {
  SharedDtor();
}

void fmi2_import_get_string_status_res::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void fmi2_import_get_string_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_string_status_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_string_status_res_descriptor_;
}

const fmi2_import_get_string_status_res& fmi2_import_get_string_status_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_string_status_res* fmi2_import_get_string_status_res::default_instance_ = NULL;

fmi2_import_get_string_status_res* fmi2_import_get_string_status_res::New() const {
  return new fmi2_import_get_string_status_res;
}

void fmi2_import_get_string_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_string_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_string_status_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_string_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_status_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_string_status_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_string_status_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_string_status_res::MergeFrom(const fmi2_import_get_string_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_string_status_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_string_status_res::CopyFrom(const fmi2_import_get_string_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_string_status_res::Swap(fmi2_import_get_string_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_string_status_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_string_status_res_descriptor_;
  metadata.reflection = fmi2_import_get_string_status_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_model_req::kMessageIdFieldNumber;
const int fmi2_import_instantiate_model_req::kFmuIdFieldNumber;
const int fmi2_import_instantiate_model_req::kInstanceNameFieldNumber;
const int fmi2_import_instantiate_model_req::kResourceLocationFieldNumber;
const int fmi2_import_instantiate_model_req::kVisibleFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_model_req::fmi2_import_instantiate_model_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_instantiate_model_req::InitAsDefaultInstance() {
}

fmi2_import_instantiate_model_req::fmi2_import_instantiate_model_req(const fmi2_import_instantiate_model_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  instancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcelocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_model_req::~fmi2_import_instantiate_model_req() {
  SharedDtor();
}

void fmi2_import_instantiate_model_req::SharedDtor() {
  if (instancename_ != &::google::protobuf::internal::kEmptyString) {
    delete instancename_;
  }
  if (resourcelocation_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcelocation_;
  }
  if (this != default_instance_) {
  }
}

void fmi2_import_instantiate_model_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_instantiate_model_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_instantiate_model_req_descriptor_;
}

const fmi2_import_instantiate_model_req& fmi2_import_instantiate_model_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_instantiate_model_req* fmi2_import_instantiate_model_req::default_instance_ = NULL;

fmi2_import_instantiate_model_req* fmi2_import_instantiate_model_req::New() const {
  return new fmi2_import_instantiate_model_req;
}

void fmi2_import_instantiate_model_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    if (has_instancename()) {
      if (instancename_ != &::google::protobuf::internal::kEmptyString) {
        instancename_->clear();
      }
    }
    if (has_resourcelocation()) {
      if (resourcelocation_ != &::google::protobuf::internal::kEmptyString) {
        resourcelocation_->clear();
      }
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_instantiate_model_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instanceName;
        break;
      }

      // required string instanceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instancename().data(), this->instancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resourceLocation;
        break;
      }

      // required string resourceLocation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcelocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcelocation().data(), this->resourcelocation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_visible;
        break;
      }

      // optional bool visible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_model_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required string instanceName = 3;
  if (has_instancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instancename().data(), this->instancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instancename(), output);
  }

  // required string resourceLocation = 4;
  if (has_resourcelocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcelocation().data(), this->resourcelocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resourcelocation(), output);
  }

  // optional bool visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_instantiate_model_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required string instanceName = 3;
  if (has_instancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instancename().data(), this->instancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instancename(), target);
  }

  // required string resourceLocation = 4;
  if (has_resourcelocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcelocation().data(), this->resourcelocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resourcelocation(), target);
  }

  // optional bool visible = 5;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_instantiate_model_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required string instanceName = 3;
    if (has_instancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancename());
    }

    // required string resourceLocation = 4;
    if (has_resourcelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcelocation());
    }

    // optional bool visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_model_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_instantiate_model_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_instantiate_model_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_instantiate_model_req::MergeFrom(const fmi2_import_instantiate_model_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_instancename()) {
      set_instancename(from.instancename());
    }
    if (from.has_resourcelocation()) {
      set_resourcelocation(from.resourcelocation());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_instantiate_model_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_req::CopyFrom(const fmi2_import_instantiate_model_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_model_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void fmi2_import_instantiate_model_req::Swap(fmi2_import_instantiate_model_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(instancename_, other->instancename_);
    std::swap(resourcelocation_, other->resourcelocation_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_instantiate_model_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_instantiate_model_req_descriptor_;
  metadata.reflection = fmi2_import_instantiate_model_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_model_res::kMessageIdFieldNumber;
const int fmi2_import_instantiate_model_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_model_res::fmi2_import_instantiate_model_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_instantiate_model_res::InitAsDefaultInstance() {
}

fmi2_import_instantiate_model_res::fmi2_import_instantiate_model_res(const fmi2_import_instantiate_model_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_model_res::~fmi2_import_instantiate_model_res() {
  SharedDtor();
}

void fmi2_import_instantiate_model_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_instantiate_model_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_instantiate_model_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_instantiate_model_res_descriptor_;
}

const fmi2_import_instantiate_model_res& fmi2_import_instantiate_model_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_instantiate_model_res* fmi2_import_instantiate_model_res::default_instance_ = NULL;

fmi2_import_instantiate_model_res* fmi2_import_instantiate_model_res::New() const {
  return new fmi2_import_instantiate_model_res;
}

void fmi2_import_instantiate_model_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_instantiate_model_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.jm_status_enu_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_status_enu_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::jm_status_enu_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_model_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_instantiate_model_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_instantiate_model_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_status_enu_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_model_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_instantiate_model_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_instantiate_model_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_instantiate_model_res::MergeFrom(const fmi2_import_instantiate_model_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_instantiate_model_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_res::CopyFrom(const fmi2_import_instantiate_model_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_model_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_instantiate_model_res::Swap(fmi2_import_instantiate_model_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_instantiate_model_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_instantiate_model_res_descriptor_;
  metadata.reflection = fmi2_import_instantiate_model_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_model_instance_req::kMessageIdFieldNumber;
const int fmi2_import_free_model_instance_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_model_instance_req::fmi2_import_free_model_instance_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_model_instance_req::InitAsDefaultInstance() {
}

fmi2_import_free_model_instance_req::fmi2_import_free_model_instance_req(const fmi2_import_free_model_instance_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_model_instance_req::~fmi2_import_free_model_instance_req() {
  SharedDtor();
}

void fmi2_import_free_model_instance_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_model_instance_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_model_instance_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_model_instance_req_descriptor_;
}

const fmi2_import_free_model_instance_req& fmi2_import_free_model_instance_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_model_instance_req* fmi2_import_free_model_instance_req::default_instance_ = NULL;

fmi2_import_free_model_instance_req* fmi2_import_free_model_instance_req::New() const {
  return new fmi2_import_free_model_instance_req;
}

void fmi2_import_free_model_instance_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_model_instance_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_model_instance_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_model_instance_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_model_instance_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_model_instance_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_model_instance_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_model_instance_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_model_instance_req::MergeFrom(const fmi2_import_free_model_instance_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_model_instance_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_req::CopyFrom(const fmi2_import_free_model_instance_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_model_instance_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_model_instance_req::Swap(fmi2_import_free_model_instance_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_model_instance_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_model_instance_req_descriptor_;
  metadata.reflection = fmi2_import_free_model_instance_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_model_instance_res::kMessageIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_model_instance_res::fmi2_import_free_model_instance_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_model_instance_res::InitAsDefaultInstance() {
}

fmi2_import_free_model_instance_res::fmi2_import_free_model_instance_res(const fmi2_import_free_model_instance_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_model_instance_res::~fmi2_import_free_model_instance_res() {
  SharedDtor();
}

void fmi2_import_free_model_instance_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_model_instance_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_model_instance_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_model_instance_res_descriptor_;
}

const fmi2_import_free_model_instance_res& fmi2_import_free_model_instance_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_model_instance_res* fmi2_import_free_model_instance_res::default_instance_ = NULL;

fmi2_import_free_model_instance_res* fmi2_import_free_model_instance_res::New() const {
  return new fmi2_import_free_model_instance_res;
}

void fmi2_import_free_model_instance_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_model_instance_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_model_instance_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_model_instance_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_model_instance_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_model_instance_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_model_instance_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_model_instance_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_model_instance_res::MergeFrom(const fmi2_import_free_model_instance_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_model_instance_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_res::CopyFrom(const fmi2_import_free_model_instance_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_model_instance_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_free_model_instance_res::Swap(fmi2_import_free_model_instance_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_model_instance_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_model_instance_res_descriptor_;
  metadata.reflection = fmi2_import_free_model_instance_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_time_req::kMessageIdFieldNumber;
const int fmi2_import_set_time_req::kFmuIdFieldNumber;
const int fmi2_import_set_time_req::kTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_time_req::fmi2_import_set_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_time_req::InitAsDefaultInstance() {
}

fmi2_import_set_time_req::fmi2_import_set_time_req(const fmi2_import_set_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_time_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_time_req::~fmi2_import_set_time_req() {
  SharedDtor();
}

void fmi2_import_set_time_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_time_req_descriptor_;
}

const fmi2_import_set_time_req& fmi2_import_set_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_time_req* fmi2_import_set_time_req::default_instance_ = NULL;

fmi2_import_set_time_req* fmi2_import_set_time_req::New() const {
  return new fmi2_import_set_time_req;
}

void fmi2_import_set_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time;
        break;
      }

      // required double time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required double time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required double time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required double time = 3;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_time_req::MergeFrom(const fmi2_import_set_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_time_req::CopyFrom(const fmi2_import_set_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_time_req::Swap(fmi2_import_set_time_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_time_req_descriptor_;
  metadata.reflection = fmi2_import_set_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_time_res::kMessageIdFieldNumber;
const int fmi2_import_set_time_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_time_res::fmi2_import_set_time_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_time_res::InitAsDefaultInstance() {
}

fmi2_import_set_time_res::fmi2_import_set_time_res(const fmi2_import_set_time_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_time_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_time_res::~fmi2_import_set_time_res() {
  SharedDtor();
}

void fmi2_import_set_time_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_time_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_time_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_time_res_descriptor_;
}

const fmi2_import_set_time_res& fmi2_import_set_time_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_time_res* fmi2_import_set_time_res::default_instance_ = NULL;

fmi2_import_set_time_res* fmi2_import_set_time_res::New() const {
  return new fmi2_import_set_time_res;
}

void fmi2_import_set_time_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_time_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_time_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_time_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_time_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_time_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_time_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_time_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_time_res::MergeFrom(const fmi2_import_set_time_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_time_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_time_res::CopyFrom(const fmi2_import_set_time_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_time_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_time_res::Swap(fmi2_import_set_time_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_time_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_time_res_descriptor_;
  metadata.reflection = fmi2_import_set_time_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_set_continuous_states_req::kFmuIdFieldNumber;
const int fmi2_import_set_continuous_states_req::kXFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_continuous_states_req::fmi2_import_set_continuous_states_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_set_continuous_states_req::fmi2_import_set_continuous_states_req(const fmi2_import_set_continuous_states_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_continuous_states_req::~fmi2_import_set_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_set_continuous_states_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_continuous_states_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_continuous_states_req_descriptor_;
}

const fmi2_import_set_continuous_states_req& fmi2_import_set_continuous_states_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_continuous_states_req* fmi2_import_set_continuous_states_req::default_instance_ = NULL;

fmi2_import_set_continuous_states_req* fmi2_import_set_continuous_states_req::New() const {
  return new fmi2_import_set_continuous_states_req;
}

void fmi2_import_set_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // repeated double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated double x = 3;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->x(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_continuous_states_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated double x = 3;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->x(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated double x = 3;
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_continuous_states_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_continuous_states_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_continuous_states_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_continuous_states_req::MergeFrom(const fmi2_import_set_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_continuous_states_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_req::CopyFrom(const fmi2_import_set_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_continuous_states_req::Swap(fmi2_import_set_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    x_.Swap(&other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_continuous_states_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_continuous_states_req_descriptor_;
  metadata.reflection = fmi2_import_set_continuous_states_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_set_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_continuous_states_res::fmi2_import_set_continuous_states_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_set_continuous_states_res::fmi2_import_set_continuous_states_res(const fmi2_import_set_continuous_states_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_continuous_states_res::~fmi2_import_set_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_set_continuous_states_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_continuous_states_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_continuous_states_res_descriptor_;
}

const fmi2_import_set_continuous_states_res& fmi2_import_set_continuous_states_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_continuous_states_res* fmi2_import_set_continuous_states_res::default_instance_ = NULL;

fmi2_import_set_continuous_states_res* fmi2_import_set_continuous_states_res::New() const {
  return new fmi2_import_set_continuous_states_res;
}

void fmi2_import_set_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_continuous_states_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_continuous_states_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_continuous_states_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_continuous_states_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_continuous_states_res::MergeFrom(const fmi2_import_set_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_continuous_states_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_res::CopyFrom(const fmi2_import_set_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_continuous_states_res::Swap(fmi2_import_set_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_continuous_states_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_continuous_states_res_descriptor_;
  metadata.reflection = fmi2_import_set_continuous_states_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_integrator_step_req::kMessageIdFieldNumber;
const int fmi2_import_completed_integrator_step_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_integrator_step_req::fmi2_import_completed_integrator_step_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_completed_integrator_step_req::InitAsDefaultInstance() {
}

fmi2_import_completed_integrator_step_req::fmi2_import_completed_integrator_step_req(const fmi2_import_completed_integrator_step_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_integrator_step_req::~fmi2_import_completed_integrator_step_req() {
  SharedDtor();
}

void fmi2_import_completed_integrator_step_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_completed_integrator_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_completed_integrator_step_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_completed_integrator_step_req_descriptor_;
}

const fmi2_import_completed_integrator_step_req& fmi2_import_completed_integrator_step_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_completed_integrator_step_req* fmi2_import_completed_integrator_step_req::default_instance_ = NULL;

fmi2_import_completed_integrator_step_req* fmi2_import_completed_integrator_step_req::New() const {
  return new fmi2_import_completed_integrator_step_req;
}

void fmi2_import_completed_integrator_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_completed_integrator_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_integrator_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_completed_integrator_step_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_completed_integrator_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_integrator_step_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_completed_integrator_step_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_completed_integrator_step_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_completed_integrator_step_req::MergeFrom(const fmi2_import_completed_integrator_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_completed_integrator_step_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_req::CopyFrom(const fmi2_import_completed_integrator_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_integrator_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_integrator_step_req::Swap(fmi2_import_completed_integrator_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_completed_integrator_step_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_completed_integrator_step_req_descriptor_;
  metadata.reflection = fmi2_import_completed_integrator_step_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_integrator_step_res::kMessageIdFieldNumber;
const int fmi2_import_completed_integrator_step_res::kCallEventUpdateFieldNumber;
const int fmi2_import_completed_integrator_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_integrator_step_res::fmi2_import_completed_integrator_step_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_completed_integrator_step_res::InitAsDefaultInstance() {
}

fmi2_import_completed_integrator_step_res::fmi2_import_completed_integrator_step_res(const fmi2_import_completed_integrator_step_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  calleventupdate_ = false;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_integrator_step_res::~fmi2_import_completed_integrator_step_res() {
  SharedDtor();
}

void fmi2_import_completed_integrator_step_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_completed_integrator_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_completed_integrator_step_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_completed_integrator_step_res_descriptor_;
}

const fmi2_import_completed_integrator_step_res& fmi2_import_completed_integrator_step_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_completed_integrator_step_res* fmi2_import_completed_integrator_step_res::default_instance_ = NULL;

fmi2_import_completed_integrator_step_res* fmi2_import_completed_integrator_step_res::New() const {
  return new fmi2_import_completed_integrator_step_res;
}

void fmi2_import_completed_integrator_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    calleventupdate_ = false;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_completed_integrator_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_callEventUpdate;
        break;
      }

      // required bool callEventUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callEventUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calleventupdate_)));
          set_has_calleventupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_integrator_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required bool callEventUpdate = 2;
  if (has_calleventupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->calleventupdate(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_completed_integrator_step_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required bool callEventUpdate = 2;
  if (has_calleventupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->calleventupdate(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_completed_integrator_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required bool callEventUpdate = 2;
    if (has_calleventupdate()) {
      total_size += 1 + 1;
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_integrator_step_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_completed_integrator_step_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_completed_integrator_step_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_completed_integrator_step_res::MergeFrom(const fmi2_import_completed_integrator_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_calleventupdate()) {
      set_calleventupdate(from.calleventupdate());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_completed_integrator_step_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_res::CopyFrom(const fmi2_import_completed_integrator_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_integrator_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_completed_integrator_step_res::Swap(fmi2_import_completed_integrator_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(calleventupdate_, other->calleventupdate_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_completed_integrator_step_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_completed_integrator_step_res_descriptor_;
  metadata.reflection = fmi2_import_completed_integrator_step_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_model_req::kMessageIdFieldNumber;
const int fmi2_import_initialize_model_req::kFmuIdFieldNumber;
const int fmi2_import_initialize_model_req::kToleranceControlledFieldNumber;
const int fmi2_import_initialize_model_req::kRelativeToleranceFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_model_req::fmi2_import_initialize_model_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_initialize_model_req::InitAsDefaultInstance() {
}

fmi2_import_initialize_model_req::fmi2_import_initialize_model_req(const fmi2_import_initialize_model_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_model_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  tolerancecontrolled_ = false;
  relativetolerance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_model_req::~fmi2_import_initialize_model_req() {
  SharedDtor();
}

void fmi2_import_initialize_model_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_initialize_model_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_initialize_model_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_initialize_model_req_descriptor_;
}

const fmi2_import_initialize_model_req& fmi2_import_initialize_model_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_initialize_model_req* fmi2_import_initialize_model_req::default_instance_ = NULL;

fmi2_import_initialize_model_req* fmi2_import_initialize_model_req::New() const {
  return new fmi2_import_initialize_model_req;
}

void fmi2_import_initialize_model_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    tolerancecontrolled_ = false;
    relativetolerance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_initialize_model_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toleranceControlled;
        break;
      }

      // required bool toleranceControlled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toleranceControlled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tolerancecontrolled_)));
          set_has_tolerancecontrolled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_relativeTolerance;
        break;
      }

      // required double relativeTolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relativeTolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relativetolerance_)));
          set_has_relativetolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_model_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool toleranceControlled = 3;
  if (has_tolerancecontrolled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tolerancecontrolled(), output);
  }

  // required double relativeTolerance = 4;
  if (has_relativetolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relativetolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_initialize_model_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required bool toleranceControlled = 3;
  if (has_tolerancecontrolled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tolerancecontrolled(), target);
  }

  // required double relativeTolerance = 4;
  if (has_relativetolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relativetolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_initialize_model_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool toleranceControlled = 3;
    if (has_tolerancecontrolled()) {
      total_size += 1 + 1;
    }

    // required double relativeTolerance = 4;
    if (has_relativetolerance()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_model_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_initialize_model_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_initialize_model_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_initialize_model_req::MergeFrom(const fmi2_import_initialize_model_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_tolerancecontrolled()) {
      set_tolerancecontrolled(from.tolerancecontrolled());
    }
    if (from.has_relativetolerance()) {
      set_relativetolerance(from.relativetolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_initialize_model_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_initialize_model_req::CopyFrom(const fmi2_import_initialize_model_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_model_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void fmi2_import_initialize_model_req::Swap(fmi2_import_initialize_model_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(tolerancecontrolled_, other->tolerancecontrolled_);
    std::swap(relativetolerance_, other->relativetolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_initialize_model_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_initialize_model_req_descriptor_;
  metadata.reflection = fmi2_import_initialize_model_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_model_res::kMessageIdFieldNumber;
const int fmi2_import_initialize_model_res::kEventInfoFieldNumber;
const int fmi2_import_initialize_model_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_model_res::fmi2_import_initialize_model_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_initialize_model_res::InitAsDefaultInstance() {
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(&::fmitcp_proto::fmi2_event_info_t::default_instance());
}

fmi2_import_initialize_model_res::fmi2_import_initialize_model_res(const fmi2_import_initialize_model_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_model_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  eventinfo_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_model_res::~fmi2_import_initialize_model_res() {
  SharedDtor();
}

void fmi2_import_initialize_model_res::SharedDtor() {
  if (this != default_instance_) {
    delete eventinfo_;
  }
}

void fmi2_import_initialize_model_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_initialize_model_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_initialize_model_res_descriptor_;
}

const fmi2_import_initialize_model_res& fmi2_import_initialize_model_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_initialize_model_res* fmi2_import_initialize_model_res::default_instance_ = NULL;

fmi2_import_initialize_model_res* fmi2_import_initialize_model_res::New() const {
  return new fmi2_import_initialize_model_res;
}

void fmi2_import_initialize_model_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_eventinfo()) {
      if (eventinfo_ != NULL) eventinfo_->::fmitcp_proto::fmi2_event_info_t::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_initialize_model_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventInfo;
        break;
      }

      // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_model_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventinfo(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_initialize_model_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventinfo(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_initialize_model_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinfo());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_model_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_initialize_model_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_initialize_model_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_initialize_model_res::MergeFrom(const fmi2_import_initialize_model_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_eventinfo()) {
      mutable_eventinfo()->::fmitcp_proto::fmi2_event_info_t::MergeFrom(from.eventinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_initialize_model_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_initialize_model_res::CopyFrom(const fmi2_import_initialize_model_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_model_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_eventinfo()) {
    if (!this->eventinfo().IsInitialized()) return false;
  }
  return true;
}

void fmi2_import_initialize_model_res::Swap(fmi2_import_initialize_model_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_initialize_model_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_initialize_model_res_descriptor_;
  metadata.reflection = fmi2_import_initialize_model_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_get_derivatives_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_derivatives_req::fmi2_import_get_derivatives_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_get_derivatives_req::fmi2_import_get_derivatives_req(const fmi2_import_get_derivatives_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_derivatives_req::~fmi2_import_get_derivatives_req() {
  SharedDtor();
}

void fmi2_import_get_derivatives_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_derivatives_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_derivatives_req_descriptor_;
}

const fmi2_import_get_derivatives_req& fmi2_import_get_derivatives_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_derivatives_req* fmi2_import_get_derivatives_req::default_instance_ = NULL;

fmi2_import_get_derivatives_req* fmi2_import_get_derivatives_req::New() const {
  return new fmi2_import_get_derivatives_req;
}

void fmi2_import_get_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_derivatives_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_derivatives_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_derivatives_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_derivatives_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_derivatives_req::MergeFrom(const fmi2_import_get_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_derivatives_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_req::CopyFrom(const fmi2_import_get_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_derivatives_req::Swap(fmi2_import_get_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_derivatives_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_derivatives_req_descriptor_;
  metadata.reflection = fmi2_import_get_derivatives_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_get_derivatives_res::kDerivativesFieldNumber;
const int fmi2_import_get_derivatives_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_derivatives_res::fmi2_import_get_derivatives_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_get_derivatives_res::fmi2_import_get_derivatives_res(const fmi2_import_get_derivatives_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_derivatives_res::~fmi2_import_get_derivatives_res() {
  SharedDtor();
}

void fmi2_import_get_derivatives_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_derivatives_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_derivatives_res_descriptor_;
}

const fmi2_import_get_derivatives_res& fmi2_import_get_derivatives_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_derivatives_res* fmi2_import_get_derivatives_res::default_instance_ = NULL;

fmi2_import_get_derivatives_res* fmi2_import_get_derivatives_res::New() const {
  return new fmi2_import_get_derivatives_res;
}

void fmi2_import_get_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  derivatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_derivatives;
        break;
      }

      // repeated double derivatives = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_derivatives:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_derivatives())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_derivatives())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_derivatives;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double derivatives = 2;
  for (int i = 0; i < this->derivatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->derivatives(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_derivatives_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double derivatives = 2;
  for (int i = 0; i < this->derivatives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->derivatives(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double derivatives = 2;
  {
    int data_size = 0;
    data_size = 8 * this->derivatives_size();
    total_size += 1 * this->derivatives_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_derivatives_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_derivatives_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_derivatives_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_derivatives_res::MergeFrom(const fmi2_import_get_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  derivatives_.MergeFrom(from.derivatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_derivatives_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_res::CopyFrom(const fmi2_import_get_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_derivatives_res::Swap(fmi2_import_get_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    derivatives_.Swap(&other->derivatives_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_derivatives_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_derivatives_res_descriptor_;
  metadata.reflection = fmi2_import_get_derivatives_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_event_indicators_req::kMessageIdFieldNumber;
const int fmi2_import_get_event_indicators_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_event_indicators_req::fmi2_import_get_event_indicators_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_event_indicators_req::InitAsDefaultInstance() {
}

fmi2_import_get_event_indicators_req::fmi2_import_get_event_indicators_req(const fmi2_import_get_event_indicators_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_event_indicators_req::~fmi2_import_get_event_indicators_req() {
  SharedDtor();
}

void fmi2_import_get_event_indicators_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_event_indicators_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_event_indicators_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_event_indicators_req_descriptor_;
}

const fmi2_import_get_event_indicators_req& fmi2_import_get_event_indicators_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_event_indicators_req* fmi2_import_get_event_indicators_req::default_instance_ = NULL;

fmi2_import_get_event_indicators_req* fmi2_import_get_event_indicators_req::New() const {
  return new fmi2_import_get_event_indicators_req;
}

void fmi2_import_get_event_indicators_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_event_indicators_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_event_indicators_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_event_indicators_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_event_indicators_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_event_indicators_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_event_indicators_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_event_indicators_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_event_indicators_req::MergeFrom(const fmi2_import_get_event_indicators_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_event_indicators_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_req::CopyFrom(const fmi2_import_get_event_indicators_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_event_indicators_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_event_indicators_req::Swap(fmi2_import_get_event_indicators_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_event_indicators_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_event_indicators_req_descriptor_;
  metadata.reflection = fmi2_import_get_event_indicators_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_event_indicators_res::kMessageIdFieldNumber;
const int fmi2_import_get_event_indicators_res::kEventIndicatorsFieldNumber;
const int fmi2_import_get_event_indicators_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_event_indicators_res::fmi2_import_get_event_indicators_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_event_indicators_res::InitAsDefaultInstance() {
}

fmi2_import_get_event_indicators_res::fmi2_import_get_event_indicators_res(const fmi2_import_get_event_indicators_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_event_indicators_res::~fmi2_import_get_event_indicators_res() {
  SharedDtor();
}

void fmi2_import_get_event_indicators_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_event_indicators_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_event_indicators_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_event_indicators_res_descriptor_;
}

const fmi2_import_get_event_indicators_res& fmi2_import_get_event_indicators_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_event_indicators_res* fmi2_import_get_event_indicators_res::default_instance_ = NULL;

fmi2_import_get_event_indicators_res* fmi2_import_get_event_indicators_res::New() const {
  return new fmi2_import_get_event_indicators_res;
}

void fmi2_import_get_event_indicators_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  eventindicators_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_event_indicators_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_eventIndicators;
        break;
      }

      // repeated double eventIndicators = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_eventIndicators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_eventindicators())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_eventindicators())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_eventIndicators;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_event_indicators_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double eventIndicators = 2;
  for (int i = 0; i < this->eventindicators_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->eventindicators(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_event_indicators_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double eventIndicators = 2;
  for (int i = 0; i < this->eventindicators_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->eventindicators(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_event_indicators_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double eventIndicators = 2;
  {
    int data_size = 0;
    data_size = 8 * this->eventindicators_size();
    total_size += 1 * this->eventindicators_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_event_indicators_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_event_indicators_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_event_indicators_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_event_indicators_res::MergeFrom(const fmi2_import_get_event_indicators_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventindicators_.MergeFrom(from.eventindicators_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_event_indicators_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_res::CopyFrom(const fmi2_import_get_event_indicators_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_event_indicators_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_event_indicators_res::Swap(fmi2_import_get_event_indicators_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    eventindicators_.Swap(&other->eventindicators_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_event_indicators_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_event_indicators_res_descriptor_;
  metadata.reflection = fmi2_import_get_event_indicators_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_eventUpdate_req::kMessageIdFieldNumber;
const int fmi2_import_eventUpdate_req::kFmuIdFieldNumber;
const int fmi2_import_eventUpdate_req::kIntermediateResultsFieldNumber;
#endif  // !_MSC_VER

fmi2_import_eventUpdate_req::fmi2_import_eventUpdate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_eventUpdate_req::InitAsDefaultInstance() {
}

fmi2_import_eventUpdate_req::fmi2_import_eventUpdate_req(const fmi2_import_eventUpdate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  intermediateresults_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_eventUpdate_req::~fmi2_import_eventUpdate_req() {
  SharedDtor();
}

void fmi2_import_eventUpdate_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_eventUpdate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_eventUpdate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_eventUpdate_req_descriptor_;
}

const fmi2_import_eventUpdate_req& fmi2_import_eventUpdate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_eventUpdate_req* fmi2_import_eventUpdate_req::default_instance_ = NULL;

fmi2_import_eventUpdate_req* fmi2_import_eventUpdate_req::New() const {
  return new fmi2_import_eventUpdate_req;
}

void fmi2_import_eventUpdate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    intermediateresults_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_eventUpdate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intermediateResults;
        break;
      }

      // required bool intermediateResults = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intermediateResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intermediateresults_)));
          set_has_intermediateresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_eventUpdate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool intermediateResults = 3;
  if (has_intermediateresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->intermediateresults(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_eventUpdate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required bool intermediateResults = 3;
  if (has_intermediateresults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->intermediateresults(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_eventUpdate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool intermediateResults = 3;
    if (has_intermediateresults()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_eventUpdate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_eventUpdate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_eventUpdate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_eventUpdate_req::MergeFrom(const fmi2_import_eventUpdate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_intermediateresults()) {
      set_intermediateresults(from.intermediateresults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_eventUpdate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_req::CopyFrom(const fmi2_import_eventUpdate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_eventUpdate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_eventUpdate_req::Swap(fmi2_import_eventUpdate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(intermediateresults_, other->intermediateresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_eventUpdate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_eventUpdate_req_descriptor_;
  metadata.reflection = fmi2_import_eventUpdate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_eventUpdate_res::kMessageIdFieldNumber;
const int fmi2_import_eventUpdate_res::kEventInfoFieldNumber;
const int fmi2_import_eventUpdate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_eventUpdate_res::fmi2_import_eventUpdate_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_eventUpdate_res::InitAsDefaultInstance() {
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(&::fmitcp_proto::fmi2_event_info_t::default_instance());
}

fmi2_import_eventUpdate_res::fmi2_import_eventUpdate_res(const fmi2_import_eventUpdate_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  eventinfo_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_eventUpdate_res::~fmi2_import_eventUpdate_res() {
  SharedDtor();
}

void fmi2_import_eventUpdate_res::SharedDtor() {
  if (this != default_instance_) {
    delete eventinfo_;
  }
}

void fmi2_import_eventUpdate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_eventUpdate_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_eventUpdate_res_descriptor_;
}

const fmi2_import_eventUpdate_res& fmi2_import_eventUpdate_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_eventUpdate_res* fmi2_import_eventUpdate_res::default_instance_ = NULL;

fmi2_import_eventUpdate_res* fmi2_import_eventUpdate_res::New() const {
  return new fmi2_import_eventUpdate_res;
}

void fmi2_import_eventUpdate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_eventinfo()) {
      if (eventinfo_ != NULL) eventinfo_->::fmitcp_proto::fmi2_event_info_t::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_eventUpdate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventInfo;
        break;
      }

      // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_eventUpdate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventinfo(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_eventUpdate_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventinfo(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_eventUpdate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinfo());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_eventUpdate_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_eventUpdate_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_eventUpdate_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_eventUpdate_res::MergeFrom(const fmi2_import_eventUpdate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_eventinfo()) {
      mutable_eventinfo()->::fmitcp_proto::fmi2_event_info_t::MergeFrom(from.eventinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_eventUpdate_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_res::CopyFrom(const fmi2_import_eventUpdate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_eventUpdate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_eventinfo()) {
    if (!this->eventinfo().IsInitialized()) return false;
  }
  return true;
}

void fmi2_import_eventUpdate_res::Swap(fmi2_import_eventUpdate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_eventUpdate_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_eventUpdate_res_descriptor_;
  metadata.reflection = fmi2_import_eventUpdate_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_event_iteration_req::kMessageIdFieldNumber;
const int fmi2_import_completed_event_iteration_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_event_iteration_req::fmi2_import_completed_event_iteration_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_completed_event_iteration_req::InitAsDefaultInstance() {
}

fmi2_import_completed_event_iteration_req::fmi2_import_completed_event_iteration_req(const fmi2_import_completed_event_iteration_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_event_iteration_req::~fmi2_import_completed_event_iteration_req() {
  SharedDtor();
}

void fmi2_import_completed_event_iteration_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_completed_event_iteration_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_completed_event_iteration_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_completed_event_iteration_req_descriptor_;
}

const fmi2_import_completed_event_iteration_req& fmi2_import_completed_event_iteration_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_completed_event_iteration_req* fmi2_import_completed_event_iteration_req::default_instance_ = NULL;

fmi2_import_completed_event_iteration_req* fmi2_import_completed_event_iteration_req::New() const {
  return new fmi2_import_completed_event_iteration_req;
}

void fmi2_import_completed_event_iteration_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_completed_event_iteration_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_event_iteration_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_completed_event_iteration_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_completed_event_iteration_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_event_iteration_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_completed_event_iteration_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_completed_event_iteration_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_completed_event_iteration_req::MergeFrom(const fmi2_import_completed_event_iteration_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_completed_event_iteration_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_req::CopyFrom(const fmi2_import_completed_event_iteration_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_event_iteration_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_event_iteration_req::Swap(fmi2_import_completed_event_iteration_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_completed_event_iteration_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_completed_event_iteration_req_descriptor_;
  metadata.reflection = fmi2_import_completed_event_iteration_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_event_iteration_res::kMessageIdFieldNumber;
const int fmi2_import_completed_event_iteration_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_event_iteration_res::fmi2_import_completed_event_iteration_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_completed_event_iteration_res::InitAsDefaultInstance() {
}

fmi2_import_completed_event_iteration_res::fmi2_import_completed_event_iteration_res(const fmi2_import_completed_event_iteration_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_event_iteration_res::~fmi2_import_completed_event_iteration_res() {
  SharedDtor();
}

void fmi2_import_completed_event_iteration_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_completed_event_iteration_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_completed_event_iteration_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_completed_event_iteration_res_descriptor_;
}

const fmi2_import_completed_event_iteration_res& fmi2_import_completed_event_iteration_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_completed_event_iteration_res* fmi2_import_completed_event_iteration_res::default_instance_ = NULL;

fmi2_import_completed_event_iteration_res* fmi2_import_completed_event_iteration_res::New() const {
  return new fmi2_import_completed_event_iteration_res;
}

void fmi2_import_completed_event_iteration_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_completed_event_iteration_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_event_iteration_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_completed_event_iteration_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_completed_event_iteration_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_event_iteration_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_completed_event_iteration_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_completed_event_iteration_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_completed_event_iteration_res::MergeFrom(const fmi2_import_completed_event_iteration_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_completed_event_iteration_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_res::CopyFrom(const fmi2_import_completed_event_iteration_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_event_iteration_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_event_iteration_res::Swap(fmi2_import_completed_event_iteration_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_completed_event_iteration_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_completed_event_iteration_res_descriptor_;
  metadata.reflection = fmi2_import_completed_event_iteration_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_get_continuous_states_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_continuous_states_req::fmi2_import_get_continuous_states_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_get_continuous_states_req::fmi2_import_get_continuous_states_req(const fmi2_import_get_continuous_states_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_continuous_states_req::~fmi2_import_get_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_get_continuous_states_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_continuous_states_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_continuous_states_req_descriptor_;
}

const fmi2_import_get_continuous_states_req& fmi2_import_get_continuous_states_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_continuous_states_req* fmi2_import_get_continuous_states_req::default_instance_ = NULL;

fmi2_import_get_continuous_states_req* fmi2_import_get_continuous_states_req::New() const {
  return new fmi2_import_get_continuous_states_req;
}

void fmi2_import_get_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_continuous_states_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_continuous_states_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_continuous_states_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_continuous_states_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_continuous_states_req::MergeFrom(const fmi2_import_get_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_continuous_states_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_req::CopyFrom(const fmi2_import_get_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_continuous_states_req::Swap(fmi2_import_get_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_continuous_states_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_continuous_states_req_descriptor_;
  metadata.reflection = fmi2_import_get_continuous_states_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_get_continuous_states_res::kStatesFieldNumber;
const int fmi2_import_get_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_continuous_states_res::fmi2_import_get_continuous_states_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_get_continuous_states_res::fmi2_import_get_continuous_states_res(const fmi2_import_get_continuous_states_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_continuous_states_res::~fmi2_import_get_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_get_continuous_states_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_continuous_states_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_continuous_states_res_descriptor_;
}

const fmi2_import_get_continuous_states_res& fmi2_import_get_continuous_states_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_continuous_states_res* fmi2_import_get_continuous_states_res::default_instance_ = NULL;

fmi2_import_get_continuous_states_res* fmi2_import_get_continuous_states_res::New() const {
  return new fmi2_import_get_continuous_states_res;
}

void fmi2_import_get_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_states;
        break;
      }

      // repeated double states = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_states;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double states = 2;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->states(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_continuous_states_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double states = 2;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->states(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double states = 2;
  {
    int data_size = 0;
    data_size = 8 * this->states_size();
    total_size += 1 * this->states_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_continuous_states_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_continuous_states_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_continuous_states_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_continuous_states_res::MergeFrom(const fmi2_import_get_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_continuous_states_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_res::CopyFrom(const fmi2_import_get_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_continuous_states_res::Swap(fmi2_import_get_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    states_.Swap(&other->states_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_continuous_states_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_continuous_states_res_descriptor_;
  metadata.reflection = fmi2_import_get_continuous_states_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_nominal_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_get_nominal_continuous_states_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_nominal_continuous_states_req::fmi2_import_get_nominal_continuous_states_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_nominal_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_get_nominal_continuous_states_req::fmi2_import_get_nominal_continuous_states_req(const fmi2_import_get_nominal_continuous_states_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_nominal_continuous_states_req::~fmi2_import_get_nominal_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_get_nominal_continuous_states_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_nominal_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_nominal_continuous_states_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_nominal_continuous_states_req_descriptor_;
}

const fmi2_import_get_nominal_continuous_states_req& fmi2_import_get_nominal_continuous_states_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_nominal_continuous_states_req* fmi2_import_get_nominal_continuous_states_req::default_instance_ = NULL;

fmi2_import_get_nominal_continuous_states_req* fmi2_import_get_nominal_continuous_states_req::New() const {
  return new fmi2_import_get_nominal_continuous_states_req;
}

void fmi2_import_get_nominal_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_nominal_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_nominal_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_nominal_continuous_states_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_nominal_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_nominal_continuous_states_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_nominal_continuous_states_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_nominal_continuous_states_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_nominal_continuous_states_req::MergeFrom(const fmi2_import_get_nominal_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_nominal_continuous_states_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_req::CopyFrom(const fmi2_import_get_nominal_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_nominal_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_nominal_continuous_states_req::Swap(fmi2_import_get_nominal_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_nominal_continuous_states_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_nominal_continuous_states_req_descriptor_;
  metadata.reflection = fmi2_import_get_nominal_continuous_states_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_nominal_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_get_nominal_continuous_states_res::kNominalFieldNumber;
const int fmi2_import_get_nominal_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_nominal_continuous_states_res::fmi2_import_get_nominal_continuous_states_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_nominal_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_get_nominal_continuous_states_res::fmi2_import_get_nominal_continuous_states_res(const fmi2_import_get_nominal_continuous_states_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_nominal_continuous_states_res::~fmi2_import_get_nominal_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_get_nominal_continuous_states_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_nominal_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_nominal_continuous_states_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_nominal_continuous_states_res_descriptor_;
}

const fmi2_import_get_nominal_continuous_states_res& fmi2_import_get_nominal_continuous_states_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_nominal_continuous_states_res* fmi2_import_get_nominal_continuous_states_res::default_instance_ = NULL;

fmi2_import_get_nominal_continuous_states_res* fmi2_import_get_nominal_continuous_states_res::New() const {
  return new fmi2_import_get_nominal_continuous_states_res;
}

void fmi2_import_get_nominal_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  nominal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_nominal_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nominal;
        break;
      }

      // repeated double nominal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nominal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_nominal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_nominal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nominal;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_nominal_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double nominal = 2;
  for (int i = 0; i < this->nominal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->nominal(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_nominal_continuous_states_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double nominal = 2;
  for (int i = 0; i < this->nominal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->nominal(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_nominal_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double nominal = 2;
  {
    int data_size = 0;
    data_size = 8 * this->nominal_size();
    total_size += 1 * this->nominal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_nominal_continuous_states_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_nominal_continuous_states_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_nominal_continuous_states_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_nominal_continuous_states_res::MergeFrom(const fmi2_import_get_nominal_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  nominal_.MergeFrom(from.nominal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_nominal_continuous_states_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_res::CopyFrom(const fmi2_import_get_nominal_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_nominal_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_nominal_continuous_states_res::Swap(fmi2_import_get_nominal_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    nominal_.Swap(&other->nominal_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_nominal_continuous_states_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_nominal_continuous_states_res_descriptor_;
  metadata.reflection = fmi2_import_get_nominal_continuous_states_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_req::kMessageIdFieldNumber;
const int fmi2_import_terminate_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_req::fmi2_import_terminate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_terminate_req::InitAsDefaultInstance() {
}

fmi2_import_terminate_req::fmi2_import_terminate_req(const fmi2_import_terminate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_req::~fmi2_import_terminate_req() {
  SharedDtor();
}

void fmi2_import_terminate_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_terminate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_terminate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_terminate_req_descriptor_;
}

const fmi2_import_terminate_req& fmi2_import_terminate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_terminate_req* fmi2_import_terminate_req::default_instance_ = NULL;

fmi2_import_terminate_req* fmi2_import_terminate_req::New() const {
  return new fmi2_import_terminate_req;
}

void fmi2_import_terminate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_terminate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_terminate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_terminate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_terminate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_terminate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_terminate_req::MergeFrom(const fmi2_import_terminate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_terminate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_terminate_req::CopyFrom(const fmi2_import_terminate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_req::Swap(fmi2_import_terminate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_terminate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_terminate_req_descriptor_;
  metadata.reflection = fmi2_import_terminate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_res::kMessageIdFieldNumber;
const int fmi2_import_terminate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_res::fmi2_import_terminate_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_terminate_res::InitAsDefaultInstance() {
}

fmi2_import_terminate_res::fmi2_import_terminate_res(const fmi2_import_terminate_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_res::~fmi2_import_terminate_res() {
  SharedDtor();
}

void fmi2_import_terminate_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_terminate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_terminate_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_terminate_res_descriptor_;
}

const fmi2_import_terminate_res& fmi2_import_terminate_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_terminate_res* fmi2_import_terminate_res::default_instance_ = NULL;

fmi2_import_terminate_res* fmi2_import_terminate_res::New() const {
  return new fmi2_import_terminate_res;
}

void fmi2_import_terminate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_terminate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_terminate_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_terminate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_terminate_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_terminate_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_terminate_res::MergeFrom(const fmi2_import_terminate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_terminate_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_terminate_res::CopyFrom(const fmi2_import_terminate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_res::Swap(fmi2_import_terminate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_terminate_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_terminate_res_descriptor_;
  metadata.reflection = fmi2_import_terminate_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_version_req::kMessageIdFieldNumber;
const int fmi2_import_get_version_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_version_req::fmi2_import_get_version_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_version_req::InitAsDefaultInstance() {
}

fmi2_import_get_version_req::fmi2_import_get_version_req(const fmi2_import_get_version_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_version_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_version_req::~fmi2_import_get_version_req() {
  SharedDtor();
}

void fmi2_import_get_version_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_version_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_version_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_version_req_descriptor_;
}

const fmi2_import_get_version_req& fmi2_import_get_version_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_version_req* fmi2_import_get_version_req::default_instance_ = NULL;

fmi2_import_get_version_req* fmi2_import_get_version_req::New() const {
  return new fmi2_import_get_version_req;
}

void fmi2_import_get_version_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_version_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_version_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_version_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_version_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_version_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_version_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_version_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_version_req::MergeFrom(const fmi2_import_get_version_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_version_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_version_req::CopyFrom(const fmi2_import_get_version_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_version_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_version_req::Swap(fmi2_import_get_version_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_version_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_version_req_descriptor_;
  metadata.reflection = fmi2_import_get_version_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_version_res::kMessageIdFieldNumber;
const int fmi2_import_get_version_res::kVersionFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_version_res::fmi2_import_get_version_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_version_res::InitAsDefaultInstance() {
}

fmi2_import_get_version_res::fmi2_import_get_version_res(const fmi2_import_get_version_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_version_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_version_res::~fmi2_import_get_version_res() {
  SharedDtor();
}

void fmi2_import_get_version_res::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void fmi2_import_get_version_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_version_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_version_res_descriptor_;
}

const fmi2_import_get_version_res& fmi2_import_get_version_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_version_res* fmi2_import_get_version_res::default_instance_ = NULL;

fmi2_import_get_version_res* fmi2_import_get_version_res::New() const {
  return new fmi2_import_get_version_res;
}

void fmi2_import_get_version_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_version_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_version_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_version_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_version_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_version_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_version_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_version_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_version_res::MergeFrom(const fmi2_import_get_version_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_version_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_version_res::CopyFrom(const fmi2_import_get_version_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_version_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_version_res::Swap(fmi2_import_get_version_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_version_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_version_res_descriptor_;
  metadata.reflection = fmi2_import_get_version_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_debug_logging_req::kMessageIdFieldNumber;
const int fmi2_import_set_debug_logging_req::kFmuIdFieldNumber;
const int fmi2_import_set_debug_logging_req::kLoggingOnFieldNumber;
const int fmi2_import_set_debug_logging_req::kCategoriesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_debug_logging_req::fmi2_import_set_debug_logging_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_debug_logging_req::InitAsDefaultInstance() {
}

fmi2_import_set_debug_logging_req::fmi2_import_set_debug_logging_req(const fmi2_import_set_debug_logging_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  loggingon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_debug_logging_req::~fmi2_import_set_debug_logging_req() {
  SharedDtor();
}

void fmi2_import_set_debug_logging_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_debug_logging_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_debug_logging_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_debug_logging_req_descriptor_;
}

const fmi2_import_set_debug_logging_req& fmi2_import_set_debug_logging_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_debug_logging_req* fmi2_import_set_debug_logging_req::default_instance_ = NULL;

fmi2_import_set_debug_logging_req* fmi2_import_set_debug_logging_req::New() const {
  return new fmi2_import_set_debug_logging_req;
}

void fmi2_import_set_debug_logging_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    loggingon_ = false;
  }
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_debug_logging_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loggingOn;
        break;
      }

      // required bool loggingOn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loggingOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loggingon_)));
          set_has_loggingon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        break;
      }

      // repeated string categories = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->categories(this->categories_size() - 1).data(),
            this->categories(this->categories_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_debug_logging_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool loggingOn = 3;
  if (has_loggingon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loggingon(), output);
  }

  // repeated string categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->categories(i).data(), this->categories(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->categories(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_debug_logging_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required bool loggingOn = 3;
  if (has_loggingon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->loggingon(), target);
  }

  // repeated string categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->categories(i).data(), this->categories(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->categories(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_debug_logging_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool loggingOn = 3;
    if (has_loggingon()) {
      total_size += 1 + 1;
    }

  }
  // repeated string categories = 4;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_debug_logging_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_debug_logging_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_debug_logging_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_debug_logging_req::MergeFrom(const fmi2_import_set_debug_logging_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_loggingon()) {
      set_loggingon(from.loggingon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_debug_logging_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_req::CopyFrom(const fmi2_import_set_debug_logging_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_debug_logging_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_debug_logging_req::Swap(fmi2_import_set_debug_logging_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(loggingon_, other->loggingon_);
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_debug_logging_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_debug_logging_req_descriptor_;
  metadata.reflection = fmi2_import_set_debug_logging_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_debug_logging_res::kMessageIdFieldNumber;
const int fmi2_import_set_debug_logging_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_debug_logging_res::fmi2_import_set_debug_logging_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_debug_logging_res::InitAsDefaultInstance() {
}

fmi2_import_set_debug_logging_res::fmi2_import_set_debug_logging_res(const fmi2_import_set_debug_logging_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_debug_logging_res::~fmi2_import_set_debug_logging_res() {
  SharedDtor();
}

void fmi2_import_set_debug_logging_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_debug_logging_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_debug_logging_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_debug_logging_res_descriptor_;
}

const fmi2_import_set_debug_logging_res& fmi2_import_set_debug_logging_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_debug_logging_res* fmi2_import_set_debug_logging_res::default_instance_ = NULL;

fmi2_import_set_debug_logging_res* fmi2_import_set_debug_logging_res::New() const {
  return new fmi2_import_set_debug_logging_res;
}

void fmi2_import_set_debug_logging_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_debug_logging_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_debug_logging_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_debug_logging_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_debug_logging_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_debug_logging_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_debug_logging_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_debug_logging_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_debug_logging_res::MergeFrom(const fmi2_import_set_debug_logging_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_debug_logging_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_res::CopyFrom(const fmi2_import_set_debug_logging_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_debug_logging_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_debug_logging_res::Swap(fmi2_import_set_debug_logging_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_debug_logging_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_debug_logging_res_descriptor_;
  metadata.reflection = fmi2_import_set_debug_logging_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_req::kMessageIdFieldNumber;
const int fmi2_import_set_real_req::kFmuIdFieldNumber;
const int fmi2_import_set_real_req::kValueReferencesFieldNumber;
const int fmi2_import_set_real_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_req::fmi2_import_set_real_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_real_req::InitAsDefaultInstance() {
}

fmi2_import_set_real_req::fmi2_import_set_real_req(const fmi2_import_set_real_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_req::~fmi2_import_set_real_req() {
  SharedDtor();
}

void fmi2_import_set_real_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_real_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_real_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_real_req_descriptor_;
}

const fmi2_import_set_real_req& fmi2_import_set_real_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_real_req* fmi2_import_set_real_req::default_instance_ = NULL;

fmi2_import_set_real_req* fmi2_import_set_real_req::New() const {
  return new fmi2_import_set_real_req;
}

void fmi2_import_set_real_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_real_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(33)) goto parse_values;
        break;
      }

      // repeated double values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_real_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_real_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated double values = 4;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_real_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_real_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_real_req::MergeFrom(const fmi2_import_set_real_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_real_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_real_req::CopyFrom(const fmi2_import_set_real_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_req::Swap(fmi2_import_set_real_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_real_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_real_req_descriptor_;
  metadata.reflection = fmi2_import_set_real_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_res::kMessageIdFieldNumber;
const int fmi2_import_set_real_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_res::fmi2_import_set_real_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_real_res::InitAsDefaultInstance() {
}

fmi2_import_set_real_res::fmi2_import_set_real_res(const fmi2_import_set_real_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_res::~fmi2_import_set_real_res() {
  SharedDtor();
}

void fmi2_import_set_real_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_real_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_real_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_real_res_descriptor_;
}

const fmi2_import_set_real_res& fmi2_import_set_real_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_real_res* fmi2_import_set_real_res::default_instance_ = NULL;

fmi2_import_set_real_res* fmi2_import_set_real_res::New() const {
  return new fmi2_import_set_real_res;
}

void fmi2_import_set_real_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_real_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_real_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_real_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_real_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_real_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_real_res::MergeFrom(const fmi2_import_set_real_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_real_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_real_res::CopyFrom(const fmi2_import_set_real_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_res::Swap(fmi2_import_set_real_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_real_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_real_res_descriptor_;
  metadata.reflection = fmi2_import_set_real_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_integer_req::kMessageIdFieldNumber;
const int fmi2_import_set_integer_req::kFmuIdFieldNumber;
const int fmi2_import_set_integer_req::kValueReferencesFieldNumber;
const int fmi2_import_set_integer_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_integer_req::fmi2_import_set_integer_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_integer_req::InitAsDefaultInstance() {
}

fmi2_import_set_integer_req::fmi2_import_set_integer_req(const fmi2_import_set_integer_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_integer_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_integer_req::~fmi2_import_set_integer_req() {
  SharedDtor();
}

void fmi2_import_set_integer_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_integer_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_integer_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_integer_req_descriptor_;
}

const fmi2_import_set_integer_req& fmi2_import_set_integer_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_integer_req* fmi2_import_set_integer_req::default_instance_ = NULL;

fmi2_import_set_integer_req* fmi2_import_set_integer_req::New() const {
  return new fmi2_import_set_integer_req;
}

void fmi2_import_set_integer_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_integer_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated int32 values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_integer_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_integer_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated int32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_integer_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 values = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_integer_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_integer_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_integer_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_integer_req::MergeFrom(const fmi2_import_set_integer_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_integer_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_integer_req::CopyFrom(const fmi2_import_set_integer_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_integer_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_integer_req::Swap(fmi2_import_set_integer_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_integer_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_integer_req_descriptor_;
  metadata.reflection = fmi2_import_set_integer_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_integer_res::kMessageIdFieldNumber;
const int fmi2_import_set_integer_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_integer_res::fmi2_import_set_integer_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_integer_res::InitAsDefaultInstance() {
}

fmi2_import_set_integer_res::fmi2_import_set_integer_res(const fmi2_import_set_integer_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_integer_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_integer_res::~fmi2_import_set_integer_res() {
  SharedDtor();
}

void fmi2_import_set_integer_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_integer_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_integer_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_integer_res_descriptor_;
}

const fmi2_import_set_integer_res& fmi2_import_set_integer_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_integer_res* fmi2_import_set_integer_res::default_instance_ = NULL;

fmi2_import_set_integer_res* fmi2_import_set_integer_res::New() const {
  return new fmi2_import_set_integer_res;
}

void fmi2_import_set_integer_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_integer_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_integer_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_integer_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_integer_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_integer_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_integer_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_integer_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_integer_res::MergeFrom(const fmi2_import_set_integer_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_integer_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_integer_res::CopyFrom(const fmi2_import_set_integer_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_integer_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_integer_res::Swap(fmi2_import_set_integer_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_integer_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_integer_res_descriptor_;
  metadata.reflection = fmi2_import_set_integer_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_boolean_req::kMessageIdFieldNumber;
const int fmi2_import_set_boolean_req::kFmuIdFieldNumber;
const int fmi2_import_set_boolean_req::kValueReferencesFieldNumber;
const int fmi2_import_set_boolean_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_boolean_req::fmi2_import_set_boolean_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_boolean_req::InitAsDefaultInstance() {
}

fmi2_import_set_boolean_req::fmi2_import_set_boolean_req(const fmi2_import_set_boolean_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_boolean_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_boolean_req::~fmi2_import_set_boolean_req() {
  SharedDtor();
}

void fmi2_import_set_boolean_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_boolean_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_boolean_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_boolean_req_descriptor_;
}

const fmi2_import_set_boolean_req& fmi2_import_set_boolean_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_boolean_req* fmi2_import_set_boolean_req::default_instance_ = NULL;

fmi2_import_set_boolean_req* fmi2_import_set_boolean_req::New() const {
  return new fmi2_import_set_boolean_req;
}

void fmi2_import_set_boolean_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_boolean_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated bool values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_boolean_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated bool values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_boolean_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated bool values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_boolean_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated bool values = 4;
  {
    int data_size = 0;
    data_size = 1 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_boolean_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_boolean_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_boolean_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_boolean_req::MergeFrom(const fmi2_import_set_boolean_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_boolean_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_boolean_req::CopyFrom(const fmi2_import_set_boolean_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_boolean_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_boolean_req::Swap(fmi2_import_set_boolean_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_boolean_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_boolean_req_descriptor_;
  metadata.reflection = fmi2_import_set_boolean_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_boolean_res::kMessageIdFieldNumber;
const int fmi2_import_set_boolean_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_boolean_res::fmi2_import_set_boolean_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_boolean_res::InitAsDefaultInstance() {
}

fmi2_import_set_boolean_res::fmi2_import_set_boolean_res(const fmi2_import_set_boolean_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_boolean_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_boolean_res::~fmi2_import_set_boolean_res() {
  SharedDtor();
}

void fmi2_import_set_boolean_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_boolean_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_boolean_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_boolean_res_descriptor_;
}

const fmi2_import_set_boolean_res& fmi2_import_set_boolean_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_boolean_res* fmi2_import_set_boolean_res::default_instance_ = NULL;

fmi2_import_set_boolean_res* fmi2_import_set_boolean_res::New() const {
  return new fmi2_import_set_boolean_res;
}

void fmi2_import_set_boolean_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_boolean_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_boolean_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_boolean_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_boolean_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_boolean_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_boolean_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_boolean_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_boolean_res::MergeFrom(const fmi2_import_set_boolean_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_boolean_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_boolean_res::CopyFrom(const fmi2_import_set_boolean_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_boolean_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_boolean_res::Swap(fmi2_import_set_boolean_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_boolean_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_boolean_res_descriptor_;
  metadata.reflection = fmi2_import_set_boolean_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_string_req::kMessageIdFieldNumber;
const int fmi2_import_set_string_req::kFmuIdFieldNumber;
const int fmi2_import_set_string_req::kValueReferencesFieldNumber;
const int fmi2_import_set_string_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_string_req::fmi2_import_set_string_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_string_req::InitAsDefaultInstance() {
}

fmi2_import_set_string_req::fmi2_import_set_string_req(const fmi2_import_set_string_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_string_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_string_req::~fmi2_import_set_string_req() {
  SharedDtor();
}

void fmi2_import_set_string_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_string_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_string_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_string_req_descriptor_;
}

const fmi2_import_set_string_req& fmi2_import_set_string_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_string_req* fmi2_import_set_string_req::default_instance_ = NULL;

fmi2_import_set_string_req* fmi2_import_set_string_req::New() const {
  return new fmi2_import_set_string_req;
}

void fmi2_import_set_string_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_string_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // repeated string values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_string_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated string values = 4;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_string_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  // repeated string values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_string_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated string values = 4;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_string_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_string_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_string_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_string_req::MergeFrom(const fmi2_import_set_string_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_string_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_string_req::CopyFrom(const fmi2_import_set_string_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_string_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_string_req::Swap(fmi2_import_set_string_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_string_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_string_req_descriptor_;
  metadata.reflection = fmi2_import_set_string_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_string_res::kMessageIdFieldNumber;
const int fmi2_import_set_string_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_string_res::fmi2_import_set_string_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_string_res::InitAsDefaultInstance() {
}

fmi2_import_set_string_res::fmi2_import_set_string_res(const fmi2_import_set_string_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_string_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_string_res::~fmi2_import_set_string_res() {
  SharedDtor();
}

void fmi2_import_set_string_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_string_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_string_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_string_res_descriptor_;
}

const fmi2_import_set_string_res& fmi2_import_set_string_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_string_res* fmi2_import_set_string_res::default_instance_ = NULL;

fmi2_import_set_string_res* fmi2_import_set_string_res::New() const {
  return new fmi2_import_set_string_res;
}

void fmi2_import_set_string_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_string_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_string_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_string_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_string_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_string_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_string_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_string_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_string_res::MergeFrom(const fmi2_import_set_string_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_string_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_string_res::CopyFrom(const fmi2_import_set_string_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_string_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_string_res::Swap(fmi2_import_set_string_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_string_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_string_res_descriptor_;
  metadata.reflection = fmi2_import_set_string_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_req::fmi2_import_get_real_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_req::fmi2_import_get_real_req(const fmi2_import_get_real_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_req::~fmi2_import_get_real_req() {
  SharedDtor();
}

void fmi2_import_get_real_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_req_descriptor_;
}

const fmi2_import_get_real_req& fmi2_import_get_real_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_req* fmi2_import_get_real_req::default_instance_ = NULL;

fmi2_import_get_real_req* fmi2_import_get_real_req::New() const {
  return new fmi2_import_get_real_req;
}

void fmi2_import_get_real_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_req::MergeFrom(const fmi2_import_get_real_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_req::CopyFrom(const fmi2_import_get_real_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_req::Swap(fmi2_import_get_real_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_req_descriptor_;
  metadata.reflection = fmi2_import_get_real_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_res::kValuesFieldNumber;
const int fmi2_import_get_real_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_res::fmi2_import_get_real_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_real_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_res::fmi2_import_get_real_res(const fmi2_import_get_real_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_res::~fmi2_import_get_real_res() {
  SharedDtor();
}

void fmi2_import_get_real_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_real_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_real_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_real_res_descriptor_;
}

const fmi2_import_get_real_res& fmi2_import_get_real_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_real_res* fmi2_import_get_real_res::default_instance_ = NULL;

fmi2_import_get_real_res* fmi2_import_get_real_res::New() const {
  return new fmi2_import_get_real_res;
}

void fmi2_import_get_real_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_real_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_values;
        break;
      }

      // repeated double values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_real_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->values(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_real_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double values = 2;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_real_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_real_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_real_res::MergeFrom(const fmi2_import_get_real_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_real_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_real_res::CopyFrom(const fmi2_import_get_real_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_real_res::Swap(fmi2_import_get_real_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_real_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_real_res_descriptor_;
  metadata.reflection = fmi2_import_get_real_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_req::kMessageIdFieldNumber;
const int fmi2_import_get_integer_req::kFmuIdFieldNumber;
const int fmi2_import_get_integer_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_req::fmi2_import_get_integer_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_integer_req::InitAsDefaultInstance() {
}

fmi2_import_get_integer_req::fmi2_import_get_integer_req(const fmi2_import_get_integer_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_req::~fmi2_import_get_integer_req() {
  SharedDtor();
}

void fmi2_import_get_integer_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_integer_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_integer_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_integer_req_descriptor_;
}

const fmi2_import_get_integer_req& fmi2_import_get_integer_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_integer_req* fmi2_import_get_integer_req::default_instance_ = NULL;

fmi2_import_get_integer_req* fmi2_import_get_integer_req::New() const {
  return new fmi2_import_get_integer_req;
}

void fmi2_import_get_integer_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_integer_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_integer_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_integer_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_integer_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_integer_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_integer_req::MergeFrom(const fmi2_import_get_integer_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_integer_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_integer_req::CopyFrom(const fmi2_import_get_integer_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_integer_req::Swap(fmi2_import_get_integer_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_integer_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_integer_req_descriptor_;
  metadata.reflection = fmi2_import_get_integer_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_res::kMessageIdFieldNumber;
const int fmi2_import_get_integer_res::kValuesFieldNumber;
const int fmi2_import_get_integer_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_res::fmi2_import_get_integer_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_integer_res::InitAsDefaultInstance() {
}

fmi2_import_get_integer_res::fmi2_import_get_integer_res(const fmi2_import_get_integer_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_res::~fmi2_import_get_integer_res() {
  SharedDtor();
}

void fmi2_import_get_integer_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_integer_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_integer_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_integer_res_descriptor_;
}

const fmi2_import_get_integer_res& fmi2_import_get_integer_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_integer_res* fmi2_import_get_integer_res::default_instance_ = NULL;

fmi2_import_get_integer_res* fmi2_import_get_integer_res::New() const {
  return new fmi2_import_get_integer_res;
}

void fmi2_import_get_integer_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_integer_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated int32 values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated int32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_integer_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated int32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->values(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_integer_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_integer_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_integer_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_integer_res::MergeFrom(const fmi2_import_get_integer_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_integer_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_integer_res::CopyFrom(const fmi2_import_get_integer_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_integer_res::Swap(fmi2_import_get_integer_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_integer_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_integer_res_descriptor_;
  metadata.reflection = fmi2_import_get_integer_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_req::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_req::kFmuIdFieldNumber;
const int fmi2_import_get_boolean_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_req::fmi2_import_get_boolean_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_boolean_req::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_req::fmi2_import_get_boolean_req(const fmi2_import_get_boolean_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_req::~fmi2_import_get_boolean_req() {
  SharedDtor();
}

void fmi2_import_get_boolean_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_boolean_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_boolean_req_descriptor_;
}

const fmi2_import_get_boolean_req& fmi2_import_get_boolean_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_boolean_req* fmi2_import_get_boolean_req::default_instance_ = NULL;

fmi2_import_get_boolean_req* fmi2_import_get_boolean_req::New() const {
  return new fmi2_import_get_boolean_req;
}

void fmi2_import_get_boolean_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_boolean_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_boolean_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_boolean_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_boolean_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_boolean_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_boolean_req::MergeFrom(const fmi2_import_get_boolean_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_boolean_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_boolean_req::CopyFrom(const fmi2_import_get_boolean_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_boolean_req::Swap(fmi2_import_get_boolean_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_boolean_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_boolean_req_descriptor_;
  metadata.reflection = fmi2_import_get_boolean_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_res::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_res::kValuesFieldNumber;
const int fmi2_import_get_boolean_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_res::fmi2_import_get_boolean_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_boolean_res::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_res::fmi2_import_get_boolean_res(const fmi2_import_get_boolean_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_res::~fmi2_import_get_boolean_res() {
  SharedDtor();
}

void fmi2_import_get_boolean_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_boolean_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_boolean_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_boolean_res_descriptor_;
}

const fmi2_import_get_boolean_res& fmi2_import_get_boolean_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_boolean_res* fmi2_import_get_boolean_res::default_instance_ = NULL;

fmi2_import_get_boolean_res* fmi2_import_get_boolean_res::New() const {
  return new fmi2_import_get_boolean_res;
}

void fmi2_import_get_boolean_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_boolean_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated bool values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated bool values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_boolean_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated bool values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->values(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_boolean_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated bool values = 2;
  {
    int data_size = 0;
    data_size = 1 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_boolean_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_boolean_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_boolean_res::MergeFrom(const fmi2_import_get_boolean_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_boolean_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_boolean_res::CopyFrom(const fmi2_import_get_boolean_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_boolean_res::Swap(fmi2_import_get_boolean_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_boolean_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_boolean_res_descriptor_;
  metadata.reflection = fmi2_import_get_boolean_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_req::kMessageIdFieldNumber;
const int fmi2_import_get_string_req::kFmuIdFieldNumber;
const int fmi2_import_get_string_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_req::fmi2_import_get_string_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_string_req::InitAsDefaultInstance() {
}

fmi2_import_get_string_req::fmi2_import_get_string_req(const fmi2_import_get_string_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_req::~fmi2_import_get_string_req() {
  SharedDtor();
}

void fmi2_import_get_string_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_string_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_string_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_string_req_descriptor_;
}

const fmi2_import_get_string_req& fmi2_import_get_string_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_string_req* fmi2_import_get_string_req::default_instance_ = NULL;

fmi2_import_get_string_req* fmi2_import_get_string_req::New() const {
  return new fmi2_import_get_string_req;
}

void fmi2_import_get_string_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_string_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_string_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->valuereferences(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_string_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_string_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_string_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_string_req::MergeFrom(const fmi2_import_get_string_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_string_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_string_req::CopyFrom(const fmi2_import_get_string_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_string_req::Swap(fmi2_import_get_string_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_string_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_string_req_descriptor_;
  metadata.reflection = fmi2_import_get_string_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_res::kMessageIdFieldNumber;
const int fmi2_import_get_string_res::kValuesFieldNumber;
const int fmi2_import_get_string_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_res::fmi2_import_get_string_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_string_res::InitAsDefaultInstance() {
}

fmi2_import_get_string_res::fmi2_import_get_string_res(const fmi2_import_get_string_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_res::~fmi2_import_get_string_res() {
  SharedDtor();
}

void fmi2_import_get_string_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_string_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_string_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_string_res_descriptor_;
}

const fmi2_import_get_string_res& fmi2_import_get_string_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_string_res* fmi2_import_get_string_res::default_instance_ = NULL;

fmi2_import_get_string_res* fmi2_import_get_string_res::New() const {
  return new fmi2_import_get_string_res;
}

void fmi2_import_get_string_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_string_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_string_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_string_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_string_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_string_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_string_res::MergeFrom(const fmi2_import_get_string_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_string_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_string_res::CopyFrom(const fmi2_import_get_string_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_string_res::Swap(fmi2_import_get_string_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_string_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_string_res_descriptor_;
  metadata.reflection = fmi2_import_get_string_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

char_req::char_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void char_req::InitAsDefaultInstance() {
}

char_req::char_req(const char_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void char_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

char_req::~char_req() {
  SharedDtor();
}

void char_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void char_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* char_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return char_req_descriptor_;
}

const char_req& char_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

char_req* char_req::default_instance_ = NULL;

char_req* char_req::New() const {
  return new char_req;
}

void char_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool char_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void char_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* char_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int char_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void char_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const char_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const char_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void char_req::MergeFrom(const char_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void char_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void char_req::CopyFrom(const char_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool char_req::IsInitialized() const {

  return true;
}

void char_req::Swap(char_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata char_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = char_req_descriptor_;
  metadata.reflection = char_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

char_res::char_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void char_res::InitAsDefaultInstance() {
}

char_res::char_res(const char_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void char_res::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

char_res::~char_res() {
  SharedDtor();
}

void char_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void char_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* char_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return char_res_descriptor_;
}

const char_res& char_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

char_res* char_res::default_instance_ = NULL;

char_res* char_res::New() const {
  return new char_res;
}

void char_res::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool char_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void char_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* char_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int char_res::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void char_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const char_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const char_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void char_res::MergeFrom(const char_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void char_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void char_res::CopyFrom(const char_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool char_res::IsInitialized() const {

  return true;
}

void char_res::Swap(char_res* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata char_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = char_res_descriptor_;
  metadata.reflection = char_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_get_fmu_state_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_fmu_state_req::fmi2_import_get_fmu_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_get_fmu_state_req::fmi2_import_get_fmu_state_req(const fmi2_import_get_fmu_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_fmu_state_req::~fmi2_import_get_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_get_fmu_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_fmu_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_fmu_state_req_descriptor_;
}

const fmi2_import_get_fmu_state_req& fmi2_import_get_fmu_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_fmu_state_req* fmi2_import_get_fmu_state_req::default_instance_ = NULL;

fmi2_import_get_fmu_state_req* fmi2_import_get_fmu_state_req::New() const {
  return new fmi2_import_get_fmu_state_req;
}

void fmi2_import_get_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_fmu_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_fmu_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_fmu_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_fmu_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_fmu_state_req::MergeFrom(const fmi2_import_get_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_fmu_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_req::CopyFrom(const fmi2_import_get_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_fmu_state_req::Swap(fmi2_import_get_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_fmu_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_fmu_state_req_descriptor_;
  metadata.reflection = fmi2_import_get_fmu_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_get_fmu_state_res::kStateIdFieldNumber;
const int fmi2_import_get_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_fmu_state_res::fmi2_import_get_fmu_state_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_get_fmu_state_res::fmi2_import_get_fmu_state_res(const fmi2_import_get_fmu_state_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  stateid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_fmu_state_res::~fmi2_import_get_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_get_fmu_state_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_fmu_state_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_fmu_state_res_descriptor_;
}

const fmi2_import_get_fmu_state_res& fmi2_import_get_fmu_state_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_fmu_state_res* fmi2_import_get_fmu_state_res::default_instance_ = NULL;

fmi2_import_get_fmu_state_res* fmi2_import_get_fmu_state_res::New() const {
  return new fmi2_import_get_fmu_state_res;
}

void fmi2_import_get_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    stateid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stateid(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_fmu_state_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stateid(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 stateId = 2;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_fmu_state_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_fmu_state_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_fmu_state_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_fmu_state_res::MergeFrom(const fmi2_import_get_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_fmu_state_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_res::CopyFrom(const fmi2_import_get_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_fmu_state_res::Swap(fmi2_import_get_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(stateid_, other->stateid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_fmu_state_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_fmu_state_res_descriptor_;
  metadata.reflection = fmi2_import_get_fmu_state_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_set_fmu_state_req::kFmuIdFieldNumber;
const int fmi2_import_set_fmu_state_req::kStateIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_fmu_state_req::fmi2_import_set_fmu_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_set_fmu_state_req::fmi2_import_set_fmu_state_req(const fmi2_import_set_fmu_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  stateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_fmu_state_req::~fmi2_import_set_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_set_fmu_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_fmu_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_fmu_state_req_descriptor_;
}

const fmi2_import_set_fmu_state_req& fmi2_import_set_fmu_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_fmu_state_req* fmi2_import_set_fmu_state_req::default_instance_ = NULL;

fmi2_import_set_fmu_state_req* fmi2_import_set_fmu_state_req::New() const {
  return new fmi2_import_set_fmu_state_req;
}

void fmi2_import_set_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    stateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required int32 stateId = 3;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_fmu_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // required int32 stateId = 3;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required int32 stateId = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_fmu_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_fmu_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_fmu_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_fmu_state_req::MergeFrom(const fmi2_import_set_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_fmu_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_req::CopyFrom(const fmi2_import_set_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_fmu_state_req::Swap(fmi2_import_set_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_fmu_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_fmu_state_req_descriptor_;
  metadata.reflection = fmi2_import_set_fmu_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_set_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_fmu_state_res::fmi2_import_set_fmu_state_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_set_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_set_fmu_state_res::fmi2_import_set_fmu_state_res(const fmi2_import_set_fmu_state_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_fmu_state_res::~fmi2_import_set_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_set_fmu_state_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_set_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_set_fmu_state_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_set_fmu_state_res_descriptor_;
}

const fmi2_import_set_fmu_state_res& fmi2_import_set_fmu_state_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_set_fmu_state_res* fmi2_import_set_fmu_state_res::default_instance_ = NULL;

fmi2_import_set_fmu_state_res* fmi2_import_set_fmu_state_res::New() const {
  return new fmi2_import_set_fmu_state_res;
}

void fmi2_import_set_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_set_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_set_fmu_state_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_set_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_fmu_state_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_set_fmu_state_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_set_fmu_state_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_set_fmu_state_res::MergeFrom(const fmi2_import_set_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_set_fmu_state_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_res::CopyFrom(const fmi2_import_set_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_fmu_state_res::Swap(fmi2_import_set_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_set_fmu_state_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_set_fmu_state_res_descriptor_;
  metadata.reflection = fmi2_import_set_fmu_state_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_free_fmu_state_req::kStateIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_fmu_state_req::fmi2_import_free_fmu_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_free_fmu_state_req::fmi2_import_free_fmu_state_req(const fmi2_import_free_fmu_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  stateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_fmu_state_req::~fmi2_import_free_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_free_fmu_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_fmu_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_fmu_state_req_descriptor_;
}

const fmi2_import_free_fmu_state_req& fmi2_import_free_fmu_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_fmu_state_req* fmi2_import_free_fmu_state_req::default_instance_ = NULL;

fmi2_import_free_fmu_state_req* fmi2_import_free_fmu_state_req::New() const {
  return new fmi2_import_free_fmu_state_req;
}

void fmi2_import_free_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    stateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_fmu_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 stateId = 2;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_fmu_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_fmu_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_fmu_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_fmu_state_req::MergeFrom(const fmi2_import_free_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_fmu_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_req::CopyFrom(const fmi2_import_free_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_fmu_state_req::Swap(fmi2_import_free_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_fmu_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_fmu_state_req_descriptor_;
  metadata.reflection = fmi2_import_free_fmu_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_free_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_fmu_state_res::fmi2_import_free_fmu_state_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_free_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_free_fmu_state_res::fmi2_import_free_fmu_state_res(const fmi2_import_free_fmu_state_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_fmu_state_res::~fmi2_import_free_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_free_fmu_state_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_free_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_free_fmu_state_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_free_fmu_state_res_descriptor_;
}

const fmi2_import_free_fmu_state_res& fmi2_import_free_fmu_state_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_free_fmu_state_res* fmi2_import_free_fmu_state_res::default_instance_ = NULL;

fmi2_import_free_fmu_state_res* fmi2_import_free_fmu_state_res::New() const {
  return new fmi2_import_free_fmu_state_res;
}

void fmi2_import_free_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_free_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_free_fmu_state_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_free_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_fmu_state_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_free_fmu_state_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_free_fmu_state_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_free_fmu_state_res::MergeFrom(const fmi2_import_free_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_free_fmu_state_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_res::CopyFrom(const fmi2_import_free_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_fmu_state_res::Swap(fmi2_import_free_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_free_fmu_state_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_free_fmu_state_res_descriptor_;
  metadata.reflection = fmi2_import_free_fmu_state_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_directional_derivative_req::kMessageIdFieldNumber;
const int fmi2_import_get_directional_derivative_req::kFmuIdFieldNumber;
const int fmi2_import_get_directional_derivative_req::kVRefFieldNumber;
const int fmi2_import_get_directional_derivative_req::kZRefFieldNumber;
const int fmi2_import_get_directional_derivative_req::kDvFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_directional_derivative_req::fmi2_import_get_directional_derivative_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_directional_derivative_req::InitAsDefaultInstance() {
}

fmi2_import_get_directional_derivative_req::fmi2_import_get_directional_derivative_req(const fmi2_import_get_directional_derivative_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_directional_derivative_req::~fmi2_import_get_directional_derivative_req() {
  SharedDtor();
}

void fmi2_import_get_directional_derivative_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_directional_derivative_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_directional_derivative_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_directional_derivative_req_descriptor_;
}

const fmi2_import_get_directional_derivative_req& fmi2_import_get_directional_derivative_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_directional_derivative_req* fmi2_import_get_directional_derivative_req::default_instance_ = NULL;

fmi2_import_get_directional_derivative_req* fmi2_import_get_directional_derivative_req::New() const {
  return new fmi2_import_get_directional_derivative_req;
}

void fmi2_import_get_directional_derivative_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  v_ref_.Clear();
  z_ref_.Clear();
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_directional_derivative_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_ref;
        break;
      }

      // repeated int32 v_ref = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_v_ref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_v_ref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_ref;
        if (input->ExpectTag(32)) goto parse_z_ref;
        break;
      }

      // repeated int32 z_ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_z_ref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_z_ref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_z_ref;
        if (input->ExpectTag(41)) goto parse_dv;
        break;
      }

      // repeated double dv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_dv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_dv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_directional_derivative_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 v_ref = 3;
  for (int i = 0; i < this->v_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->v_ref(i), output);
  }

  // repeated int32 z_ref = 4;
  for (int i = 0; i < this->z_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->z_ref(i), output);
  }

  // repeated double dv = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->dv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_directional_derivative_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  // repeated int32 v_ref = 3;
  for (int i = 0; i < this->v_ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->v_ref(i), target);
  }

  // repeated int32 z_ref = 4;
  for (int i = 0; i < this->z_ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->z_ref(i), target);
  }

  // repeated double dv = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->dv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_directional_derivative_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 v_ref = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->v_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->v_ref(i));
    }
    total_size += 1 * this->v_ref_size() + data_size;
  }

  // repeated int32 z_ref = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->z_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->z_ref(i));
    }
    total_size += 1 * this->z_ref_size() + data_size;
  }

  // repeated double dv = 5;
  {
    int data_size = 0;
    data_size = 8 * this->dv_size();
    total_size += 1 * this->dv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_directional_derivative_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_directional_derivative_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_directional_derivative_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_directional_derivative_req::MergeFrom(const fmi2_import_get_directional_derivative_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  v_ref_.MergeFrom(from.v_ref_);
  z_ref_.MergeFrom(from.z_ref_);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_directional_derivative_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_req::CopyFrom(const fmi2_import_get_directional_derivative_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_directional_derivative_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_directional_derivative_req::Swap(fmi2_import_get_directional_derivative_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    v_ref_.Swap(&other->v_ref_);
    z_ref_.Swap(&other->z_ref_);
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_directional_derivative_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_directional_derivative_req_descriptor_;
  metadata.reflection = fmi2_import_get_directional_derivative_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_directional_derivative_res::kMessageIdFieldNumber;
const int fmi2_import_get_directional_derivative_res::kDzFieldNumber;
const int fmi2_import_get_directional_derivative_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_directional_derivative_res::fmi2_import_get_directional_derivative_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fmi2_import_get_directional_derivative_res::InitAsDefaultInstance() {
}

fmi2_import_get_directional_derivative_res::fmi2_import_get_directional_derivative_res(const fmi2_import_get_directional_derivative_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_directional_derivative_res::~fmi2_import_get_directional_derivative_res() {
  SharedDtor();
}

void fmi2_import_get_directional_derivative_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fmi2_import_get_directional_derivative_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fmi2_import_get_directional_derivative_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fmi2_import_get_directional_derivative_res_descriptor_;
}

const fmi2_import_get_directional_derivative_res& fmi2_import_get_directional_derivative_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

fmi2_import_get_directional_derivative_res* fmi2_import_get_directional_derivative_res::default_instance_ = NULL;

fmi2_import_get_directional_derivative_res* fmi2_import_get_directional_derivative_res::New() const {
  return new fmi2_import_get_directional_derivative_res;
}

void fmi2_import_get_directional_derivative_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  dz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fmi2_import_get_directional_derivative_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dz;
        break;
      }

      // repeated double dz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_dz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dz;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_directional_derivative_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double dz = 2;
  for (int i = 0; i < this->dz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->dz(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fmi2_import_get_directional_derivative_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // repeated double dz = 2;
  for (int i = 0; i < this->dz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->dz(i), target);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fmi2_import_get_directional_derivative_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double dz = 2;
  {
    int data_size = 0;
    data_size = 8 * this->dz_size();
    total_size += 1 * this->dz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_directional_derivative_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fmi2_import_get_directional_derivative_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fmi2_import_get_directional_derivative_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fmi2_import_get_directional_derivative_res::MergeFrom(const fmi2_import_get_directional_derivative_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  dz_.MergeFrom(from.dz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fmi2_import_get_directional_derivative_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_res::CopyFrom(const fmi2_import_get_directional_derivative_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_directional_derivative_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_directional_derivative_res::Swap(fmi2_import_get_directional_derivative_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    dz_.Swap(&other->dz_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fmi2_import_get_directional_derivative_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fmi2_import_get_directional_derivative_res_descriptor_;
  metadata.reflection = fmi2_import_get_directional_derivative_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_xml_req::kMessageIdFieldNumber;
const int get_xml_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

get_xml_req::get_xml_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_xml_req::InitAsDefaultInstance() {
}

get_xml_req::get_xml_req(const get_xml_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_xml_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_xml_req::~get_xml_req() {
  SharedDtor();
}

void get_xml_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_xml_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_xml_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_xml_req_descriptor_;
}

const get_xml_req& get_xml_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

get_xml_req* get_xml_req::default_instance_ = NULL;

get_xml_req* get_xml_req::New() const {
  return new get_xml_req;
}

void get_xml_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_xml_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_xml_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_xml_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fmuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_xml_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_xml_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_xml_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_xml_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_xml_req::MergeFrom(const get_xml_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_xml_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_xml_req::CopyFrom(const get_xml_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_xml_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void get_xml_req::Swap(get_xml_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_xml_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_xml_req_descriptor_;
  metadata.reflection = get_xml_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_xml_res::kMessageIdFieldNumber;
const int get_xml_res::kLogLevelFieldNumber;
const int get_xml_res::kXmlFieldNumber;
#endif  // !_MSC_VER

get_xml_res::get_xml_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_xml_res::InitAsDefaultInstance() {
}

get_xml_res::get_xml_res(const get_xml_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_xml_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  loglevel_ = 0;
  xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_xml_res::~get_xml_res() {
  SharedDtor();
}

void get_xml_res::SharedDtor() {
  if (xml_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_;
  }
  if (this != default_instance_) {
  }
}

void get_xml_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_xml_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_xml_res_descriptor_;
}

const get_xml_res& get_xml_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
  return *default_instance_;
}

get_xml_res* get_xml_res::default_instance_ = NULL;

get_xml_res* get_xml_res::New() const {
  return new get_xml_res;
}

void get_xml_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    loglevel_ = 0;
    if (has_xml()) {
      if (xml_ != &::google::protobuf::internal::kEmptyString) {
        xml_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_xml_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logLevel;
        break;
      }

      // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logLevel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_log_level_enu_t_IsValid(value)) {
            set_loglevel(static_cast< ::fmitcp_proto::jm_log_level_enu_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xml;
        break;
      }

      // required string xml = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xml().data(), this->xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_xml_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
  if (has_loglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loglevel(), output);
  }

  // required string xml = 3;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->xml(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_xml_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
  if (has_loglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loglevel(), target);
  }

  // required string xml = 3;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->xml(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_xml_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
    if (has_loglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loglevel());
    }

    // required string xml = 3;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_xml_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_xml_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_xml_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_xml_res::MergeFrom(const get_xml_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_loglevel()) {
      set_loglevel(from.loglevel());
    }
    if (from.has_xml()) {
      set_xml(from.xml());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_xml_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_xml_res::CopyFrom(const get_xml_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_xml_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void get_xml_res::Swap(get_xml_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(loglevel_, other->loglevel_);
    std::swap(xml_, other->xml_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_xml_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_xml_res_descriptor_;
  metadata.reflection = get_xml_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fmitcp_proto

// @@protoc_insertion_point(global_scope)
