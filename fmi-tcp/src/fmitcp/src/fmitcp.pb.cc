// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fmitcp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fmitcp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace fmitcp_proto {

void protobuf_ShutdownFile_fmitcp_2eproto() {
  delete fmitcp_message::default_instance_;
  delete fmi2_event_info_t::default_instance_;
  delete fmi2_import_instantiate_req::default_instance_;
  delete fmi2_import_instantiate_res::default_instance_;
  delete fmi2_import_initialize_slave_req::default_instance_;
  delete fmi2_import_initialize_slave_res::default_instance_;
  delete fmi2_import_terminate_slave_req::default_instance_;
  delete fmi2_import_terminate_slave_res::default_instance_;
  delete fmi2_import_reset_slave_req::default_instance_;
  delete fmi2_import_reset_slave_res::default_instance_;
  delete fmi2_import_free_slave_instance_req::default_instance_;
  delete fmi2_import_free_slave_instance_res::default_instance_;
  delete fmi2_import_set_real_input_derivatives_req::default_instance_;
  delete fmi2_import_set_real_input_derivatives_res::default_instance_;
  delete fmi2_import_get_real_output_derivatives_req::default_instance_;
  delete fmi2_import_get_real_output_derivatives_res::default_instance_;
  delete fmi2_import_cancel_step_req::default_instance_;
  delete fmi2_import_cancel_step_res::default_instance_;
  delete fmi2_import_do_step_req::default_instance_;
  delete fmi2_import_do_step_res::default_instance_;
  delete fmi2_import_get_status_req::default_instance_;
  delete fmi2_import_get_status_res::default_instance_;
  delete fmi2_import_get_real_status_req::default_instance_;
  delete fmi2_import_get_real_status_res::default_instance_;
  delete fmi2_import_get_integer_status_req::default_instance_;
  delete fmi2_import_get_integer_status_res::default_instance_;
  delete fmi2_import_get_boolean_status_req::default_instance_;
  delete fmi2_import_get_boolean_status_res::default_instance_;
  delete fmi2_import_get_string_status_req::default_instance_;
  delete fmi2_import_get_string_status_res::default_instance_;
  delete fmi2_import_instantiate_model_req::default_instance_;
  delete fmi2_import_instantiate_model_res::default_instance_;
  delete fmi2_import_free_model_instance_req::default_instance_;
  delete fmi2_import_free_model_instance_res::default_instance_;
  delete fmi2_import_set_time_req::default_instance_;
  delete fmi2_import_set_time_res::default_instance_;
  delete fmi2_import_set_continuous_states_req::default_instance_;
  delete fmi2_import_set_continuous_states_res::default_instance_;
  delete fmi2_import_completed_integrator_step_req::default_instance_;
  delete fmi2_import_completed_integrator_step_res::default_instance_;
  delete fmi2_import_initialize_model_req::default_instance_;
  delete fmi2_import_initialize_model_res::default_instance_;
  delete fmi2_import_get_derivatives_req::default_instance_;
  delete fmi2_import_get_derivatives_res::default_instance_;
  delete fmi2_import_get_event_indicators_req::default_instance_;
  delete fmi2_import_get_event_indicators_res::default_instance_;
  delete fmi2_import_eventUpdate_req::default_instance_;
  delete fmi2_import_eventUpdate_res::default_instance_;
  delete fmi2_import_completed_event_iteration_req::default_instance_;
  delete fmi2_import_completed_event_iteration_res::default_instance_;
  delete fmi2_import_get_continuous_states_req::default_instance_;
  delete fmi2_import_get_continuous_states_res::default_instance_;
  delete fmi2_import_get_nominal_continuous_states_req::default_instance_;
  delete fmi2_import_get_nominal_continuous_states_res::default_instance_;
  delete fmi2_import_terminate_req::default_instance_;
  delete fmi2_import_terminate_res::default_instance_;
  delete fmi2_import_get_version_req::default_instance_;
  delete fmi2_import_get_version_res::default_instance_;
  delete fmi2_import_set_debug_logging_req::default_instance_;
  delete fmi2_import_set_debug_logging_res::default_instance_;
  delete fmi2_import_set_real_req::default_instance_;
  delete fmi2_import_set_real_res::default_instance_;
  delete fmi2_import_set_integer_req::default_instance_;
  delete fmi2_import_set_integer_res::default_instance_;
  delete fmi2_import_set_boolean_req::default_instance_;
  delete fmi2_import_set_boolean_res::default_instance_;
  delete fmi2_import_set_string_req::default_instance_;
  delete fmi2_import_set_string_res::default_instance_;
  delete fmi2_import_get_real_req::default_instance_;
  delete fmi2_import_get_real_res::default_instance_;
  delete fmi2_import_get_integer_req::default_instance_;
  delete fmi2_import_get_integer_res::default_instance_;
  delete fmi2_import_get_boolean_req::default_instance_;
  delete fmi2_import_get_boolean_res::default_instance_;
  delete fmi2_import_get_string_req::default_instance_;
  delete fmi2_import_get_string_res::default_instance_;
  delete char_req::default_instance_;
  delete char_res::default_instance_;
  delete fmi2_import_get_fmu_state_req::default_instance_;
  delete fmi2_import_get_fmu_state_res::default_instance_;
  delete fmi2_import_set_fmu_state_req::default_instance_;
  delete fmi2_import_set_fmu_state_res::default_instance_;
  delete fmi2_import_free_fmu_state_req::default_instance_;
  delete fmi2_import_free_fmu_state_res::default_instance_;
  delete fmi2_import_get_directional_derivative_req::default_instance_;
  delete fmi2_import_get_directional_derivative_res::default_instance_;
  delete get_xml_req::default_instance_;
  delete get_xml_res::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_fmitcp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_fmitcp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  fmitcp_message::default_instance_ = new fmitcp_message();
  fmi2_event_info_t::default_instance_ = new fmi2_event_info_t();
  fmi2_import_instantiate_req::default_instance_ = new fmi2_import_instantiate_req();
  fmi2_import_instantiate_res::default_instance_ = new fmi2_import_instantiate_res();
  fmi2_import_initialize_slave_req::default_instance_ = new fmi2_import_initialize_slave_req();
  fmi2_import_initialize_slave_res::default_instance_ = new fmi2_import_initialize_slave_res();
  fmi2_import_terminate_slave_req::default_instance_ = new fmi2_import_terminate_slave_req();
  fmi2_import_terminate_slave_res::default_instance_ = new fmi2_import_terminate_slave_res();
  fmi2_import_reset_slave_req::default_instance_ = new fmi2_import_reset_slave_req();
  fmi2_import_reset_slave_res::default_instance_ = new fmi2_import_reset_slave_res();
  fmi2_import_free_slave_instance_req::default_instance_ = new fmi2_import_free_slave_instance_req();
  fmi2_import_free_slave_instance_res::default_instance_ = new fmi2_import_free_slave_instance_res();
  fmi2_import_set_real_input_derivatives_req::default_instance_ = new fmi2_import_set_real_input_derivatives_req();
  fmi2_import_set_real_input_derivatives_res::default_instance_ = new fmi2_import_set_real_input_derivatives_res();
  fmi2_import_get_real_output_derivatives_req::default_instance_ = new fmi2_import_get_real_output_derivatives_req();
  fmi2_import_get_real_output_derivatives_res::default_instance_ = new fmi2_import_get_real_output_derivatives_res();
  fmi2_import_cancel_step_req::default_instance_ = new fmi2_import_cancel_step_req();
  fmi2_import_cancel_step_res::default_instance_ = new fmi2_import_cancel_step_res();
  fmi2_import_do_step_req::default_instance_ = new fmi2_import_do_step_req();
  fmi2_import_do_step_res::default_instance_ = new fmi2_import_do_step_res();
  fmi2_import_get_status_req::default_instance_ = new fmi2_import_get_status_req();
  fmi2_import_get_status_res::default_instance_ = new fmi2_import_get_status_res();
  fmi2_import_get_real_status_req::default_instance_ = new fmi2_import_get_real_status_req();
  fmi2_import_get_real_status_res::default_instance_ = new fmi2_import_get_real_status_res();
  fmi2_import_get_integer_status_req::default_instance_ = new fmi2_import_get_integer_status_req();
  fmi2_import_get_integer_status_res::default_instance_ = new fmi2_import_get_integer_status_res();
  fmi2_import_get_boolean_status_req::default_instance_ = new fmi2_import_get_boolean_status_req();
  fmi2_import_get_boolean_status_res::default_instance_ = new fmi2_import_get_boolean_status_res();
  fmi2_import_get_string_status_req::default_instance_ = new fmi2_import_get_string_status_req();
  fmi2_import_get_string_status_res::default_instance_ = new fmi2_import_get_string_status_res();
  fmi2_import_instantiate_model_req::default_instance_ = new fmi2_import_instantiate_model_req();
  fmi2_import_instantiate_model_res::default_instance_ = new fmi2_import_instantiate_model_res();
  fmi2_import_free_model_instance_req::default_instance_ = new fmi2_import_free_model_instance_req();
  fmi2_import_free_model_instance_res::default_instance_ = new fmi2_import_free_model_instance_res();
  fmi2_import_set_time_req::default_instance_ = new fmi2_import_set_time_req();
  fmi2_import_set_time_res::default_instance_ = new fmi2_import_set_time_res();
  fmi2_import_set_continuous_states_req::default_instance_ = new fmi2_import_set_continuous_states_req();
  fmi2_import_set_continuous_states_res::default_instance_ = new fmi2_import_set_continuous_states_res();
  fmi2_import_completed_integrator_step_req::default_instance_ = new fmi2_import_completed_integrator_step_req();
  fmi2_import_completed_integrator_step_res::default_instance_ = new fmi2_import_completed_integrator_step_res();
  fmi2_import_initialize_model_req::default_instance_ = new fmi2_import_initialize_model_req();
  fmi2_import_initialize_model_res::default_instance_ = new fmi2_import_initialize_model_res();
  fmi2_import_get_derivatives_req::default_instance_ = new fmi2_import_get_derivatives_req();
  fmi2_import_get_derivatives_res::default_instance_ = new fmi2_import_get_derivatives_res();
  fmi2_import_get_event_indicators_req::default_instance_ = new fmi2_import_get_event_indicators_req();
  fmi2_import_get_event_indicators_res::default_instance_ = new fmi2_import_get_event_indicators_res();
  fmi2_import_eventUpdate_req::default_instance_ = new fmi2_import_eventUpdate_req();
  fmi2_import_eventUpdate_res::default_instance_ = new fmi2_import_eventUpdate_res();
  fmi2_import_completed_event_iteration_req::default_instance_ = new fmi2_import_completed_event_iteration_req();
  fmi2_import_completed_event_iteration_res::default_instance_ = new fmi2_import_completed_event_iteration_res();
  fmi2_import_get_continuous_states_req::default_instance_ = new fmi2_import_get_continuous_states_req();
  fmi2_import_get_continuous_states_res::default_instance_ = new fmi2_import_get_continuous_states_res();
  fmi2_import_get_nominal_continuous_states_req::default_instance_ = new fmi2_import_get_nominal_continuous_states_req();
  fmi2_import_get_nominal_continuous_states_res::default_instance_ = new fmi2_import_get_nominal_continuous_states_res();
  fmi2_import_terminate_req::default_instance_ = new fmi2_import_terminate_req();
  fmi2_import_terminate_res::default_instance_ = new fmi2_import_terminate_res();
  fmi2_import_get_version_req::default_instance_ = new fmi2_import_get_version_req();
  fmi2_import_get_version_res::default_instance_ = new fmi2_import_get_version_res();
  fmi2_import_set_debug_logging_req::default_instance_ = new fmi2_import_set_debug_logging_req();
  fmi2_import_set_debug_logging_res::default_instance_ = new fmi2_import_set_debug_logging_res();
  fmi2_import_set_real_req::default_instance_ = new fmi2_import_set_real_req();
  fmi2_import_set_real_res::default_instance_ = new fmi2_import_set_real_res();
  fmi2_import_set_integer_req::default_instance_ = new fmi2_import_set_integer_req();
  fmi2_import_set_integer_res::default_instance_ = new fmi2_import_set_integer_res();
  fmi2_import_set_boolean_req::default_instance_ = new fmi2_import_set_boolean_req();
  fmi2_import_set_boolean_res::default_instance_ = new fmi2_import_set_boolean_res();
  fmi2_import_set_string_req::default_instance_ = new fmi2_import_set_string_req();
  fmi2_import_set_string_res::default_instance_ = new fmi2_import_set_string_res();
  fmi2_import_get_real_req::default_instance_ = new fmi2_import_get_real_req();
  fmi2_import_get_real_res::default_instance_ = new fmi2_import_get_real_res();
  fmi2_import_get_integer_req::default_instance_ = new fmi2_import_get_integer_req();
  fmi2_import_get_integer_res::default_instance_ = new fmi2_import_get_integer_res();
  fmi2_import_get_boolean_req::default_instance_ = new fmi2_import_get_boolean_req();
  fmi2_import_get_boolean_res::default_instance_ = new fmi2_import_get_boolean_res();
  fmi2_import_get_string_req::default_instance_ = new fmi2_import_get_string_req();
  fmi2_import_get_string_res::default_instance_ = new fmi2_import_get_string_res();
  char_req::default_instance_ = new char_req();
  char_res::default_instance_ = new char_res();
  fmi2_import_get_fmu_state_req::default_instance_ = new fmi2_import_get_fmu_state_req();
  fmi2_import_get_fmu_state_res::default_instance_ = new fmi2_import_get_fmu_state_res();
  fmi2_import_set_fmu_state_req::default_instance_ = new fmi2_import_set_fmu_state_req();
  fmi2_import_set_fmu_state_res::default_instance_ = new fmi2_import_set_fmu_state_res();
  fmi2_import_free_fmu_state_req::default_instance_ = new fmi2_import_free_fmu_state_req();
  fmi2_import_free_fmu_state_res::default_instance_ = new fmi2_import_free_fmu_state_res();
  fmi2_import_get_directional_derivative_req::default_instance_ = new fmi2_import_get_directional_derivative_req();
  fmi2_import_get_directional_derivative_res::default_instance_ = new fmi2_import_get_directional_derivative_res();
  get_xml_req::default_instance_ = new get_xml_req();
  get_xml_res::default_instance_ = new get_xml_res();
  fmitcp_message::default_instance_->InitAsDefaultInstance();
  fmi2_event_info_t::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_reset_slave_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_reset_slave_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_slave_instance_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_slave_instance_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_input_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_input_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_output_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_output_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_cancel_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_cancel_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_do_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_do_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_status_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_status_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_model_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_instantiate_model_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_model_instance_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_model_instance_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_time_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_time_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_integrator_step_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_integrator_step_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_model_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_initialize_model_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_derivatives_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_derivatives_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_event_indicators_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_event_indicators_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_eventUpdate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_eventUpdate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_event_iteration_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_completed_event_iteration_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_nominal_continuous_states_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_nominal_continuous_states_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_terminate_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_version_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_version_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_debug_logging_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_debug_logging_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_real_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_integer_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_integer_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_boolean_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_boolean_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_string_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_string_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_real_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_integer_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_boolean_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_string_res::default_instance_->InitAsDefaultInstance();
  char_req::default_instance_->InitAsDefaultInstance();
  char_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_set_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_fmu_state_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_free_fmu_state_res::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_directional_derivative_req::default_instance_->InitAsDefaultInstance();
  fmi2_import_get_directional_derivative_res::default_instance_->InitAsDefaultInstance();
  get_xml_req::default_instance_->InitAsDefaultInstance();
  get_xml_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fmitcp_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fmitcp_2eproto_once_);
void protobuf_AddDesc_fmitcp_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fmitcp_2eproto_once_,
                 &protobuf_AddDesc_fmitcp_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fmitcp_2eproto {
  StaticDescriptorInitializer_fmitcp_2eproto() {
    protobuf_AddDesc_fmitcp_2eproto();
  }
} static_descriptor_initializer_fmitcp_2eproto_;
#endif
bool jm_log_level_enu_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool fmi2_status_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool fmi2_status_kind_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool jm_status_enu_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool fmitcp_message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_reset_slave_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_reset_slave_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_slave_instance_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_slave_instance_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_input_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_input_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_output_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_output_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_cancel_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_cancel_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_do_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_do_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_status_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_status_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_model_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_instantiate_model_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_model_instance_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_model_instance_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_time_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_time_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_integrator_step_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_integrator_step_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_model_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_initialize_model_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_derivatives_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_derivatives_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_event_indicators_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_event_indicators_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_eventUpdate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_eventUpdate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_event_iteration_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_completed_event_iteration_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_nominal_continuous_states_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_nominal_continuous_states_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_terminate_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_version_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_version_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_debug_logging_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_debug_logging_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_real_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_integer_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_integer_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_boolean_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_boolean_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_string_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_string_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_real_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_integer_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_boolean_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_string_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_set_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_free_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialized_fmu_state_size_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialized_fmu_state_size_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialize_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_serialize_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_de_serialize_fmu_state_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_de_serialize_fmu_state_res;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_directional_derivative_req;
const fmitcp_message_Type fmitcp_message::type_fmi2_import_get_directional_derivative_res;
const fmitcp_message_Type fmitcp_message::type_get_xml_req;
const fmitcp_message_Type fmitcp_message::type_get_xml_res;
const fmitcp_message_Type fmitcp_message::Type_MIN;
const fmitcp_message_Type fmitcp_message::Type_MAX;
const int fmitcp_message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int fmitcp_message::kTypeFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateReqFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateResFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportResetSlaveReqFieldNumber;
const int fmitcp_message::kFmi2ImportResetSlaveResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeSlaveInstanceReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeSlaveInstanceResFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealInputDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealInputDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealOutputDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealOutputDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportCancelStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportCancelStepResFieldNumber;
const int fmitcp_message::kFmi2ImportDoStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportDoStepResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringStatusReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringStatusResFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateModelReqFieldNumber;
const int fmitcp_message::kFmi2ImportInstantiateModelResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeModelInstanceReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeModelInstanceResFieldNumber;
const int fmitcp_message::kFmi2ImportSetTimeReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetTimeResFieldNumber;
const int fmitcp_message::kFmi2ImportSetContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedIntegratorStepReqFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedIntegratorStepResFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeModelReqFieldNumber;
const int fmitcp_message::kFmi2ImportInitializeModelResFieldNumber;
const int fmitcp_message::kFmi2ImportGetDerivativesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetDerivativesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetEventIndicatorsReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetEventIndicatorsResFieldNumber;
const int fmitcp_message::kFmi2ImportEventUpdateReqFieldNumber;
const int fmitcp_message::kFmi2ImportEventUpdateResFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedEventIterationReqFieldNumber;
const int fmitcp_message::kFmi2ImportCompletedEventIterationResFieldNumber;
const int fmitcp_message::kFmi2ImportGetContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportGetNominalContinuousStatesReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetNominalContinuousStatesResFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateReqFieldNumber;
const int fmitcp_message::kFmi2ImportTerminateResFieldNumber;
const int fmitcp_message::kFmi2ImportGetVersionReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetVersionResFieldNumber;
const int fmitcp_message::kFmi2ImportSetDebugLoggingReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetDebugLoggingResFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetRealResFieldNumber;
const int fmitcp_message::kFmi2ImportSetIntegerReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetIntegerResFieldNumber;
const int fmitcp_message::kFmi2ImportSetBooleanReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetBooleanResFieldNumber;
const int fmitcp_message::kFmi2ImportSetStringReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetStringResFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetRealResFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetIntegerResFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetBooleanResFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetStringResFieldNumber;
const int fmitcp_message::kFmi2ImportGetFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportSetFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportSetFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportFreeFmuStateReqFieldNumber;
const int fmitcp_message::kFmi2ImportFreeFmuStateResFieldNumber;
const int fmitcp_message::kFmi2ImportGetDirectionalDerivativeReqFieldNumber;
const int fmitcp_message::kFmi2ImportGetDirectionalDerivativeResFieldNumber;
const int fmitcp_message::kGetXmlReqFieldNumber;
const int fmitcp_message::kGetXmlResFieldNumber;
#endif  // !_MSC_VER

fmitcp_message::fmitcp_message()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmitcp_message::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_instantiate_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_req*>(
      ::fmitcp_proto::fmi2_import_instantiate_req::internal_default_instance());
#else
  fmi2_import_instantiate_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_req*>(&::fmitcp_proto::fmi2_import_instantiate_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_instantiate_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_res*>(
      ::fmitcp_proto::fmi2_import_instantiate_res::internal_default_instance());
#else
  fmi2_import_instantiate_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_res*>(&::fmitcp_proto::fmi2_import_instantiate_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_initialize_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_req*>(
      ::fmitcp_proto::fmi2_import_initialize_slave_req::internal_default_instance());
#else
  fmi2_import_initialize_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_req*>(&::fmitcp_proto::fmi2_import_initialize_slave_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_initialize_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_res*>(
      ::fmitcp_proto::fmi2_import_initialize_slave_res::internal_default_instance());
#else
  fmi2_import_initialize_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_slave_res*>(&::fmitcp_proto::fmi2_import_initialize_slave_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_terminate_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_req*>(
      ::fmitcp_proto::fmi2_import_terminate_slave_req::internal_default_instance());
#else
  fmi2_import_terminate_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_req*>(&::fmitcp_proto::fmi2_import_terminate_slave_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_terminate_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_res*>(
      ::fmitcp_proto::fmi2_import_terminate_slave_res::internal_default_instance());
#else
  fmi2_import_terminate_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_slave_res*>(&::fmitcp_proto::fmi2_import_terminate_slave_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_reset_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_req*>(
      ::fmitcp_proto::fmi2_import_reset_slave_req::internal_default_instance());
#else
  fmi2_import_reset_slave_req_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_req*>(&::fmitcp_proto::fmi2_import_reset_slave_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_reset_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_res*>(
      ::fmitcp_proto::fmi2_import_reset_slave_res::internal_default_instance());
#else
  fmi2_import_reset_slave_res_ = const_cast< ::fmitcp_proto::fmi2_import_reset_slave_res*>(&::fmitcp_proto::fmi2_import_reset_slave_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_slave_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_req*>(
      ::fmitcp_proto::fmi2_import_free_slave_instance_req::internal_default_instance());
#else
  fmi2_import_free_slave_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_req*>(&::fmitcp_proto::fmi2_import_free_slave_instance_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_slave_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_res*>(
      ::fmitcp_proto::fmi2_import_free_slave_instance_res::internal_default_instance());
#else
  fmi2_import_free_slave_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_slave_instance_res*>(&::fmitcp_proto::fmi2_import_free_slave_instance_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_real_input_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_req*>(
      ::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::internal_default_instance());
#else
  fmi2_import_set_real_input_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_req*>(&::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_real_input_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_res*>(
      ::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::internal_default_instance());
#else
  fmi2_import_set_real_input_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_input_derivatives_res*>(&::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_output_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_req*>(
      ::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::internal_default_instance());
#else
  fmi2_import_get_real_output_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_req*>(&::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_output_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_res*>(
      ::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::internal_default_instance());
#else
  fmi2_import_get_real_output_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_output_derivatives_res*>(&::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_cancel_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_req*>(
      ::fmitcp_proto::fmi2_import_cancel_step_req::internal_default_instance());
#else
  fmi2_import_cancel_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_req*>(&::fmitcp_proto::fmi2_import_cancel_step_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_cancel_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_res*>(
      ::fmitcp_proto::fmi2_import_cancel_step_res::internal_default_instance());
#else
  fmi2_import_cancel_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_cancel_step_res*>(&::fmitcp_proto::fmi2_import_cancel_step_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_do_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_req*>(
      ::fmitcp_proto::fmi2_import_do_step_req::internal_default_instance());
#else
  fmi2_import_do_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_req*>(&::fmitcp_proto::fmi2_import_do_step_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_do_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_res*>(
      ::fmitcp_proto::fmi2_import_do_step_res::internal_default_instance());
#else
  fmi2_import_do_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_do_step_res*>(&::fmitcp_proto::fmi2_import_do_step_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_req*>(
      ::fmitcp_proto::fmi2_import_get_status_req::internal_default_instance());
#else
  fmi2_import_get_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_req*>(&::fmitcp_proto::fmi2_import_get_status_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_res*>(
      ::fmitcp_proto::fmi2_import_get_status_res::internal_default_instance());
#else
  fmi2_import_get_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_status_res*>(&::fmitcp_proto::fmi2_import_get_status_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_req*>(
      ::fmitcp_proto::fmi2_import_get_real_status_req::internal_default_instance());
#else
  fmi2_import_get_real_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_req*>(&::fmitcp_proto::fmi2_import_get_real_status_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_res*>(
      ::fmitcp_proto::fmi2_import_get_real_status_res::internal_default_instance());
#else
  fmi2_import_get_real_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_status_res*>(&::fmitcp_proto::fmi2_import_get_real_status_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_integer_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_req*>(
      ::fmitcp_proto::fmi2_import_get_integer_status_req::internal_default_instance());
#else
  fmi2_import_get_integer_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_req*>(&::fmitcp_proto::fmi2_import_get_integer_status_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_integer_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_res*>(
      ::fmitcp_proto::fmi2_import_get_integer_status_res::internal_default_instance());
#else
  fmi2_import_get_integer_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_status_res*>(&::fmitcp_proto::fmi2_import_get_integer_status_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_boolean_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_req*>(
      ::fmitcp_proto::fmi2_import_get_boolean_status_req::internal_default_instance());
#else
  fmi2_import_get_boolean_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_req*>(&::fmitcp_proto::fmi2_import_get_boolean_status_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_boolean_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_res*>(
      ::fmitcp_proto::fmi2_import_get_boolean_status_res::internal_default_instance());
#else
  fmi2_import_get_boolean_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_status_res*>(&::fmitcp_proto::fmi2_import_get_boolean_status_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_string_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_req*>(
      ::fmitcp_proto::fmi2_import_get_string_status_req::internal_default_instance());
#else
  fmi2_import_get_string_status_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_req*>(&::fmitcp_proto::fmi2_import_get_string_status_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_string_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_res*>(
      ::fmitcp_proto::fmi2_import_get_string_status_res::internal_default_instance());
#else
  fmi2_import_get_string_status_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_status_res*>(&::fmitcp_proto::fmi2_import_get_string_status_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_instantiate_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_req*>(
      ::fmitcp_proto::fmi2_import_instantiate_model_req::internal_default_instance());
#else
  fmi2_import_instantiate_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_req*>(&::fmitcp_proto::fmi2_import_instantiate_model_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_instantiate_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_res*>(
      ::fmitcp_proto::fmi2_import_instantiate_model_res::internal_default_instance());
#else
  fmi2_import_instantiate_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_instantiate_model_res*>(&::fmitcp_proto::fmi2_import_instantiate_model_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_model_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_req*>(
      ::fmitcp_proto::fmi2_import_free_model_instance_req::internal_default_instance());
#else
  fmi2_import_free_model_instance_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_req*>(&::fmitcp_proto::fmi2_import_free_model_instance_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_model_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_res*>(
      ::fmitcp_proto::fmi2_import_free_model_instance_res::internal_default_instance());
#else
  fmi2_import_free_model_instance_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_model_instance_res*>(&::fmitcp_proto::fmi2_import_free_model_instance_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_time_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_req*>(
      ::fmitcp_proto::fmi2_import_set_time_req::internal_default_instance());
#else
  fmi2_import_set_time_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_req*>(&::fmitcp_proto::fmi2_import_set_time_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_time_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_res*>(
      ::fmitcp_proto::fmi2_import_set_time_res::internal_default_instance());
#else
  fmi2_import_set_time_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_time_res*>(&::fmitcp_proto::fmi2_import_set_time_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_req*>(
      ::fmitcp_proto::fmi2_import_set_continuous_states_req::internal_default_instance());
#else
  fmi2_import_set_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_req*>(&::fmitcp_proto::fmi2_import_set_continuous_states_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_res*>(
      ::fmitcp_proto::fmi2_import_set_continuous_states_res::internal_default_instance());
#else
  fmi2_import_set_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_continuous_states_res*>(&::fmitcp_proto::fmi2_import_set_continuous_states_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_completed_integrator_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_req*>(
      ::fmitcp_proto::fmi2_import_completed_integrator_step_req::internal_default_instance());
#else
  fmi2_import_completed_integrator_step_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_req*>(&::fmitcp_proto::fmi2_import_completed_integrator_step_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_completed_integrator_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_res*>(
      ::fmitcp_proto::fmi2_import_completed_integrator_step_res::internal_default_instance());
#else
  fmi2_import_completed_integrator_step_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_integrator_step_res*>(&::fmitcp_proto::fmi2_import_completed_integrator_step_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_initialize_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_req*>(
      ::fmitcp_proto::fmi2_import_initialize_model_req::internal_default_instance());
#else
  fmi2_import_initialize_model_req_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_req*>(&::fmitcp_proto::fmi2_import_initialize_model_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_initialize_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_res*>(
      ::fmitcp_proto::fmi2_import_initialize_model_res::internal_default_instance());
#else
  fmi2_import_initialize_model_res_ = const_cast< ::fmitcp_proto::fmi2_import_initialize_model_res*>(&::fmitcp_proto::fmi2_import_initialize_model_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_req*>(
      ::fmitcp_proto::fmi2_import_get_derivatives_req::internal_default_instance());
#else
  fmi2_import_get_derivatives_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_req*>(&::fmitcp_proto::fmi2_import_get_derivatives_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_res*>(
      ::fmitcp_proto::fmi2_import_get_derivatives_res::internal_default_instance());
#else
  fmi2_import_get_derivatives_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_derivatives_res*>(&::fmitcp_proto::fmi2_import_get_derivatives_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_event_indicators_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_req*>(
      ::fmitcp_proto::fmi2_import_get_event_indicators_req::internal_default_instance());
#else
  fmi2_import_get_event_indicators_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_req*>(&::fmitcp_proto::fmi2_import_get_event_indicators_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_event_indicators_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_res*>(
      ::fmitcp_proto::fmi2_import_get_event_indicators_res::internal_default_instance());
#else
  fmi2_import_get_event_indicators_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_event_indicators_res*>(&::fmitcp_proto::fmi2_import_get_event_indicators_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_eventupdate_req_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_req*>(
      ::fmitcp_proto::fmi2_import_eventUpdate_req::internal_default_instance());
#else
  fmi2_import_eventupdate_req_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_req*>(&::fmitcp_proto::fmi2_import_eventUpdate_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_eventupdate_res_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_res*>(
      ::fmitcp_proto::fmi2_import_eventUpdate_res::internal_default_instance());
#else
  fmi2_import_eventupdate_res_ = const_cast< ::fmitcp_proto::fmi2_import_eventUpdate_res*>(&::fmitcp_proto::fmi2_import_eventUpdate_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_completed_event_iteration_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_req*>(
      ::fmitcp_proto::fmi2_import_completed_event_iteration_req::internal_default_instance());
#else
  fmi2_import_completed_event_iteration_req_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_req*>(&::fmitcp_proto::fmi2_import_completed_event_iteration_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_completed_event_iteration_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_res*>(
      ::fmitcp_proto::fmi2_import_completed_event_iteration_res::internal_default_instance());
#else
  fmi2_import_completed_event_iteration_res_ = const_cast< ::fmitcp_proto::fmi2_import_completed_event_iteration_res*>(&::fmitcp_proto::fmi2_import_completed_event_iteration_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_req*>(
      ::fmitcp_proto::fmi2_import_get_continuous_states_req::internal_default_instance());
#else
  fmi2_import_get_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_req*>(&::fmitcp_proto::fmi2_import_get_continuous_states_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_res*>(
      ::fmitcp_proto::fmi2_import_get_continuous_states_res::internal_default_instance());
#else
  fmi2_import_get_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_continuous_states_res*>(&::fmitcp_proto::fmi2_import_get_continuous_states_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_nominal_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req*>(
      ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::internal_default_instance());
#else
  fmi2_import_get_nominal_continuous_states_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req*>(&::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_nominal_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res*>(
      ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::internal_default_instance());
#else
  fmi2_import_get_nominal_continuous_states_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res*>(&::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_terminate_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_req*>(
      ::fmitcp_proto::fmi2_import_terminate_req::internal_default_instance());
#else
  fmi2_import_terminate_req_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_req*>(&::fmitcp_proto::fmi2_import_terminate_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_terminate_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_res*>(
      ::fmitcp_proto::fmi2_import_terminate_res::internal_default_instance());
#else
  fmi2_import_terminate_res_ = const_cast< ::fmitcp_proto::fmi2_import_terminate_res*>(&::fmitcp_proto::fmi2_import_terminate_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_version_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_req*>(
      ::fmitcp_proto::fmi2_import_get_version_req::internal_default_instance());
#else
  fmi2_import_get_version_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_req*>(&::fmitcp_proto::fmi2_import_get_version_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_version_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_res*>(
      ::fmitcp_proto::fmi2_import_get_version_res::internal_default_instance());
#else
  fmi2_import_get_version_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_version_res*>(&::fmitcp_proto::fmi2_import_get_version_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_debug_logging_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_req*>(
      ::fmitcp_proto::fmi2_import_set_debug_logging_req::internal_default_instance());
#else
  fmi2_import_set_debug_logging_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_req*>(&::fmitcp_proto::fmi2_import_set_debug_logging_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_debug_logging_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_res*>(
      ::fmitcp_proto::fmi2_import_set_debug_logging_res::internal_default_instance());
#else
  fmi2_import_set_debug_logging_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_debug_logging_res*>(&::fmitcp_proto::fmi2_import_set_debug_logging_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_req*>(
      ::fmitcp_proto::fmi2_import_set_real_req::internal_default_instance());
#else
  fmi2_import_set_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_req*>(&::fmitcp_proto::fmi2_import_set_real_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_res*>(
      ::fmitcp_proto::fmi2_import_set_real_res::internal_default_instance());
#else
  fmi2_import_set_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_real_res*>(&::fmitcp_proto::fmi2_import_set_real_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_req*>(
      ::fmitcp_proto::fmi2_import_set_integer_req::internal_default_instance());
#else
  fmi2_import_set_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_req*>(&::fmitcp_proto::fmi2_import_set_integer_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_res*>(
      ::fmitcp_proto::fmi2_import_set_integer_res::internal_default_instance());
#else
  fmi2_import_set_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_integer_res*>(&::fmitcp_proto::fmi2_import_set_integer_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_req*>(
      ::fmitcp_proto::fmi2_import_set_boolean_req::internal_default_instance());
#else
  fmi2_import_set_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_req*>(&::fmitcp_proto::fmi2_import_set_boolean_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_res*>(
      ::fmitcp_proto::fmi2_import_set_boolean_res::internal_default_instance());
#else
  fmi2_import_set_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_boolean_res*>(&::fmitcp_proto::fmi2_import_set_boolean_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_req*>(
      ::fmitcp_proto::fmi2_import_set_string_req::internal_default_instance());
#else
  fmi2_import_set_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_req*>(&::fmitcp_proto::fmi2_import_set_string_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_res*>(
      ::fmitcp_proto::fmi2_import_set_string_res::internal_default_instance());
#else
  fmi2_import_set_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_string_res*>(&::fmitcp_proto::fmi2_import_set_string_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_req*>(
      ::fmitcp_proto::fmi2_import_get_real_req::internal_default_instance());
#else
  fmi2_import_get_real_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_req*>(&::fmitcp_proto::fmi2_import_get_real_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_res*>(
      ::fmitcp_proto::fmi2_import_get_real_res::internal_default_instance());
#else
  fmi2_import_get_real_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_real_res*>(&::fmitcp_proto::fmi2_import_get_real_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_req*>(
      ::fmitcp_proto::fmi2_import_get_integer_req::internal_default_instance());
#else
  fmi2_import_get_integer_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_req*>(&::fmitcp_proto::fmi2_import_get_integer_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_res*>(
      ::fmitcp_proto::fmi2_import_get_integer_res::internal_default_instance());
#else
  fmi2_import_get_integer_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_integer_res*>(&::fmitcp_proto::fmi2_import_get_integer_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_req*>(
      ::fmitcp_proto::fmi2_import_get_boolean_req::internal_default_instance());
#else
  fmi2_import_get_boolean_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_req*>(&::fmitcp_proto::fmi2_import_get_boolean_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_res*>(
      ::fmitcp_proto::fmi2_import_get_boolean_res::internal_default_instance());
#else
  fmi2_import_get_boolean_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_boolean_res*>(&::fmitcp_proto::fmi2_import_get_boolean_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_req*>(
      ::fmitcp_proto::fmi2_import_get_string_req::internal_default_instance());
#else
  fmi2_import_get_string_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_req*>(&::fmitcp_proto::fmi2_import_get_string_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_res*>(
      ::fmitcp_proto::fmi2_import_get_string_res::internal_default_instance());
#else
  fmi2_import_get_string_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_string_res*>(&::fmitcp_proto::fmi2_import_get_string_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_req*>(
      ::fmitcp_proto::fmi2_import_get_fmu_state_req::internal_default_instance());
#else
  fmi2_import_get_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_req*>(&::fmitcp_proto::fmi2_import_get_fmu_state_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_res*>(
      ::fmitcp_proto::fmi2_import_get_fmu_state_res::internal_default_instance());
#else
  fmi2_import_get_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_fmu_state_res*>(&::fmitcp_proto::fmi2_import_get_fmu_state_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_req*>(
      ::fmitcp_proto::fmi2_import_set_fmu_state_req::internal_default_instance());
#else
  fmi2_import_set_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_req*>(&::fmitcp_proto::fmi2_import_set_fmu_state_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_set_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_res*>(
      ::fmitcp_proto::fmi2_import_set_fmu_state_res::internal_default_instance());
#else
  fmi2_import_set_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_set_fmu_state_res*>(&::fmitcp_proto::fmi2_import_set_fmu_state_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_req*>(
      ::fmitcp_proto::fmi2_import_free_fmu_state_req::internal_default_instance());
#else
  fmi2_import_free_fmu_state_req_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_req*>(&::fmitcp_proto::fmi2_import_free_fmu_state_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_free_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_res*>(
      ::fmitcp_proto::fmi2_import_free_fmu_state_res::internal_default_instance());
#else
  fmi2_import_free_fmu_state_res_ = const_cast< ::fmitcp_proto::fmi2_import_free_fmu_state_res*>(&::fmitcp_proto::fmi2_import_free_fmu_state_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_directional_derivative_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_req*>(
      ::fmitcp_proto::fmi2_import_get_directional_derivative_req::internal_default_instance());
#else
  fmi2_import_get_directional_derivative_req_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_req*>(&::fmitcp_proto::fmi2_import_get_directional_derivative_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fmi2_import_get_directional_derivative_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_res*>(
      ::fmitcp_proto::fmi2_import_get_directional_derivative_res::internal_default_instance());
#else
  fmi2_import_get_directional_derivative_res_ = const_cast< ::fmitcp_proto::fmi2_import_get_directional_derivative_res*>(&::fmitcp_proto::fmi2_import_get_directional_derivative_res::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_xml_req_ = const_cast< ::fmitcp_proto::get_xml_req*>(
      ::fmitcp_proto::get_xml_req::internal_default_instance());
#else
  get_xml_req_ = const_cast< ::fmitcp_proto::get_xml_req*>(&::fmitcp_proto::get_xml_req::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_xml_res_ = const_cast< ::fmitcp_proto::get_xml_res*>(
      ::fmitcp_proto::get_xml_res::internal_default_instance());
#else
  get_xml_res_ = const_cast< ::fmitcp_proto::get_xml_res*>(&::fmitcp_proto::get_xml_res::default_instance());
#endif
}

fmitcp_message::fmitcp_message(const fmitcp_message& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmitcp_message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  fmi2_import_instantiate_req_ = NULL;
  fmi2_import_instantiate_res_ = NULL;
  fmi2_import_initialize_slave_req_ = NULL;
  fmi2_import_initialize_slave_res_ = NULL;
  fmi2_import_terminate_slave_req_ = NULL;
  fmi2_import_terminate_slave_res_ = NULL;
  fmi2_import_reset_slave_req_ = NULL;
  fmi2_import_reset_slave_res_ = NULL;
  fmi2_import_free_slave_instance_req_ = NULL;
  fmi2_import_free_slave_instance_res_ = NULL;
  fmi2_import_set_real_input_derivatives_req_ = NULL;
  fmi2_import_set_real_input_derivatives_res_ = NULL;
  fmi2_import_get_real_output_derivatives_req_ = NULL;
  fmi2_import_get_real_output_derivatives_res_ = NULL;
  fmi2_import_cancel_step_req_ = NULL;
  fmi2_import_cancel_step_res_ = NULL;
  fmi2_import_do_step_req_ = NULL;
  fmi2_import_do_step_res_ = NULL;
  fmi2_import_get_status_req_ = NULL;
  fmi2_import_get_status_res_ = NULL;
  fmi2_import_get_real_status_req_ = NULL;
  fmi2_import_get_real_status_res_ = NULL;
  fmi2_import_get_integer_status_req_ = NULL;
  fmi2_import_get_integer_status_res_ = NULL;
  fmi2_import_get_boolean_status_req_ = NULL;
  fmi2_import_get_boolean_status_res_ = NULL;
  fmi2_import_get_string_status_req_ = NULL;
  fmi2_import_get_string_status_res_ = NULL;
  fmi2_import_instantiate_model_req_ = NULL;
  fmi2_import_instantiate_model_res_ = NULL;
  fmi2_import_free_model_instance_req_ = NULL;
  fmi2_import_free_model_instance_res_ = NULL;
  fmi2_import_set_time_req_ = NULL;
  fmi2_import_set_time_res_ = NULL;
  fmi2_import_set_continuous_states_req_ = NULL;
  fmi2_import_set_continuous_states_res_ = NULL;
  fmi2_import_completed_integrator_step_req_ = NULL;
  fmi2_import_completed_integrator_step_res_ = NULL;
  fmi2_import_initialize_model_req_ = NULL;
  fmi2_import_initialize_model_res_ = NULL;
  fmi2_import_get_derivatives_req_ = NULL;
  fmi2_import_get_derivatives_res_ = NULL;
  fmi2_import_get_event_indicators_req_ = NULL;
  fmi2_import_get_event_indicators_res_ = NULL;
  fmi2_import_eventupdate_req_ = NULL;
  fmi2_import_eventupdate_res_ = NULL;
  fmi2_import_completed_event_iteration_req_ = NULL;
  fmi2_import_completed_event_iteration_res_ = NULL;
  fmi2_import_get_continuous_states_req_ = NULL;
  fmi2_import_get_continuous_states_res_ = NULL;
  fmi2_import_get_nominal_continuous_states_req_ = NULL;
  fmi2_import_get_nominal_continuous_states_res_ = NULL;
  fmi2_import_terminate_req_ = NULL;
  fmi2_import_terminate_res_ = NULL;
  fmi2_import_get_version_req_ = NULL;
  fmi2_import_get_version_res_ = NULL;
  fmi2_import_set_debug_logging_req_ = NULL;
  fmi2_import_set_debug_logging_res_ = NULL;
  fmi2_import_set_real_req_ = NULL;
  fmi2_import_set_real_res_ = NULL;
  fmi2_import_set_integer_req_ = NULL;
  fmi2_import_set_integer_res_ = NULL;
  fmi2_import_set_boolean_req_ = NULL;
  fmi2_import_set_boolean_res_ = NULL;
  fmi2_import_set_string_req_ = NULL;
  fmi2_import_set_string_res_ = NULL;
  fmi2_import_get_real_req_ = NULL;
  fmi2_import_get_real_res_ = NULL;
  fmi2_import_get_integer_req_ = NULL;
  fmi2_import_get_integer_res_ = NULL;
  fmi2_import_get_boolean_req_ = NULL;
  fmi2_import_get_boolean_res_ = NULL;
  fmi2_import_get_string_req_ = NULL;
  fmi2_import_get_string_res_ = NULL;
  fmi2_import_get_fmu_state_req_ = NULL;
  fmi2_import_get_fmu_state_res_ = NULL;
  fmi2_import_set_fmu_state_req_ = NULL;
  fmi2_import_set_fmu_state_res_ = NULL;
  fmi2_import_free_fmu_state_req_ = NULL;
  fmi2_import_free_fmu_state_res_ = NULL;
  fmi2_import_get_directional_derivative_req_ = NULL;
  fmi2_import_get_directional_derivative_res_ = NULL;
  get_xml_req_ = NULL;
  get_xml_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmitcp_message::~fmitcp_message() {
  SharedDtor();
}

void fmitcp_message::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fmi2_import_instantiate_req_;
    delete fmi2_import_instantiate_res_;
    delete fmi2_import_initialize_slave_req_;
    delete fmi2_import_initialize_slave_res_;
    delete fmi2_import_terminate_slave_req_;
    delete fmi2_import_terminate_slave_res_;
    delete fmi2_import_reset_slave_req_;
    delete fmi2_import_reset_slave_res_;
    delete fmi2_import_free_slave_instance_req_;
    delete fmi2_import_free_slave_instance_res_;
    delete fmi2_import_set_real_input_derivatives_req_;
    delete fmi2_import_set_real_input_derivatives_res_;
    delete fmi2_import_get_real_output_derivatives_req_;
    delete fmi2_import_get_real_output_derivatives_res_;
    delete fmi2_import_cancel_step_req_;
    delete fmi2_import_cancel_step_res_;
    delete fmi2_import_do_step_req_;
    delete fmi2_import_do_step_res_;
    delete fmi2_import_get_status_req_;
    delete fmi2_import_get_status_res_;
    delete fmi2_import_get_real_status_req_;
    delete fmi2_import_get_real_status_res_;
    delete fmi2_import_get_integer_status_req_;
    delete fmi2_import_get_integer_status_res_;
    delete fmi2_import_get_boolean_status_req_;
    delete fmi2_import_get_boolean_status_res_;
    delete fmi2_import_get_string_status_req_;
    delete fmi2_import_get_string_status_res_;
    delete fmi2_import_instantiate_model_req_;
    delete fmi2_import_instantiate_model_res_;
    delete fmi2_import_free_model_instance_req_;
    delete fmi2_import_free_model_instance_res_;
    delete fmi2_import_set_time_req_;
    delete fmi2_import_set_time_res_;
    delete fmi2_import_set_continuous_states_req_;
    delete fmi2_import_set_continuous_states_res_;
    delete fmi2_import_completed_integrator_step_req_;
    delete fmi2_import_completed_integrator_step_res_;
    delete fmi2_import_initialize_model_req_;
    delete fmi2_import_initialize_model_res_;
    delete fmi2_import_get_derivatives_req_;
    delete fmi2_import_get_derivatives_res_;
    delete fmi2_import_get_event_indicators_req_;
    delete fmi2_import_get_event_indicators_res_;
    delete fmi2_import_eventupdate_req_;
    delete fmi2_import_eventupdate_res_;
    delete fmi2_import_completed_event_iteration_req_;
    delete fmi2_import_completed_event_iteration_res_;
    delete fmi2_import_get_continuous_states_req_;
    delete fmi2_import_get_continuous_states_res_;
    delete fmi2_import_get_nominal_continuous_states_req_;
    delete fmi2_import_get_nominal_continuous_states_res_;
    delete fmi2_import_terminate_req_;
    delete fmi2_import_terminate_res_;
    delete fmi2_import_get_version_req_;
    delete fmi2_import_get_version_res_;
    delete fmi2_import_set_debug_logging_req_;
    delete fmi2_import_set_debug_logging_res_;
    delete fmi2_import_set_real_req_;
    delete fmi2_import_set_real_res_;
    delete fmi2_import_set_integer_req_;
    delete fmi2_import_set_integer_res_;
    delete fmi2_import_set_boolean_req_;
    delete fmi2_import_set_boolean_res_;
    delete fmi2_import_set_string_req_;
    delete fmi2_import_set_string_res_;
    delete fmi2_import_get_real_req_;
    delete fmi2_import_get_real_res_;
    delete fmi2_import_get_integer_req_;
    delete fmi2_import_get_integer_res_;
    delete fmi2_import_get_boolean_req_;
    delete fmi2_import_get_boolean_res_;
    delete fmi2_import_get_string_req_;
    delete fmi2_import_get_string_res_;
    delete fmi2_import_get_fmu_state_req_;
    delete fmi2_import_get_fmu_state_res_;
    delete fmi2_import_set_fmu_state_req_;
    delete fmi2_import_set_fmu_state_res_;
    delete fmi2_import_free_fmu_state_req_;
    delete fmi2_import_free_fmu_state_res_;
    delete fmi2_import_get_directional_derivative_req_;
    delete fmi2_import_get_directional_derivative_res_;
    delete get_xml_req_;
    delete get_xml_res_;
  }
}

void fmitcp_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmitcp_message& fmitcp_message::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmitcp_message* fmitcp_message::default_instance_ = NULL;

fmitcp_message* fmitcp_message::New() const {
  return new fmitcp_message;
}

void fmitcp_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_fmi2_import_instantiate_req()) {
      if (fmi2_import_instantiate_req_ != NULL) fmi2_import_instantiate_req_->::fmitcp_proto::fmi2_import_instantiate_req::Clear();
    }
    if (has_fmi2_import_instantiate_res()) {
      if (fmi2_import_instantiate_res_ != NULL) fmi2_import_instantiate_res_->::fmitcp_proto::fmi2_import_instantiate_res::Clear();
    }
    if (has_fmi2_import_initialize_slave_req()) {
      if (fmi2_import_initialize_slave_req_ != NULL) fmi2_import_initialize_slave_req_->::fmitcp_proto::fmi2_import_initialize_slave_req::Clear();
    }
    if (has_fmi2_import_initialize_slave_res()) {
      if (fmi2_import_initialize_slave_res_ != NULL) fmi2_import_initialize_slave_res_->::fmitcp_proto::fmi2_import_initialize_slave_res::Clear();
    }
    if (has_fmi2_import_terminate_slave_req()) {
      if (fmi2_import_terminate_slave_req_ != NULL) fmi2_import_terminate_slave_req_->::fmitcp_proto::fmi2_import_terminate_slave_req::Clear();
    }
    if (has_fmi2_import_terminate_slave_res()) {
      if (fmi2_import_terminate_slave_res_ != NULL) fmi2_import_terminate_slave_res_->::fmitcp_proto::fmi2_import_terminate_slave_res::Clear();
    }
    if (has_fmi2_import_reset_slave_req()) {
      if (fmi2_import_reset_slave_req_ != NULL) fmi2_import_reset_slave_req_->::fmitcp_proto::fmi2_import_reset_slave_req::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fmi2_import_reset_slave_res()) {
      if (fmi2_import_reset_slave_res_ != NULL) fmi2_import_reset_slave_res_->::fmitcp_proto::fmi2_import_reset_slave_res::Clear();
    }
    if (has_fmi2_import_free_slave_instance_req()) {
      if (fmi2_import_free_slave_instance_req_ != NULL) fmi2_import_free_slave_instance_req_->::fmitcp_proto::fmi2_import_free_slave_instance_req::Clear();
    }
    if (has_fmi2_import_free_slave_instance_res()) {
      if (fmi2_import_free_slave_instance_res_ != NULL) fmi2_import_free_slave_instance_res_->::fmitcp_proto::fmi2_import_free_slave_instance_res::Clear();
    }
    if (has_fmi2_import_set_real_input_derivatives_req()) {
      if (fmi2_import_set_real_input_derivatives_req_ != NULL) fmi2_import_set_real_input_derivatives_req_->::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::Clear();
    }
    if (has_fmi2_import_set_real_input_derivatives_res()) {
      if (fmi2_import_set_real_input_derivatives_res_ != NULL) fmi2_import_set_real_input_derivatives_res_->::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::Clear();
    }
    if (has_fmi2_import_get_real_output_derivatives_req()) {
      if (fmi2_import_get_real_output_derivatives_req_ != NULL) fmi2_import_get_real_output_derivatives_req_->::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::Clear();
    }
    if (has_fmi2_import_get_real_output_derivatives_res()) {
      if (fmi2_import_get_real_output_derivatives_res_ != NULL) fmi2_import_get_real_output_derivatives_res_->::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::Clear();
    }
    if (has_fmi2_import_cancel_step_req()) {
      if (fmi2_import_cancel_step_req_ != NULL) fmi2_import_cancel_step_req_->::fmitcp_proto::fmi2_import_cancel_step_req::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fmi2_import_cancel_step_res()) {
      if (fmi2_import_cancel_step_res_ != NULL) fmi2_import_cancel_step_res_->::fmitcp_proto::fmi2_import_cancel_step_res::Clear();
    }
    if (has_fmi2_import_do_step_req()) {
      if (fmi2_import_do_step_req_ != NULL) fmi2_import_do_step_req_->::fmitcp_proto::fmi2_import_do_step_req::Clear();
    }
    if (has_fmi2_import_do_step_res()) {
      if (fmi2_import_do_step_res_ != NULL) fmi2_import_do_step_res_->::fmitcp_proto::fmi2_import_do_step_res::Clear();
    }
    if (has_fmi2_import_get_status_req()) {
      if (fmi2_import_get_status_req_ != NULL) fmi2_import_get_status_req_->::fmitcp_proto::fmi2_import_get_status_req::Clear();
    }
    if (has_fmi2_import_get_status_res()) {
      if (fmi2_import_get_status_res_ != NULL) fmi2_import_get_status_res_->::fmitcp_proto::fmi2_import_get_status_res::Clear();
    }
    if (has_fmi2_import_get_real_status_req()) {
      if (fmi2_import_get_real_status_req_ != NULL) fmi2_import_get_real_status_req_->::fmitcp_proto::fmi2_import_get_real_status_req::Clear();
    }
    if (has_fmi2_import_get_real_status_res()) {
      if (fmi2_import_get_real_status_res_ != NULL) fmi2_import_get_real_status_res_->::fmitcp_proto::fmi2_import_get_real_status_res::Clear();
    }
    if (has_fmi2_import_get_integer_status_req()) {
      if (fmi2_import_get_integer_status_req_ != NULL) fmi2_import_get_integer_status_req_->::fmitcp_proto::fmi2_import_get_integer_status_req::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_fmi2_import_get_integer_status_res()) {
      if (fmi2_import_get_integer_status_res_ != NULL) fmi2_import_get_integer_status_res_->::fmitcp_proto::fmi2_import_get_integer_status_res::Clear();
    }
    if (has_fmi2_import_get_boolean_status_req()) {
      if (fmi2_import_get_boolean_status_req_ != NULL) fmi2_import_get_boolean_status_req_->::fmitcp_proto::fmi2_import_get_boolean_status_req::Clear();
    }
    if (has_fmi2_import_get_boolean_status_res()) {
      if (fmi2_import_get_boolean_status_res_ != NULL) fmi2_import_get_boolean_status_res_->::fmitcp_proto::fmi2_import_get_boolean_status_res::Clear();
    }
    if (has_fmi2_import_get_string_status_req()) {
      if (fmi2_import_get_string_status_req_ != NULL) fmi2_import_get_string_status_req_->::fmitcp_proto::fmi2_import_get_string_status_req::Clear();
    }
    if (has_fmi2_import_get_string_status_res()) {
      if (fmi2_import_get_string_status_res_ != NULL) fmi2_import_get_string_status_res_->::fmitcp_proto::fmi2_import_get_string_status_res::Clear();
    }
    if (has_fmi2_import_instantiate_model_req()) {
      if (fmi2_import_instantiate_model_req_ != NULL) fmi2_import_instantiate_model_req_->::fmitcp_proto::fmi2_import_instantiate_model_req::Clear();
    }
    if (has_fmi2_import_instantiate_model_res()) {
      if (fmi2_import_instantiate_model_res_ != NULL) fmi2_import_instantiate_model_res_->::fmitcp_proto::fmi2_import_instantiate_model_res::Clear();
    }
    if (has_fmi2_import_free_model_instance_req()) {
      if (fmi2_import_free_model_instance_req_ != NULL) fmi2_import_free_model_instance_req_->::fmitcp_proto::fmi2_import_free_model_instance_req::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_fmi2_import_free_model_instance_res()) {
      if (fmi2_import_free_model_instance_res_ != NULL) fmi2_import_free_model_instance_res_->::fmitcp_proto::fmi2_import_free_model_instance_res::Clear();
    }
    if (has_fmi2_import_set_time_req()) {
      if (fmi2_import_set_time_req_ != NULL) fmi2_import_set_time_req_->::fmitcp_proto::fmi2_import_set_time_req::Clear();
    }
    if (has_fmi2_import_set_time_res()) {
      if (fmi2_import_set_time_res_ != NULL) fmi2_import_set_time_res_->::fmitcp_proto::fmi2_import_set_time_res::Clear();
    }
    if (has_fmi2_import_set_continuous_states_req()) {
      if (fmi2_import_set_continuous_states_req_ != NULL) fmi2_import_set_continuous_states_req_->::fmitcp_proto::fmi2_import_set_continuous_states_req::Clear();
    }
    if (has_fmi2_import_set_continuous_states_res()) {
      if (fmi2_import_set_continuous_states_res_ != NULL) fmi2_import_set_continuous_states_res_->::fmitcp_proto::fmi2_import_set_continuous_states_res::Clear();
    }
    if (has_fmi2_import_completed_integrator_step_req()) {
      if (fmi2_import_completed_integrator_step_req_ != NULL) fmi2_import_completed_integrator_step_req_->::fmitcp_proto::fmi2_import_completed_integrator_step_req::Clear();
    }
    if (has_fmi2_import_completed_integrator_step_res()) {
      if (fmi2_import_completed_integrator_step_res_ != NULL) fmi2_import_completed_integrator_step_res_->::fmitcp_proto::fmi2_import_completed_integrator_step_res::Clear();
    }
    if (has_fmi2_import_initialize_model_req()) {
      if (fmi2_import_initialize_model_req_ != NULL) fmi2_import_initialize_model_req_->::fmitcp_proto::fmi2_import_initialize_model_req::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_fmi2_import_initialize_model_res()) {
      if (fmi2_import_initialize_model_res_ != NULL) fmi2_import_initialize_model_res_->::fmitcp_proto::fmi2_import_initialize_model_res::Clear();
    }
    if (has_fmi2_import_get_derivatives_req()) {
      if (fmi2_import_get_derivatives_req_ != NULL) fmi2_import_get_derivatives_req_->::fmitcp_proto::fmi2_import_get_derivatives_req::Clear();
    }
    if (has_fmi2_import_get_derivatives_res()) {
      if (fmi2_import_get_derivatives_res_ != NULL) fmi2_import_get_derivatives_res_->::fmitcp_proto::fmi2_import_get_derivatives_res::Clear();
    }
    if (has_fmi2_import_get_event_indicators_req()) {
      if (fmi2_import_get_event_indicators_req_ != NULL) fmi2_import_get_event_indicators_req_->::fmitcp_proto::fmi2_import_get_event_indicators_req::Clear();
    }
    if (has_fmi2_import_get_event_indicators_res()) {
      if (fmi2_import_get_event_indicators_res_ != NULL) fmi2_import_get_event_indicators_res_->::fmitcp_proto::fmi2_import_get_event_indicators_res::Clear();
    }
    if (has_fmi2_import_eventupdate_req()) {
      if (fmi2_import_eventupdate_req_ != NULL) fmi2_import_eventupdate_req_->::fmitcp_proto::fmi2_import_eventUpdate_req::Clear();
    }
    if (has_fmi2_import_eventupdate_res()) {
      if (fmi2_import_eventupdate_res_ != NULL) fmi2_import_eventupdate_res_->::fmitcp_proto::fmi2_import_eventUpdate_res::Clear();
    }
    if (has_fmi2_import_completed_event_iteration_req()) {
      if (fmi2_import_completed_event_iteration_req_ != NULL) fmi2_import_completed_event_iteration_req_->::fmitcp_proto::fmi2_import_completed_event_iteration_req::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_fmi2_import_completed_event_iteration_res()) {
      if (fmi2_import_completed_event_iteration_res_ != NULL) fmi2_import_completed_event_iteration_res_->::fmitcp_proto::fmi2_import_completed_event_iteration_res::Clear();
    }
    if (has_fmi2_import_get_continuous_states_req()) {
      if (fmi2_import_get_continuous_states_req_ != NULL) fmi2_import_get_continuous_states_req_->::fmitcp_proto::fmi2_import_get_continuous_states_req::Clear();
    }
    if (has_fmi2_import_get_continuous_states_res()) {
      if (fmi2_import_get_continuous_states_res_ != NULL) fmi2_import_get_continuous_states_res_->::fmitcp_proto::fmi2_import_get_continuous_states_res::Clear();
    }
    if (has_fmi2_import_get_nominal_continuous_states_req()) {
      if (fmi2_import_get_nominal_continuous_states_req_ != NULL) fmi2_import_get_nominal_continuous_states_req_->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::Clear();
    }
    if (has_fmi2_import_get_nominal_continuous_states_res()) {
      if (fmi2_import_get_nominal_continuous_states_res_ != NULL) fmi2_import_get_nominal_continuous_states_res_->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::Clear();
    }
    if (has_fmi2_import_terminate_req()) {
      if (fmi2_import_terminate_req_ != NULL) fmi2_import_terminate_req_->::fmitcp_proto::fmi2_import_terminate_req::Clear();
    }
    if (has_fmi2_import_terminate_res()) {
      if (fmi2_import_terminate_res_ != NULL) fmi2_import_terminate_res_->::fmitcp_proto::fmi2_import_terminate_res::Clear();
    }
    if (has_fmi2_import_get_version_req()) {
      if (fmi2_import_get_version_req_ != NULL) fmi2_import_get_version_req_->::fmitcp_proto::fmi2_import_get_version_req::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_fmi2_import_get_version_res()) {
      if (fmi2_import_get_version_res_ != NULL) fmi2_import_get_version_res_->::fmitcp_proto::fmi2_import_get_version_res::Clear();
    }
    if (has_fmi2_import_set_debug_logging_req()) {
      if (fmi2_import_set_debug_logging_req_ != NULL) fmi2_import_set_debug_logging_req_->::fmitcp_proto::fmi2_import_set_debug_logging_req::Clear();
    }
    if (has_fmi2_import_set_debug_logging_res()) {
      if (fmi2_import_set_debug_logging_res_ != NULL) fmi2_import_set_debug_logging_res_->::fmitcp_proto::fmi2_import_set_debug_logging_res::Clear();
    }
    if (has_fmi2_import_set_real_req()) {
      if (fmi2_import_set_real_req_ != NULL) fmi2_import_set_real_req_->::fmitcp_proto::fmi2_import_set_real_req::Clear();
    }
    if (has_fmi2_import_set_real_res()) {
      if (fmi2_import_set_real_res_ != NULL) fmi2_import_set_real_res_->::fmitcp_proto::fmi2_import_set_real_res::Clear();
    }
    if (has_fmi2_import_set_integer_req()) {
      if (fmi2_import_set_integer_req_ != NULL) fmi2_import_set_integer_req_->::fmitcp_proto::fmi2_import_set_integer_req::Clear();
    }
    if (has_fmi2_import_set_integer_res()) {
      if (fmi2_import_set_integer_res_ != NULL) fmi2_import_set_integer_res_->::fmitcp_proto::fmi2_import_set_integer_res::Clear();
    }
    if (has_fmi2_import_set_boolean_req()) {
      if (fmi2_import_set_boolean_req_ != NULL) fmi2_import_set_boolean_req_->::fmitcp_proto::fmi2_import_set_boolean_req::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_fmi2_import_set_boolean_res()) {
      if (fmi2_import_set_boolean_res_ != NULL) fmi2_import_set_boolean_res_->::fmitcp_proto::fmi2_import_set_boolean_res::Clear();
    }
    if (has_fmi2_import_set_string_req()) {
      if (fmi2_import_set_string_req_ != NULL) fmi2_import_set_string_req_->::fmitcp_proto::fmi2_import_set_string_req::Clear();
    }
    if (has_fmi2_import_set_string_res()) {
      if (fmi2_import_set_string_res_ != NULL) fmi2_import_set_string_res_->::fmitcp_proto::fmi2_import_set_string_res::Clear();
    }
    if (has_fmi2_import_get_real_req()) {
      if (fmi2_import_get_real_req_ != NULL) fmi2_import_get_real_req_->::fmitcp_proto::fmi2_import_get_real_req::Clear();
    }
    if (has_fmi2_import_get_real_res()) {
      if (fmi2_import_get_real_res_ != NULL) fmi2_import_get_real_res_->::fmitcp_proto::fmi2_import_get_real_res::Clear();
    }
    if (has_fmi2_import_get_integer_req()) {
      if (fmi2_import_get_integer_req_ != NULL) fmi2_import_get_integer_req_->::fmitcp_proto::fmi2_import_get_integer_req::Clear();
    }
    if (has_fmi2_import_get_integer_res()) {
      if (fmi2_import_get_integer_res_ != NULL) fmi2_import_get_integer_res_->::fmitcp_proto::fmi2_import_get_integer_res::Clear();
    }
    if (has_fmi2_import_get_boolean_req()) {
      if (fmi2_import_get_boolean_req_ != NULL) fmi2_import_get_boolean_req_->::fmitcp_proto::fmi2_import_get_boolean_req::Clear();
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has_fmi2_import_get_boolean_res()) {
      if (fmi2_import_get_boolean_res_ != NULL) fmi2_import_get_boolean_res_->::fmitcp_proto::fmi2_import_get_boolean_res::Clear();
    }
    if (has_fmi2_import_get_string_req()) {
      if (fmi2_import_get_string_req_ != NULL) fmi2_import_get_string_req_->::fmitcp_proto::fmi2_import_get_string_req::Clear();
    }
    if (has_fmi2_import_get_string_res()) {
      if (fmi2_import_get_string_res_ != NULL) fmi2_import_get_string_res_->::fmitcp_proto::fmi2_import_get_string_res::Clear();
    }
    if (has_fmi2_import_get_fmu_state_req()) {
      if (fmi2_import_get_fmu_state_req_ != NULL) fmi2_import_get_fmu_state_req_->::fmitcp_proto::fmi2_import_get_fmu_state_req::Clear();
    }
    if (has_fmi2_import_get_fmu_state_res()) {
      if (fmi2_import_get_fmu_state_res_ != NULL) fmi2_import_get_fmu_state_res_->::fmitcp_proto::fmi2_import_get_fmu_state_res::Clear();
    }
    if (has_fmi2_import_set_fmu_state_req()) {
      if (fmi2_import_set_fmu_state_req_ != NULL) fmi2_import_set_fmu_state_req_->::fmitcp_proto::fmi2_import_set_fmu_state_req::Clear();
    }
    if (has_fmi2_import_set_fmu_state_res()) {
      if (fmi2_import_set_fmu_state_res_ != NULL) fmi2_import_set_fmu_state_res_->::fmitcp_proto::fmi2_import_set_fmu_state_res::Clear();
    }
    if (has_fmi2_import_free_fmu_state_req()) {
      if (fmi2_import_free_fmu_state_req_ != NULL) fmi2_import_free_fmu_state_req_->::fmitcp_proto::fmi2_import_free_fmu_state_req::Clear();
    }
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (has_fmi2_import_free_fmu_state_res()) {
      if (fmi2_import_free_fmu_state_res_ != NULL) fmi2_import_free_fmu_state_res_->::fmitcp_proto::fmi2_import_free_fmu_state_res::Clear();
    }
    if (has_fmi2_import_get_directional_derivative_req()) {
      if (fmi2_import_get_directional_derivative_req_ != NULL) fmi2_import_get_directional_derivative_req_->::fmitcp_proto::fmi2_import_get_directional_derivative_req::Clear();
    }
    if (has_fmi2_import_get_directional_derivative_res()) {
      if (fmi2_import_get_directional_derivative_res_ != NULL) fmi2_import_get_directional_derivative_res_->::fmitcp_proto::fmi2_import_get_directional_derivative_res::Clear();
    }
    if (has_get_xml_req()) {
      if (get_xml_req_ != NULL) get_xml_req_->::fmitcp_proto::get_xml_req::Clear();
    }
    if (has_get_xml_res()) {
      if (get_xml_res_ != NULL) get_xml_res_->::fmitcp_proto::get_xml_res::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmitcp_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fmitcp_proto.fmitcp_message.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmitcp_message_Type_IsValid(value)) {
            set_type(static_cast< ::fmitcp_proto::fmitcp_message_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fmi2_import_instantiate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fmi2_import_instantiate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fmi2_import_initialize_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fmi2_import_initialize_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fmi2_import_terminate_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fmi2_import_terminate_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fmi2_import_reset_slave_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_reset_slave_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_reset_slave_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fmi2_import_reset_slave_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_reset_slave_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_reset_slave_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fmi2_import_free_slave_instance_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_slave_instance_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_slave_instance_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fmi2_import_free_slave_instance_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_slave_instance_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_slave_instance_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fmi2_import_set_real_input_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_input_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_input_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_fmi2_import_set_real_input_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_input_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_input_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fmi2_import_get_real_output_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_output_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_output_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fmi2_import_get_real_output_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_output_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_output_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fmi2_import_cancel_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_cancel_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_cancel_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fmi2_import_cancel_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_cancel_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_cancel_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fmi2_import_do_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_do_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_do_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_fmi2_import_do_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_do_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_do_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fmi2_import_get_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fmi2_import_get_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_fmi2_import_get_real_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fmi2_import_get_real_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_fmi2_import_get_integer_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_fmi2_import_get_integer_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fmi2_import_get_boolean_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_fmi2_import_get_boolean_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_fmi2_import_get_string_status_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_status_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_status_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_fmi2_import_get_string_status_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_status_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_status_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_fmi2_import_instantiate_model_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_model_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_model_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_fmi2_import_instantiate_model_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_instantiate_model_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_instantiate_model_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_fmi2_import_free_model_instance_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_model_instance_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_model_instance_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_fmi2_import_free_model_instance_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_model_instance_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_model_instance_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_fmi2_import_set_time_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_time_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_time_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_fmi2_import_set_time_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_time_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_time_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_fmi2_import_set_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_fmi2_import_set_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_fmi2_import_completed_integrator_step_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_integrator_step_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_integrator_step_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_fmi2_import_completed_integrator_step_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_integrator_step_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_integrator_step_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_fmi2_import_initialize_model_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_model_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_model_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_fmi2_import_initialize_model_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_initialize_model_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_initialize_model_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_fmi2_import_get_derivatives_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_derivatives_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_derivatives_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_fmi2_import_get_derivatives_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_derivatives_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_derivatives_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_fmi2_import_get_event_indicators_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_event_indicators_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_event_indicators_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_fmi2_import_get_event_indicators_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_event_indicators_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_event_indicators_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_fmi2_import_eventUpdate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_eventUpdate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_eventupdate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_fmi2_import_eventUpdate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_eventUpdate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_eventupdate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_fmi2_import_completed_event_iteration_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_event_iteration_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_event_iteration_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_fmi2_import_completed_event_iteration_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_completed_event_iteration_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_completed_event_iteration_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_fmi2_import_get_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_fmi2_import_get_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_fmi2_import_get_nominal_continuous_states_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_nominal_continuous_states_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_nominal_continuous_states_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_fmi2_import_get_nominal_continuous_states_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_nominal_continuous_states_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_nominal_continuous_states_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_fmi2_import_terminate_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_fmi2_import_terminate_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_terminate_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_terminate_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_fmi2_import_get_version_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_version_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_version_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_fmi2_import_get_version_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_version_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_version_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_fmi2_import_set_debug_logging_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_debug_logging_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_debug_logging_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_fmi2_import_set_debug_logging_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_debug_logging_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_debug_logging_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fmi2_import_set_real_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_fmi2_import_set_real_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_real_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_real_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_fmi2_import_set_integer_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_integer_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_integer_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_fmi2_import_set_integer_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_integer_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_integer_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_fmi2_import_set_boolean_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_boolean_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_boolean_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_fmi2_import_set_boolean_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_boolean_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_boolean_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_fmi2_import_set_string_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_string_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_string_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_fmi2_import_set_string_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_string_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_string_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_fmi2_import_get_real_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_fmi2_import_get_real_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_real_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_real_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_fmi2_import_get_integer_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_fmi2_import_get_integer_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_integer_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_integer_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_fmi2_import_get_boolean_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_fmi2_import_get_boolean_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_boolean_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_boolean_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_fmi2_import_get_string_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_fmi2_import_get_string_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_string_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_string_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_fmi2_import_get_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_fmi2_import_get_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(626)) goto parse_fmi2_import_set_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_fmi2_import_set_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_set_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_set_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_fmi2_import_free_fmu_state_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_fmu_state_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_fmu_state_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(650)) goto parse_fmi2_import_free_fmu_state_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_free_fmu_state_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_free_fmu_state_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(706)) goto parse_fmi2_import_get_directional_derivative_req;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_directional_derivative_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_directional_derivative_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(714)) goto parse_fmi2_import_get_directional_derivative_res;
        break;
      }

      // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmi2_import_get_directional_derivative_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmi2_import_get_directional_derivative_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_get_xml_req;
        break;
      }

      // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_xml_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_xml_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_get_xml_res;
        break;
      }

      // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_xml_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_xml_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmitcp_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fmitcp_proto.fmitcp_message.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
  if (has_fmi2_import_instantiate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->fmi2_import_instantiate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
  if (has_fmi2_import_instantiate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fmi2_import_instantiate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
  if (has_fmi2_import_initialize_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fmi2_import_initialize_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
  if (has_fmi2_import_initialize_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->fmi2_import_initialize_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
  if (has_fmi2_import_terminate_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fmi2_import_terminate_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
  if (has_fmi2_import_terminate_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->fmi2_import_terminate_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
  if (has_fmi2_import_reset_slave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->fmi2_import_reset_slave_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
  if (has_fmi2_import_reset_slave_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->fmi2_import_reset_slave_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
  if (has_fmi2_import_free_slave_instance_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->fmi2_import_free_slave_instance_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
  if (has_fmi2_import_free_slave_instance_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->fmi2_import_free_slave_instance_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
  if (has_fmi2_import_set_real_input_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->fmi2_import_set_real_input_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
  if (has_fmi2_import_set_real_input_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->fmi2_import_set_real_input_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
  if (has_fmi2_import_get_real_output_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->fmi2_import_get_real_output_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
  if (has_fmi2_import_get_real_output_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->fmi2_import_get_real_output_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
  if (has_fmi2_import_cancel_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->fmi2_import_cancel_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
  if (has_fmi2_import_cancel_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->fmi2_import_cancel_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
  if (has_fmi2_import_do_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->fmi2_import_do_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
  if (has_fmi2_import_do_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->fmi2_import_do_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
  if (has_fmi2_import_get_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->fmi2_import_get_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
  if (has_fmi2_import_get_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->fmi2_import_get_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
  if (has_fmi2_import_get_real_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->fmi2_import_get_real_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
  if (has_fmi2_import_get_real_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->fmi2_import_get_real_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
  if (has_fmi2_import_get_integer_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->fmi2_import_get_integer_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
  if (has_fmi2_import_get_integer_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->fmi2_import_get_integer_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
  if (has_fmi2_import_get_boolean_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->fmi2_import_get_boolean_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
  if (has_fmi2_import_get_boolean_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->fmi2_import_get_boolean_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
  if (has_fmi2_import_get_string_status_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->fmi2_import_get_string_status_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
  if (has_fmi2_import_get_string_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->fmi2_import_get_string_status_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
  if (has_fmi2_import_instantiate_model_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->fmi2_import_instantiate_model_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
  if (has_fmi2_import_instantiate_model_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->fmi2_import_instantiate_model_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
  if (has_fmi2_import_free_model_instance_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->fmi2_import_free_model_instance_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
  if (has_fmi2_import_free_model_instance_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->fmi2_import_free_model_instance_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
  if (has_fmi2_import_set_time_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->fmi2_import_set_time_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
  if (has_fmi2_import_set_time_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->fmi2_import_set_time_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
  if (has_fmi2_import_set_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->fmi2_import_set_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
  if (has_fmi2_import_set_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->fmi2_import_set_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
  if (has_fmi2_import_completed_integrator_step_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->fmi2_import_completed_integrator_step_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
  if (has_fmi2_import_completed_integrator_step_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->fmi2_import_completed_integrator_step_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
  if (has_fmi2_import_initialize_model_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->fmi2_import_initialize_model_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
  if (has_fmi2_import_initialize_model_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->fmi2_import_initialize_model_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
  if (has_fmi2_import_get_derivatives_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->fmi2_import_get_derivatives_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
  if (has_fmi2_import_get_derivatives_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->fmi2_import_get_derivatives_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
  if (has_fmi2_import_get_event_indicators_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->fmi2_import_get_event_indicators_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
  if (has_fmi2_import_get_event_indicators_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->fmi2_import_get_event_indicators_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
  if (has_fmi2_import_eventupdate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->fmi2_import_eventupdate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
  if (has_fmi2_import_eventupdate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->fmi2_import_eventupdate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
  if (has_fmi2_import_completed_event_iteration_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->fmi2_import_completed_event_iteration_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
  if (has_fmi2_import_completed_event_iteration_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->fmi2_import_completed_event_iteration_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
  if (has_fmi2_import_get_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->fmi2_import_get_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
  if (has_fmi2_import_get_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->fmi2_import_get_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
  if (has_fmi2_import_get_nominal_continuous_states_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, this->fmi2_import_get_nominal_continuous_states_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
  if (has_fmi2_import_get_nominal_continuous_states_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      53, this->fmi2_import_get_nominal_continuous_states_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
  if (has_fmi2_import_terminate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, this->fmi2_import_terminate_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
  if (has_fmi2_import_terminate_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, this->fmi2_import_terminate_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
  if (has_fmi2_import_get_version_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, this->fmi2_import_get_version_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
  if (has_fmi2_import_get_version_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, this->fmi2_import_get_version_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
  if (has_fmi2_import_set_debug_logging_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, this->fmi2_import_set_debug_logging_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
  if (has_fmi2_import_set_debug_logging_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, this->fmi2_import_set_debug_logging_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
  if (has_fmi2_import_set_real_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->fmi2_import_set_real_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
  if (has_fmi2_import_set_real_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->fmi2_import_set_real_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
  if (has_fmi2_import_set_integer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, this->fmi2_import_set_integer_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
  if (has_fmi2_import_set_integer_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, this->fmi2_import_set_integer_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
  if (has_fmi2_import_set_boolean_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, this->fmi2_import_set_boolean_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
  if (has_fmi2_import_set_boolean_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->fmi2_import_set_boolean_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
  if (has_fmi2_import_set_string_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      66, this->fmi2_import_set_string_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
  if (has_fmi2_import_set_string_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, this->fmi2_import_set_string_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
  if (has_fmi2_import_get_real_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      68, this->fmi2_import_get_real_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
  if (has_fmi2_import_get_real_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      69, this->fmi2_import_get_real_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
  if (has_fmi2_import_get_integer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, this->fmi2_import_get_integer_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
  if (has_fmi2_import_get_integer_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, this->fmi2_import_get_integer_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
  if (has_fmi2_import_get_boolean_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      72, this->fmi2_import_get_boolean_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
  if (has_fmi2_import_get_boolean_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, this->fmi2_import_get_boolean_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
  if (has_fmi2_import_get_string_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      74, this->fmi2_import_get_string_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
  if (has_fmi2_import_get_string_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      75, this->fmi2_import_get_string_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
  if (has_fmi2_import_get_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      76, this->fmi2_import_get_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
  if (has_fmi2_import_get_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      77, this->fmi2_import_get_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
  if (has_fmi2_import_set_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      78, this->fmi2_import_set_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
  if (has_fmi2_import_set_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, this->fmi2_import_set_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
  if (has_fmi2_import_free_fmu_state_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, this->fmi2_import_free_fmu_state_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
  if (has_fmi2_import_free_fmu_state_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, this->fmi2_import_free_fmu_state_res(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
  if (has_fmi2_import_get_directional_derivative_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      88, this->fmi2_import_get_directional_derivative_req(), output);
  }

  // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
  if (has_fmi2_import_get_directional_derivative_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      89, this->fmi2_import_get_directional_derivative_res(), output);
  }

  // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
  if (has_get_xml_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      90, this->get_xml_req(), output);
  }

  // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
  if (has_get_xml_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      91, this->get_xml_res(), output);
  }

}

int fmitcp_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fmitcp_proto.fmitcp_message.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_req fmi2_import_instantiate_req = 2;
    if (has_fmi2_import_instantiate_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_req());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_res fmi2_import_instantiate_res = 3;
    if (has_fmi2_import_instantiate_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_res());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_slave_req fmi2_import_initialize_slave_req = 4;
    if (has_fmi2_import_initialize_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_slave_req());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_slave_res fmi2_import_initialize_slave_res = 5;
    if (has_fmi2_import_initialize_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_slave_req fmi2_import_terminate_slave_req = 6;
    if (has_fmi2_import_terminate_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_slave_req());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_slave_res fmi2_import_terminate_slave_res = 7;
    if (has_fmi2_import_terminate_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_reset_slave_req fmi2_import_reset_slave_req = 8;
    if (has_fmi2_import_reset_slave_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_reset_slave_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fmitcp_proto.fmi2_import_reset_slave_res fmi2_import_reset_slave_res = 9;
    if (has_fmi2_import_reset_slave_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_reset_slave_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_slave_instance_req fmi2_import_free_slave_instance_req = 10;
    if (has_fmi2_import_free_slave_instance_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_slave_instance_req());
    }

    // optional .fmitcp_proto.fmi2_import_free_slave_instance_res fmi2_import_free_slave_instance_res = 11;
    if (has_fmi2_import_free_slave_instance_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_slave_instance_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_req fmi2_import_set_real_input_derivatives_req = 12;
    if (has_fmi2_import_set_real_input_derivatives_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_input_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_input_derivatives_res fmi2_import_set_real_input_derivatives_res = 13;
    if (has_fmi2_import_set_real_input_derivatives_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_input_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_req fmi2_import_get_real_output_derivatives_req = 14;
    if (has_fmi2_import_get_real_output_derivatives_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_output_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_output_derivatives_res fmi2_import_get_real_output_derivatives_res = 15;
    if (has_fmi2_import_get_real_output_derivatives_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_output_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_cancel_step_req fmi2_import_cancel_step_req = 16;
    if (has_fmi2_import_cancel_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_cancel_step_req());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .fmitcp_proto.fmi2_import_cancel_step_res fmi2_import_cancel_step_res = 17;
    if (has_fmi2_import_cancel_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_cancel_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_do_step_req fmi2_import_do_step_req = 18;
    if (has_fmi2_import_do_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_do_step_req());
    }

    // optional .fmitcp_proto.fmi2_import_do_step_res fmi2_import_do_step_res = 19;
    if (has_fmi2_import_do_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_do_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_status_req fmi2_import_get_status_req = 20;
    if (has_fmi2_import_get_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_status_res fmi2_import_get_status_res = 21;
    if (has_fmi2_import_get_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_status_req fmi2_import_get_real_status_req = 22;
    if (has_fmi2_import_get_real_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_status_res fmi2_import_get_real_status_res = 23;
    if (has_fmi2_import_get_real_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_status_req fmi2_import_get_integer_status_req = 24;
    if (has_fmi2_import_get_integer_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_status_req());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_integer_status_res fmi2_import_get_integer_status_res = 25;
    if (has_fmi2_import_get_integer_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_status_req fmi2_import_get_boolean_status_req = 26;
    if (has_fmi2_import_get_boolean_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_status_res fmi2_import_get_boolean_status_res = 27;
    if (has_fmi2_import_get_boolean_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_status_req fmi2_import_get_string_status_req = 28;
    if (has_fmi2_import_get_string_status_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_status_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_status_res fmi2_import_get_string_status_res = 29;
    if (has_fmi2_import_get_string_status_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_status_res());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_model_req fmi2_import_instantiate_model_req = 30;
    if (has_fmi2_import_instantiate_model_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_model_req());
    }

    // optional .fmitcp_proto.fmi2_import_instantiate_model_res fmi2_import_instantiate_model_res = 31;
    if (has_fmi2_import_instantiate_model_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_instantiate_model_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_model_instance_req fmi2_import_free_model_instance_req = 32;
    if (has_fmi2_import_free_model_instance_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_model_instance_req());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .fmitcp_proto.fmi2_import_free_model_instance_res fmi2_import_free_model_instance_res = 33;
    if (has_fmi2_import_free_model_instance_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_model_instance_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_time_req fmi2_import_set_time_req = 34;
    if (has_fmi2_import_set_time_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_time_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_time_res fmi2_import_set_time_res = 35;
    if (has_fmi2_import_set_time_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_time_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_continuous_states_req fmi2_import_set_continuous_states_req = 36;
    if (has_fmi2_import_set_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_continuous_states_res fmi2_import_set_continuous_states_res = 37;
    if (has_fmi2_import_set_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_completed_integrator_step_req fmi2_import_completed_integrator_step_req = 38;
    if (has_fmi2_import_completed_integrator_step_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_integrator_step_req());
    }

    // optional .fmitcp_proto.fmi2_import_completed_integrator_step_res fmi2_import_completed_integrator_step_res = 39;
    if (has_fmi2_import_completed_integrator_step_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_integrator_step_res());
    }

    // optional .fmitcp_proto.fmi2_import_initialize_model_req fmi2_import_initialize_model_req = 40;
    if (has_fmi2_import_initialize_model_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_model_req());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .fmitcp_proto.fmi2_import_initialize_model_res fmi2_import_initialize_model_res = 41;
    if (has_fmi2_import_initialize_model_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_initialize_model_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_derivatives_req fmi2_import_get_derivatives_req = 42;
    if (has_fmi2_import_get_derivatives_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_derivatives_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_derivatives_res fmi2_import_get_derivatives_res = 43;
    if (has_fmi2_import_get_derivatives_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_derivatives_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_event_indicators_req fmi2_import_get_event_indicators_req = 44;
    if (has_fmi2_import_get_event_indicators_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_event_indicators_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_event_indicators_res fmi2_import_get_event_indicators_res = 45;
    if (has_fmi2_import_get_event_indicators_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_event_indicators_res());
    }

    // optional .fmitcp_proto.fmi2_import_eventUpdate_req fmi2_import_eventUpdate_req = 46;
    if (has_fmi2_import_eventupdate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_eventupdate_req());
    }

    // optional .fmitcp_proto.fmi2_import_eventUpdate_res fmi2_import_eventUpdate_res = 47;
    if (has_fmi2_import_eventupdate_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_eventupdate_res());
    }

    // optional .fmitcp_proto.fmi2_import_completed_event_iteration_req fmi2_import_completed_event_iteration_req = 48;
    if (has_fmi2_import_completed_event_iteration_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_event_iteration_req());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .fmitcp_proto.fmi2_import_completed_event_iteration_res fmi2_import_completed_event_iteration_res = 49;
    if (has_fmi2_import_completed_event_iteration_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_completed_event_iteration_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_continuous_states_req fmi2_import_get_continuous_states_req = 50;
    if (has_fmi2_import_get_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_continuous_states_res fmi2_import_get_continuous_states_res = 51;
    if (has_fmi2_import_get_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_req fmi2_import_get_nominal_continuous_states_req = 52;
    if (has_fmi2_import_get_nominal_continuous_states_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_nominal_continuous_states_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_nominal_continuous_states_res fmi2_import_get_nominal_continuous_states_res = 53;
    if (has_fmi2_import_get_nominal_continuous_states_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_nominal_continuous_states_res());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_req fmi2_import_terminate_req = 54;
    if (has_fmi2_import_terminate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_req());
    }

    // optional .fmitcp_proto.fmi2_import_terminate_res fmi2_import_terminate_res = 55;
    if (has_fmi2_import_terminate_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_terminate_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_version_req fmi2_import_get_version_req = 56;
    if (has_fmi2_import_get_version_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_version_req());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_version_res fmi2_import_get_version_res = 57;
    if (has_fmi2_import_get_version_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_version_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_debug_logging_req fmi2_import_set_debug_logging_req = 58;
    if (has_fmi2_import_set_debug_logging_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_debug_logging_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_debug_logging_res fmi2_import_set_debug_logging_res = 59;
    if (has_fmi2_import_set_debug_logging_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_debug_logging_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_req fmi2_import_set_real_req = 60;
    if (has_fmi2_import_set_real_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_real_res fmi2_import_set_real_res = 61;
    if (has_fmi2_import_set_real_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_real_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_integer_req fmi2_import_set_integer_req = 62;
    if (has_fmi2_import_set_integer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_integer_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_integer_res fmi2_import_set_integer_res = 63;
    if (has_fmi2_import_set_integer_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_integer_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_boolean_req fmi2_import_set_boolean_req = 64;
    if (has_fmi2_import_set_boolean_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_boolean_req());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .fmitcp_proto.fmi2_import_set_boolean_res fmi2_import_set_boolean_res = 65;
    if (has_fmi2_import_set_boolean_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_boolean_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_string_req fmi2_import_set_string_req = 66;
    if (has_fmi2_import_set_string_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_string_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_string_res fmi2_import_set_string_res = 67;
    if (has_fmi2_import_set_string_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_string_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_req fmi2_import_get_real_req = 68;
    if (has_fmi2_import_get_real_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_real_res fmi2_import_get_real_res = 69;
    if (has_fmi2_import_get_real_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_real_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_req fmi2_import_get_integer_req = 70;
    if (has_fmi2_import_get_integer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_integer_res fmi2_import_get_integer_res = 71;
    if (has_fmi2_import_get_integer_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_integer_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_boolean_req fmi2_import_get_boolean_req = 72;
    if (has_fmi2_import_get_boolean_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_req());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .fmitcp_proto.fmi2_import_get_boolean_res fmi2_import_get_boolean_res = 73;
    if (has_fmi2_import_get_boolean_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_boolean_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_req fmi2_import_get_string_req = 74;
    if (has_fmi2_import_get_string_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_string_res fmi2_import_get_string_res = 75;
    if (has_fmi2_import_get_string_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_string_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_fmu_state_req fmi2_import_get_fmu_state_req = 76;
    if (has_fmi2_import_get_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_fmu_state_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_fmu_state_res fmi2_import_get_fmu_state_res = 77;
    if (has_fmi2_import_get_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_set_fmu_state_req fmi2_import_set_fmu_state_req = 78;
    if (has_fmi2_import_set_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_fmu_state_req());
    }

    // optional .fmitcp_proto.fmi2_import_set_fmu_state_res fmi2_import_set_fmu_state_res = 79;
    if (has_fmi2_import_set_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_set_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_free_fmu_state_req fmi2_import_free_fmu_state_req = 80;
    if (has_fmi2_import_free_fmu_state_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_fmu_state_req());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .fmitcp_proto.fmi2_import_free_fmu_state_res fmi2_import_free_fmu_state_res = 81;
    if (has_fmi2_import_free_fmu_state_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_free_fmu_state_res());
    }

    // optional .fmitcp_proto.fmi2_import_get_directional_derivative_req fmi2_import_get_directional_derivative_req = 88;
    if (has_fmi2_import_get_directional_derivative_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_directional_derivative_req());
    }

    // optional .fmitcp_proto.fmi2_import_get_directional_derivative_res fmi2_import_get_directional_derivative_res = 89;
    if (has_fmi2_import_get_directional_derivative_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmi2_import_get_directional_derivative_res());
    }

    // optional .fmitcp_proto.get_xml_req get_xml_req = 90;
    if (has_get_xml_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_xml_req());
    }

    // optional .fmitcp_proto.get_xml_res get_xml_res = 91;
    if (has_get_xml_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_xml_res());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmitcp_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmitcp_message*>(&from));
}

void fmitcp_message::MergeFrom(const fmitcp_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fmi2_import_instantiate_req()) {
      mutable_fmi2_import_instantiate_req()->::fmitcp_proto::fmi2_import_instantiate_req::MergeFrom(from.fmi2_import_instantiate_req());
    }
    if (from.has_fmi2_import_instantiate_res()) {
      mutable_fmi2_import_instantiate_res()->::fmitcp_proto::fmi2_import_instantiate_res::MergeFrom(from.fmi2_import_instantiate_res());
    }
    if (from.has_fmi2_import_initialize_slave_req()) {
      mutable_fmi2_import_initialize_slave_req()->::fmitcp_proto::fmi2_import_initialize_slave_req::MergeFrom(from.fmi2_import_initialize_slave_req());
    }
    if (from.has_fmi2_import_initialize_slave_res()) {
      mutable_fmi2_import_initialize_slave_res()->::fmitcp_proto::fmi2_import_initialize_slave_res::MergeFrom(from.fmi2_import_initialize_slave_res());
    }
    if (from.has_fmi2_import_terminate_slave_req()) {
      mutable_fmi2_import_terminate_slave_req()->::fmitcp_proto::fmi2_import_terminate_slave_req::MergeFrom(from.fmi2_import_terminate_slave_req());
    }
    if (from.has_fmi2_import_terminate_slave_res()) {
      mutable_fmi2_import_terminate_slave_res()->::fmitcp_proto::fmi2_import_terminate_slave_res::MergeFrom(from.fmi2_import_terminate_slave_res());
    }
    if (from.has_fmi2_import_reset_slave_req()) {
      mutable_fmi2_import_reset_slave_req()->::fmitcp_proto::fmi2_import_reset_slave_req::MergeFrom(from.fmi2_import_reset_slave_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fmi2_import_reset_slave_res()) {
      mutable_fmi2_import_reset_slave_res()->::fmitcp_proto::fmi2_import_reset_slave_res::MergeFrom(from.fmi2_import_reset_slave_res());
    }
    if (from.has_fmi2_import_free_slave_instance_req()) {
      mutable_fmi2_import_free_slave_instance_req()->::fmitcp_proto::fmi2_import_free_slave_instance_req::MergeFrom(from.fmi2_import_free_slave_instance_req());
    }
    if (from.has_fmi2_import_free_slave_instance_res()) {
      mutable_fmi2_import_free_slave_instance_res()->::fmitcp_proto::fmi2_import_free_slave_instance_res::MergeFrom(from.fmi2_import_free_slave_instance_res());
    }
    if (from.has_fmi2_import_set_real_input_derivatives_req()) {
      mutable_fmi2_import_set_real_input_derivatives_req()->::fmitcp_proto::fmi2_import_set_real_input_derivatives_req::MergeFrom(from.fmi2_import_set_real_input_derivatives_req());
    }
    if (from.has_fmi2_import_set_real_input_derivatives_res()) {
      mutable_fmi2_import_set_real_input_derivatives_res()->::fmitcp_proto::fmi2_import_set_real_input_derivatives_res::MergeFrom(from.fmi2_import_set_real_input_derivatives_res());
    }
    if (from.has_fmi2_import_get_real_output_derivatives_req()) {
      mutable_fmi2_import_get_real_output_derivatives_req()->::fmitcp_proto::fmi2_import_get_real_output_derivatives_req::MergeFrom(from.fmi2_import_get_real_output_derivatives_req());
    }
    if (from.has_fmi2_import_get_real_output_derivatives_res()) {
      mutable_fmi2_import_get_real_output_derivatives_res()->::fmitcp_proto::fmi2_import_get_real_output_derivatives_res::MergeFrom(from.fmi2_import_get_real_output_derivatives_res());
    }
    if (from.has_fmi2_import_cancel_step_req()) {
      mutable_fmi2_import_cancel_step_req()->::fmitcp_proto::fmi2_import_cancel_step_req::MergeFrom(from.fmi2_import_cancel_step_req());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fmi2_import_cancel_step_res()) {
      mutable_fmi2_import_cancel_step_res()->::fmitcp_proto::fmi2_import_cancel_step_res::MergeFrom(from.fmi2_import_cancel_step_res());
    }
    if (from.has_fmi2_import_do_step_req()) {
      mutable_fmi2_import_do_step_req()->::fmitcp_proto::fmi2_import_do_step_req::MergeFrom(from.fmi2_import_do_step_req());
    }
    if (from.has_fmi2_import_do_step_res()) {
      mutable_fmi2_import_do_step_res()->::fmitcp_proto::fmi2_import_do_step_res::MergeFrom(from.fmi2_import_do_step_res());
    }
    if (from.has_fmi2_import_get_status_req()) {
      mutable_fmi2_import_get_status_req()->::fmitcp_proto::fmi2_import_get_status_req::MergeFrom(from.fmi2_import_get_status_req());
    }
    if (from.has_fmi2_import_get_status_res()) {
      mutable_fmi2_import_get_status_res()->::fmitcp_proto::fmi2_import_get_status_res::MergeFrom(from.fmi2_import_get_status_res());
    }
    if (from.has_fmi2_import_get_real_status_req()) {
      mutable_fmi2_import_get_real_status_req()->::fmitcp_proto::fmi2_import_get_real_status_req::MergeFrom(from.fmi2_import_get_real_status_req());
    }
    if (from.has_fmi2_import_get_real_status_res()) {
      mutable_fmi2_import_get_real_status_res()->::fmitcp_proto::fmi2_import_get_real_status_res::MergeFrom(from.fmi2_import_get_real_status_res());
    }
    if (from.has_fmi2_import_get_integer_status_req()) {
      mutable_fmi2_import_get_integer_status_req()->::fmitcp_proto::fmi2_import_get_integer_status_req::MergeFrom(from.fmi2_import_get_integer_status_req());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fmi2_import_get_integer_status_res()) {
      mutable_fmi2_import_get_integer_status_res()->::fmitcp_proto::fmi2_import_get_integer_status_res::MergeFrom(from.fmi2_import_get_integer_status_res());
    }
    if (from.has_fmi2_import_get_boolean_status_req()) {
      mutable_fmi2_import_get_boolean_status_req()->::fmitcp_proto::fmi2_import_get_boolean_status_req::MergeFrom(from.fmi2_import_get_boolean_status_req());
    }
    if (from.has_fmi2_import_get_boolean_status_res()) {
      mutable_fmi2_import_get_boolean_status_res()->::fmitcp_proto::fmi2_import_get_boolean_status_res::MergeFrom(from.fmi2_import_get_boolean_status_res());
    }
    if (from.has_fmi2_import_get_string_status_req()) {
      mutable_fmi2_import_get_string_status_req()->::fmitcp_proto::fmi2_import_get_string_status_req::MergeFrom(from.fmi2_import_get_string_status_req());
    }
    if (from.has_fmi2_import_get_string_status_res()) {
      mutable_fmi2_import_get_string_status_res()->::fmitcp_proto::fmi2_import_get_string_status_res::MergeFrom(from.fmi2_import_get_string_status_res());
    }
    if (from.has_fmi2_import_instantiate_model_req()) {
      mutable_fmi2_import_instantiate_model_req()->::fmitcp_proto::fmi2_import_instantiate_model_req::MergeFrom(from.fmi2_import_instantiate_model_req());
    }
    if (from.has_fmi2_import_instantiate_model_res()) {
      mutable_fmi2_import_instantiate_model_res()->::fmitcp_proto::fmi2_import_instantiate_model_res::MergeFrom(from.fmi2_import_instantiate_model_res());
    }
    if (from.has_fmi2_import_free_model_instance_req()) {
      mutable_fmi2_import_free_model_instance_req()->::fmitcp_proto::fmi2_import_free_model_instance_req::MergeFrom(from.fmi2_import_free_model_instance_req());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fmi2_import_free_model_instance_res()) {
      mutable_fmi2_import_free_model_instance_res()->::fmitcp_proto::fmi2_import_free_model_instance_res::MergeFrom(from.fmi2_import_free_model_instance_res());
    }
    if (from.has_fmi2_import_set_time_req()) {
      mutable_fmi2_import_set_time_req()->::fmitcp_proto::fmi2_import_set_time_req::MergeFrom(from.fmi2_import_set_time_req());
    }
    if (from.has_fmi2_import_set_time_res()) {
      mutable_fmi2_import_set_time_res()->::fmitcp_proto::fmi2_import_set_time_res::MergeFrom(from.fmi2_import_set_time_res());
    }
    if (from.has_fmi2_import_set_continuous_states_req()) {
      mutable_fmi2_import_set_continuous_states_req()->::fmitcp_proto::fmi2_import_set_continuous_states_req::MergeFrom(from.fmi2_import_set_continuous_states_req());
    }
    if (from.has_fmi2_import_set_continuous_states_res()) {
      mutable_fmi2_import_set_continuous_states_res()->::fmitcp_proto::fmi2_import_set_continuous_states_res::MergeFrom(from.fmi2_import_set_continuous_states_res());
    }
    if (from.has_fmi2_import_completed_integrator_step_req()) {
      mutable_fmi2_import_completed_integrator_step_req()->::fmitcp_proto::fmi2_import_completed_integrator_step_req::MergeFrom(from.fmi2_import_completed_integrator_step_req());
    }
    if (from.has_fmi2_import_completed_integrator_step_res()) {
      mutable_fmi2_import_completed_integrator_step_res()->::fmitcp_proto::fmi2_import_completed_integrator_step_res::MergeFrom(from.fmi2_import_completed_integrator_step_res());
    }
    if (from.has_fmi2_import_initialize_model_req()) {
      mutable_fmi2_import_initialize_model_req()->::fmitcp_proto::fmi2_import_initialize_model_req::MergeFrom(from.fmi2_import_initialize_model_req());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_fmi2_import_initialize_model_res()) {
      mutable_fmi2_import_initialize_model_res()->::fmitcp_proto::fmi2_import_initialize_model_res::MergeFrom(from.fmi2_import_initialize_model_res());
    }
    if (from.has_fmi2_import_get_derivatives_req()) {
      mutable_fmi2_import_get_derivatives_req()->::fmitcp_proto::fmi2_import_get_derivatives_req::MergeFrom(from.fmi2_import_get_derivatives_req());
    }
    if (from.has_fmi2_import_get_derivatives_res()) {
      mutable_fmi2_import_get_derivatives_res()->::fmitcp_proto::fmi2_import_get_derivatives_res::MergeFrom(from.fmi2_import_get_derivatives_res());
    }
    if (from.has_fmi2_import_get_event_indicators_req()) {
      mutable_fmi2_import_get_event_indicators_req()->::fmitcp_proto::fmi2_import_get_event_indicators_req::MergeFrom(from.fmi2_import_get_event_indicators_req());
    }
    if (from.has_fmi2_import_get_event_indicators_res()) {
      mutable_fmi2_import_get_event_indicators_res()->::fmitcp_proto::fmi2_import_get_event_indicators_res::MergeFrom(from.fmi2_import_get_event_indicators_res());
    }
    if (from.has_fmi2_import_eventupdate_req()) {
      mutable_fmi2_import_eventupdate_req()->::fmitcp_proto::fmi2_import_eventUpdate_req::MergeFrom(from.fmi2_import_eventupdate_req());
    }
    if (from.has_fmi2_import_eventupdate_res()) {
      mutable_fmi2_import_eventupdate_res()->::fmitcp_proto::fmi2_import_eventUpdate_res::MergeFrom(from.fmi2_import_eventupdate_res());
    }
    if (from.has_fmi2_import_completed_event_iteration_req()) {
      mutable_fmi2_import_completed_event_iteration_req()->::fmitcp_proto::fmi2_import_completed_event_iteration_req::MergeFrom(from.fmi2_import_completed_event_iteration_req());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_fmi2_import_completed_event_iteration_res()) {
      mutable_fmi2_import_completed_event_iteration_res()->::fmitcp_proto::fmi2_import_completed_event_iteration_res::MergeFrom(from.fmi2_import_completed_event_iteration_res());
    }
    if (from.has_fmi2_import_get_continuous_states_req()) {
      mutable_fmi2_import_get_continuous_states_req()->::fmitcp_proto::fmi2_import_get_continuous_states_req::MergeFrom(from.fmi2_import_get_continuous_states_req());
    }
    if (from.has_fmi2_import_get_continuous_states_res()) {
      mutable_fmi2_import_get_continuous_states_res()->::fmitcp_proto::fmi2_import_get_continuous_states_res::MergeFrom(from.fmi2_import_get_continuous_states_res());
    }
    if (from.has_fmi2_import_get_nominal_continuous_states_req()) {
      mutable_fmi2_import_get_nominal_continuous_states_req()->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_req::MergeFrom(from.fmi2_import_get_nominal_continuous_states_req());
    }
    if (from.has_fmi2_import_get_nominal_continuous_states_res()) {
      mutable_fmi2_import_get_nominal_continuous_states_res()->::fmitcp_proto::fmi2_import_get_nominal_continuous_states_res::MergeFrom(from.fmi2_import_get_nominal_continuous_states_res());
    }
    if (from.has_fmi2_import_terminate_req()) {
      mutable_fmi2_import_terminate_req()->::fmitcp_proto::fmi2_import_terminate_req::MergeFrom(from.fmi2_import_terminate_req());
    }
    if (from.has_fmi2_import_terminate_res()) {
      mutable_fmi2_import_terminate_res()->::fmitcp_proto::fmi2_import_terminate_res::MergeFrom(from.fmi2_import_terminate_res());
    }
    if (from.has_fmi2_import_get_version_req()) {
      mutable_fmi2_import_get_version_req()->::fmitcp_proto::fmi2_import_get_version_req::MergeFrom(from.fmi2_import_get_version_req());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_fmi2_import_get_version_res()) {
      mutable_fmi2_import_get_version_res()->::fmitcp_proto::fmi2_import_get_version_res::MergeFrom(from.fmi2_import_get_version_res());
    }
    if (from.has_fmi2_import_set_debug_logging_req()) {
      mutable_fmi2_import_set_debug_logging_req()->::fmitcp_proto::fmi2_import_set_debug_logging_req::MergeFrom(from.fmi2_import_set_debug_logging_req());
    }
    if (from.has_fmi2_import_set_debug_logging_res()) {
      mutable_fmi2_import_set_debug_logging_res()->::fmitcp_proto::fmi2_import_set_debug_logging_res::MergeFrom(from.fmi2_import_set_debug_logging_res());
    }
    if (from.has_fmi2_import_set_real_req()) {
      mutable_fmi2_import_set_real_req()->::fmitcp_proto::fmi2_import_set_real_req::MergeFrom(from.fmi2_import_set_real_req());
    }
    if (from.has_fmi2_import_set_real_res()) {
      mutable_fmi2_import_set_real_res()->::fmitcp_proto::fmi2_import_set_real_res::MergeFrom(from.fmi2_import_set_real_res());
    }
    if (from.has_fmi2_import_set_integer_req()) {
      mutable_fmi2_import_set_integer_req()->::fmitcp_proto::fmi2_import_set_integer_req::MergeFrom(from.fmi2_import_set_integer_req());
    }
    if (from.has_fmi2_import_set_integer_res()) {
      mutable_fmi2_import_set_integer_res()->::fmitcp_proto::fmi2_import_set_integer_res::MergeFrom(from.fmi2_import_set_integer_res());
    }
    if (from.has_fmi2_import_set_boolean_req()) {
      mutable_fmi2_import_set_boolean_req()->::fmitcp_proto::fmi2_import_set_boolean_req::MergeFrom(from.fmi2_import_set_boolean_req());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_fmi2_import_set_boolean_res()) {
      mutable_fmi2_import_set_boolean_res()->::fmitcp_proto::fmi2_import_set_boolean_res::MergeFrom(from.fmi2_import_set_boolean_res());
    }
    if (from.has_fmi2_import_set_string_req()) {
      mutable_fmi2_import_set_string_req()->::fmitcp_proto::fmi2_import_set_string_req::MergeFrom(from.fmi2_import_set_string_req());
    }
    if (from.has_fmi2_import_set_string_res()) {
      mutable_fmi2_import_set_string_res()->::fmitcp_proto::fmi2_import_set_string_res::MergeFrom(from.fmi2_import_set_string_res());
    }
    if (from.has_fmi2_import_get_real_req()) {
      mutable_fmi2_import_get_real_req()->::fmitcp_proto::fmi2_import_get_real_req::MergeFrom(from.fmi2_import_get_real_req());
    }
    if (from.has_fmi2_import_get_real_res()) {
      mutable_fmi2_import_get_real_res()->::fmitcp_proto::fmi2_import_get_real_res::MergeFrom(from.fmi2_import_get_real_res());
    }
    if (from.has_fmi2_import_get_integer_req()) {
      mutable_fmi2_import_get_integer_req()->::fmitcp_proto::fmi2_import_get_integer_req::MergeFrom(from.fmi2_import_get_integer_req());
    }
    if (from.has_fmi2_import_get_integer_res()) {
      mutable_fmi2_import_get_integer_res()->::fmitcp_proto::fmi2_import_get_integer_res::MergeFrom(from.fmi2_import_get_integer_res());
    }
    if (from.has_fmi2_import_get_boolean_req()) {
      mutable_fmi2_import_get_boolean_req()->::fmitcp_proto::fmi2_import_get_boolean_req::MergeFrom(from.fmi2_import_get_boolean_req());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_fmi2_import_get_boolean_res()) {
      mutable_fmi2_import_get_boolean_res()->::fmitcp_proto::fmi2_import_get_boolean_res::MergeFrom(from.fmi2_import_get_boolean_res());
    }
    if (from.has_fmi2_import_get_string_req()) {
      mutable_fmi2_import_get_string_req()->::fmitcp_proto::fmi2_import_get_string_req::MergeFrom(from.fmi2_import_get_string_req());
    }
    if (from.has_fmi2_import_get_string_res()) {
      mutable_fmi2_import_get_string_res()->::fmitcp_proto::fmi2_import_get_string_res::MergeFrom(from.fmi2_import_get_string_res());
    }
    if (from.has_fmi2_import_get_fmu_state_req()) {
      mutable_fmi2_import_get_fmu_state_req()->::fmitcp_proto::fmi2_import_get_fmu_state_req::MergeFrom(from.fmi2_import_get_fmu_state_req());
    }
    if (from.has_fmi2_import_get_fmu_state_res()) {
      mutable_fmi2_import_get_fmu_state_res()->::fmitcp_proto::fmi2_import_get_fmu_state_res::MergeFrom(from.fmi2_import_get_fmu_state_res());
    }
    if (from.has_fmi2_import_set_fmu_state_req()) {
      mutable_fmi2_import_set_fmu_state_req()->::fmitcp_proto::fmi2_import_set_fmu_state_req::MergeFrom(from.fmi2_import_set_fmu_state_req());
    }
    if (from.has_fmi2_import_set_fmu_state_res()) {
      mutable_fmi2_import_set_fmu_state_res()->::fmitcp_proto::fmi2_import_set_fmu_state_res::MergeFrom(from.fmi2_import_set_fmu_state_res());
    }
    if (from.has_fmi2_import_free_fmu_state_req()) {
      mutable_fmi2_import_free_fmu_state_req()->::fmitcp_proto::fmi2_import_free_fmu_state_req::MergeFrom(from.fmi2_import_free_fmu_state_req());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_fmi2_import_free_fmu_state_res()) {
      mutable_fmi2_import_free_fmu_state_res()->::fmitcp_proto::fmi2_import_free_fmu_state_res::MergeFrom(from.fmi2_import_free_fmu_state_res());
    }
    if (from.has_fmi2_import_get_directional_derivative_req()) {
      mutable_fmi2_import_get_directional_derivative_req()->::fmitcp_proto::fmi2_import_get_directional_derivative_req::MergeFrom(from.fmi2_import_get_directional_derivative_req());
    }
    if (from.has_fmi2_import_get_directional_derivative_res()) {
      mutable_fmi2_import_get_directional_derivative_res()->::fmitcp_proto::fmi2_import_get_directional_derivative_res::MergeFrom(from.fmi2_import_get_directional_derivative_res());
    }
    if (from.has_get_xml_req()) {
      mutable_get_xml_req()->::fmitcp_proto::get_xml_req::MergeFrom(from.get_xml_req());
    }
    if (from.has_get_xml_res()) {
      mutable_get_xml_res()->::fmitcp_proto::get_xml_res::MergeFrom(from.get_xml_res());
    }
  }
}

void fmitcp_message::CopyFrom(const fmitcp_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmitcp_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fmi2_import_instantiate_req()) {
    if (!this->fmi2_import_instantiate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_res()) {
    if (!this->fmi2_import_instantiate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_slave_req()) {
    if (!this->fmi2_import_initialize_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_slave_res()) {
    if (!this->fmi2_import_initialize_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_slave_req()) {
    if (!this->fmi2_import_terminate_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_slave_res()) {
    if (!this->fmi2_import_terminate_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_reset_slave_req()) {
    if (!this->fmi2_import_reset_slave_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_reset_slave_res()) {
    if (!this->fmi2_import_reset_slave_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_slave_instance_req()) {
    if (!this->fmi2_import_free_slave_instance_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_slave_instance_res()) {
    if (!this->fmi2_import_free_slave_instance_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_input_derivatives_req()) {
    if (!this->fmi2_import_set_real_input_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_input_derivatives_res()) {
    if (!this->fmi2_import_set_real_input_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_output_derivatives_req()) {
    if (!this->fmi2_import_get_real_output_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_output_derivatives_res()) {
    if (!this->fmi2_import_get_real_output_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_cancel_step_req()) {
    if (!this->fmi2_import_cancel_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_cancel_step_res()) {
    if (!this->fmi2_import_cancel_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_do_step_req()) {
    if (!this->fmi2_import_do_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_do_step_res()) {
    if (!this->fmi2_import_do_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_status_req()) {
    if (!this->fmi2_import_get_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_status_res()) {
    if (!this->fmi2_import_get_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_status_req()) {
    if (!this->fmi2_import_get_real_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_status_res()) {
    if (!this->fmi2_import_get_real_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_status_req()) {
    if (!this->fmi2_import_get_integer_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_status_res()) {
    if (!this->fmi2_import_get_integer_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_status_req()) {
    if (!this->fmi2_import_get_boolean_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_status_res()) {
    if (!this->fmi2_import_get_boolean_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_status_req()) {
    if (!this->fmi2_import_get_string_status_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_status_res()) {
    if (!this->fmi2_import_get_string_status_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_model_req()) {
    if (!this->fmi2_import_instantiate_model_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_instantiate_model_res()) {
    if (!this->fmi2_import_instantiate_model_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_model_instance_req()) {
    if (!this->fmi2_import_free_model_instance_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_model_instance_res()) {
    if (!this->fmi2_import_free_model_instance_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_time_req()) {
    if (!this->fmi2_import_set_time_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_time_res()) {
    if (!this->fmi2_import_set_time_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_continuous_states_req()) {
    if (!this->fmi2_import_set_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_continuous_states_res()) {
    if (!this->fmi2_import_set_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_integrator_step_req()) {
    if (!this->fmi2_import_completed_integrator_step_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_integrator_step_res()) {
    if (!this->fmi2_import_completed_integrator_step_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_model_req()) {
    if (!this->fmi2_import_initialize_model_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_initialize_model_res()) {
    if (!this->fmi2_import_initialize_model_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_derivatives_req()) {
    if (!this->fmi2_import_get_derivatives_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_derivatives_res()) {
    if (!this->fmi2_import_get_derivatives_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_event_indicators_req()) {
    if (!this->fmi2_import_get_event_indicators_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_event_indicators_res()) {
    if (!this->fmi2_import_get_event_indicators_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_eventupdate_req()) {
    if (!this->fmi2_import_eventupdate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_eventupdate_res()) {
    if (!this->fmi2_import_eventupdate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_event_iteration_req()) {
    if (!this->fmi2_import_completed_event_iteration_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_completed_event_iteration_res()) {
    if (!this->fmi2_import_completed_event_iteration_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_continuous_states_req()) {
    if (!this->fmi2_import_get_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_continuous_states_res()) {
    if (!this->fmi2_import_get_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_nominal_continuous_states_req()) {
    if (!this->fmi2_import_get_nominal_continuous_states_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_nominal_continuous_states_res()) {
    if (!this->fmi2_import_get_nominal_continuous_states_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_req()) {
    if (!this->fmi2_import_terminate_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_terminate_res()) {
    if (!this->fmi2_import_terminate_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_version_req()) {
    if (!this->fmi2_import_get_version_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_version_res()) {
    if (!this->fmi2_import_get_version_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_debug_logging_req()) {
    if (!this->fmi2_import_set_debug_logging_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_debug_logging_res()) {
    if (!this->fmi2_import_set_debug_logging_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_req()) {
    if (!this->fmi2_import_set_real_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_real_res()) {
    if (!this->fmi2_import_set_real_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_integer_req()) {
    if (!this->fmi2_import_set_integer_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_integer_res()) {
    if (!this->fmi2_import_set_integer_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_boolean_req()) {
    if (!this->fmi2_import_set_boolean_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_boolean_res()) {
    if (!this->fmi2_import_set_boolean_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_string_req()) {
    if (!this->fmi2_import_set_string_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_string_res()) {
    if (!this->fmi2_import_set_string_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_req()) {
    if (!this->fmi2_import_get_real_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_real_res()) {
    if (!this->fmi2_import_get_real_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_req()) {
    if (!this->fmi2_import_get_integer_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_integer_res()) {
    if (!this->fmi2_import_get_integer_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_req()) {
    if (!this->fmi2_import_get_boolean_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_boolean_res()) {
    if (!this->fmi2_import_get_boolean_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_req()) {
    if (!this->fmi2_import_get_string_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_string_res()) {
    if (!this->fmi2_import_get_string_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_fmu_state_req()) {
    if (!this->fmi2_import_get_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_fmu_state_res()) {
    if (!this->fmi2_import_get_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_fmu_state_req()) {
    if (!this->fmi2_import_set_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_set_fmu_state_res()) {
    if (!this->fmi2_import_set_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_fmu_state_req()) {
    if (!this->fmi2_import_free_fmu_state_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_free_fmu_state_res()) {
    if (!this->fmi2_import_free_fmu_state_res().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_directional_derivative_req()) {
    if (!this->fmi2_import_get_directional_derivative_req().IsInitialized()) return false;
  }
  if (has_fmi2_import_get_directional_derivative_res()) {
    if (!this->fmi2_import_get_directional_derivative_res().IsInitialized()) return false;
  }
  if (has_get_xml_req()) {
    if (!this->get_xml_req().IsInitialized()) return false;
  }
  if (has_get_xml_res()) {
    if (!this->get_xml_res().IsInitialized()) return false;
  }
  return true;
}

void fmitcp_message::Swap(fmitcp_message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(fmi2_import_instantiate_req_, other->fmi2_import_instantiate_req_);
    std::swap(fmi2_import_instantiate_res_, other->fmi2_import_instantiate_res_);
    std::swap(fmi2_import_initialize_slave_req_, other->fmi2_import_initialize_slave_req_);
    std::swap(fmi2_import_initialize_slave_res_, other->fmi2_import_initialize_slave_res_);
    std::swap(fmi2_import_terminate_slave_req_, other->fmi2_import_terminate_slave_req_);
    std::swap(fmi2_import_terminate_slave_res_, other->fmi2_import_terminate_slave_res_);
    std::swap(fmi2_import_reset_slave_req_, other->fmi2_import_reset_slave_req_);
    std::swap(fmi2_import_reset_slave_res_, other->fmi2_import_reset_slave_res_);
    std::swap(fmi2_import_free_slave_instance_req_, other->fmi2_import_free_slave_instance_req_);
    std::swap(fmi2_import_free_slave_instance_res_, other->fmi2_import_free_slave_instance_res_);
    std::swap(fmi2_import_set_real_input_derivatives_req_, other->fmi2_import_set_real_input_derivatives_req_);
    std::swap(fmi2_import_set_real_input_derivatives_res_, other->fmi2_import_set_real_input_derivatives_res_);
    std::swap(fmi2_import_get_real_output_derivatives_req_, other->fmi2_import_get_real_output_derivatives_req_);
    std::swap(fmi2_import_get_real_output_derivatives_res_, other->fmi2_import_get_real_output_derivatives_res_);
    std::swap(fmi2_import_cancel_step_req_, other->fmi2_import_cancel_step_req_);
    std::swap(fmi2_import_cancel_step_res_, other->fmi2_import_cancel_step_res_);
    std::swap(fmi2_import_do_step_req_, other->fmi2_import_do_step_req_);
    std::swap(fmi2_import_do_step_res_, other->fmi2_import_do_step_res_);
    std::swap(fmi2_import_get_status_req_, other->fmi2_import_get_status_req_);
    std::swap(fmi2_import_get_status_res_, other->fmi2_import_get_status_res_);
    std::swap(fmi2_import_get_real_status_req_, other->fmi2_import_get_real_status_req_);
    std::swap(fmi2_import_get_real_status_res_, other->fmi2_import_get_real_status_res_);
    std::swap(fmi2_import_get_integer_status_req_, other->fmi2_import_get_integer_status_req_);
    std::swap(fmi2_import_get_integer_status_res_, other->fmi2_import_get_integer_status_res_);
    std::swap(fmi2_import_get_boolean_status_req_, other->fmi2_import_get_boolean_status_req_);
    std::swap(fmi2_import_get_boolean_status_res_, other->fmi2_import_get_boolean_status_res_);
    std::swap(fmi2_import_get_string_status_req_, other->fmi2_import_get_string_status_req_);
    std::swap(fmi2_import_get_string_status_res_, other->fmi2_import_get_string_status_res_);
    std::swap(fmi2_import_instantiate_model_req_, other->fmi2_import_instantiate_model_req_);
    std::swap(fmi2_import_instantiate_model_res_, other->fmi2_import_instantiate_model_res_);
    std::swap(fmi2_import_free_model_instance_req_, other->fmi2_import_free_model_instance_req_);
    std::swap(fmi2_import_free_model_instance_res_, other->fmi2_import_free_model_instance_res_);
    std::swap(fmi2_import_set_time_req_, other->fmi2_import_set_time_req_);
    std::swap(fmi2_import_set_time_res_, other->fmi2_import_set_time_res_);
    std::swap(fmi2_import_set_continuous_states_req_, other->fmi2_import_set_continuous_states_req_);
    std::swap(fmi2_import_set_continuous_states_res_, other->fmi2_import_set_continuous_states_res_);
    std::swap(fmi2_import_completed_integrator_step_req_, other->fmi2_import_completed_integrator_step_req_);
    std::swap(fmi2_import_completed_integrator_step_res_, other->fmi2_import_completed_integrator_step_res_);
    std::swap(fmi2_import_initialize_model_req_, other->fmi2_import_initialize_model_req_);
    std::swap(fmi2_import_initialize_model_res_, other->fmi2_import_initialize_model_res_);
    std::swap(fmi2_import_get_derivatives_req_, other->fmi2_import_get_derivatives_req_);
    std::swap(fmi2_import_get_derivatives_res_, other->fmi2_import_get_derivatives_res_);
    std::swap(fmi2_import_get_event_indicators_req_, other->fmi2_import_get_event_indicators_req_);
    std::swap(fmi2_import_get_event_indicators_res_, other->fmi2_import_get_event_indicators_res_);
    std::swap(fmi2_import_eventupdate_req_, other->fmi2_import_eventupdate_req_);
    std::swap(fmi2_import_eventupdate_res_, other->fmi2_import_eventupdate_res_);
    std::swap(fmi2_import_completed_event_iteration_req_, other->fmi2_import_completed_event_iteration_req_);
    std::swap(fmi2_import_completed_event_iteration_res_, other->fmi2_import_completed_event_iteration_res_);
    std::swap(fmi2_import_get_continuous_states_req_, other->fmi2_import_get_continuous_states_req_);
    std::swap(fmi2_import_get_continuous_states_res_, other->fmi2_import_get_continuous_states_res_);
    std::swap(fmi2_import_get_nominal_continuous_states_req_, other->fmi2_import_get_nominal_continuous_states_req_);
    std::swap(fmi2_import_get_nominal_continuous_states_res_, other->fmi2_import_get_nominal_continuous_states_res_);
    std::swap(fmi2_import_terminate_req_, other->fmi2_import_terminate_req_);
    std::swap(fmi2_import_terminate_res_, other->fmi2_import_terminate_res_);
    std::swap(fmi2_import_get_version_req_, other->fmi2_import_get_version_req_);
    std::swap(fmi2_import_get_version_res_, other->fmi2_import_get_version_res_);
    std::swap(fmi2_import_set_debug_logging_req_, other->fmi2_import_set_debug_logging_req_);
    std::swap(fmi2_import_set_debug_logging_res_, other->fmi2_import_set_debug_logging_res_);
    std::swap(fmi2_import_set_real_req_, other->fmi2_import_set_real_req_);
    std::swap(fmi2_import_set_real_res_, other->fmi2_import_set_real_res_);
    std::swap(fmi2_import_set_integer_req_, other->fmi2_import_set_integer_req_);
    std::swap(fmi2_import_set_integer_res_, other->fmi2_import_set_integer_res_);
    std::swap(fmi2_import_set_boolean_req_, other->fmi2_import_set_boolean_req_);
    std::swap(fmi2_import_set_boolean_res_, other->fmi2_import_set_boolean_res_);
    std::swap(fmi2_import_set_string_req_, other->fmi2_import_set_string_req_);
    std::swap(fmi2_import_set_string_res_, other->fmi2_import_set_string_res_);
    std::swap(fmi2_import_get_real_req_, other->fmi2_import_get_real_req_);
    std::swap(fmi2_import_get_real_res_, other->fmi2_import_get_real_res_);
    std::swap(fmi2_import_get_integer_req_, other->fmi2_import_get_integer_req_);
    std::swap(fmi2_import_get_integer_res_, other->fmi2_import_get_integer_res_);
    std::swap(fmi2_import_get_boolean_req_, other->fmi2_import_get_boolean_req_);
    std::swap(fmi2_import_get_boolean_res_, other->fmi2_import_get_boolean_res_);
    std::swap(fmi2_import_get_string_req_, other->fmi2_import_get_string_req_);
    std::swap(fmi2_import_get_string_res_, other->fmi2_import_get_string_res_);
    std::swap(fmi2_import_get_fmu_state_req_, other->fmi2_import_get_fmu_state_req_);
    std::swap(fmi2_import_get_fmu_state_res_, other->fmi2_import_get_fmu_state_res_);
    std::swap(fmi2_import_set_fmu_state_req_, other->fmi2_import_set_fmu_state_req_);
    std::swap(fmi2_import_set_fmu_state_res_, other->fmi2_import_set_fmu_state_res_);
    std::swap(fmi2_import_free_fmu_state_req_, other->fmi2_import_free_fmu_state_req_);
    std::swap(fmi2_import_free_fmu_state_res_, other->fmi2_import_free_fmu_state_res_);
    std::swap(fmi2_import_get_directional_derivative_req_, other->fmi2_import_get_directional_derivative_req_);
    std::swap(fmi2_import_get_directional_derivative_res_, other->fmi2_import_get_directional_derivative_res_);
    std::swap(get_xml_req_, other->get_xml_req_);
    std::swap(get_xml_res_, other->get_xml_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmitcp_message::GetTypeName() const {
  return "fmitcp_proto.fmitcp_message";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_event_info_t::kIterationConvergedFieldNumber;
const int fmi2_event_info_t::kStateValueReferencesChangedFieldNumber;
const int fmi2_event_info_t::kStateValuesChangedFieldNumber;
const int fmi2_event_info_t::kTerminateSimulationFieldNumber;
const int fmi2_event_info_t::kUpcomingTimeEventFieldNumber;
const int fmi2_event_info_t::kNextEventTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_event_info_t::fmi2_event_info_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_event_info_t::InitAsDefaultInstance() {
}

fmi2_event_info_t::fmi2_event_info_t(const fmi2_event_info_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_event_info_t::SharedCtor() {
  _cached_size_ = 0;
  iterationconverged_ = false;
  statevaluereferenceschanged_ = false;
  statevalueschanged_ = false;
  terminatesimulation_ = false;
  upcomingtimeevent_ = false;
  nexteventtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_event_info_t::~fmi2_event_info_t() {
  SharedDtor();
}

void fmi2_event_info_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_event_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_event_info_t& fmi2_event_info_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_event_info_t* fmi2_event_info_t::default_instance_ = NULL;

fmi2_event_info_t* fmi2_event_info_t::New() const {
  return new fmi2_event_info_t;
}

void fmi2_event_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iterationconverged_ = false;
    statevaluereferenceschanged_ = false;
    statevalueschanged_ = false;
    terminatesimulation_ = false;
    upcomingtimeevent_ = false;
    nexteventtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_event_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool iterationConverged = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iterationconverged_)));
          set_has_iterationconverged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateValueReferencesChanged;
        break;
      }

      // required bool stateValueReferencesChanged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateValueReferencesChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &statevaluereferenceschanged_)));
          set_has_statevaluereferenceschanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateValuesChanged;
        break;
      }

      // required bool stateValuesChanged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateValuesChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &statevalueschanged_)));
          set_has_statevalueschanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_terminateSimulation;
        break;
      }

      // required bool terminateSimulation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminateSimulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminatesimulation_)));
          set_has_terminatesimulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upcomingTimeEvent;
        break;
      }

      // required bool upcomingTimeEvent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upcomingTimeEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upcomingtimeevent_)));
          set_has_upcomingtimeevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_nextEventTime;
        break;
      }

      // required double nextEventTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nextEventTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nexteventtime_)));
          set_has_nexteventtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_event_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool iterationConverged = 1;
  if (has_iterationconverged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iterationconverged(), output);
  }

  // required bool stateValueReferencesChanged = 2;
  if (has_statevaluereferenceschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->statevaluereferenceschanged(), output);
  }

  // required bool stateValuesChanged = 3;
  if (has_statevalueschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->statevalueschanged(), output);
  }

  // required bool terminateSimulation = 4;
  if (has_terminatesimulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->terminatesimulation(), output);
  }

  // required bool upcomingTimeEvent = 5;
  if (has_upcomingtimeevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upcomingtimeevent(), output);
  }

  // required double nextEventTime = 6;
  if (has_nexteventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->nexteventtime(), output);
  }

}

int fmi2_event_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool iterationConverged = 1;
    if (has_iterationconverged()) {
      total_size += 1 + 1;
    }

    // required bool stateValueReferencesChanged = 2;
    if (has_statevaluereferenceschanged()) {
      total_size += 1 + 1;
    }

    // required bool stateValuesChanged = 3;
    if (has_statevalueschanged()) {
      total_size += 1 + 1;
    }

    // required bool terminateSimulation = 4;
    if (has_terminatesimulation()) {
      total_size += 1 + 1;
    }

    // required bool upcomingTimeEvent = 5;
    if (has_upcomingtimeevent()) {
      total_size += 1 + 1;
    }

    // required double nextEventTime = 6;
    if (has_nexteventtime()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_event_info_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_event_info_t*>(&from));
}

void fmi2_event_info_t::MergeFrom(const fmi2_event_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iterationconverged()) {
      set_iterationconverged(from.iterationconverged());
    }
    if (from.has_statevaluereferenceschanged()) {
      set_statevaluereferenceschanged(from.statevaluereferenceschanged());
    }
    if (from.has_statevalueschanged()) {
      set_statevalueschanged(from.statevalueschanged());
    }
    if (from.has_terminatesimulation()) {
      set_terminatesimulation(from.terminatesimulation());
    }
    if (from.has_upcomingtimeevent()) {
      set_upcomingtimeevent(from.upcomingtimeevent());
    }
    if (from.has_nexteventtime()) {
      set_nexteventtime(from.nexteventtime());
    }
  }
}

void fmi2_event_info_t::CopyFrom(const fmi2_event_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_event_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void fmi2_event_info_t::Swap(fmi2_event_info_t* other) {
  if (other != this) {
    std::swap(iterationconverged_, other->iterationconverged_);
    std::swap(statevaluereferenceschanged_, other->statevaluereferenceschanged_);
    std::swap(statevalueschanged_, other->statevalueschanged_);
    std::swap(terminatesimulation_, other->terminatesimulation_);
    std::swap(upcomingtimeevent_, other->upcomingtimeevent_);
    std::swap(nexteventtime_, other->nexteventtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_event_info_t::GetTypeName() const {
  return "fmitcp_proto.fmi2_event_info_t";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_req::kMessageIdFieldNumber;
const int fmi2_import_instantiate_req::kVisibleFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_req::fmi2_import_instantiate_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_instantiate_req::InitAsDefaultInstance() {
}

fmi2_import_instantiate_req::fmi2_import_instantiate_req(const fmi2_import_instantiate_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_req::~fmi2_import_instantiate_req() {
  SharedDtor();
}

void fmi2_import_instantiate_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_instantiate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_instantiate_req& fmi2_import_instantiate_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_instantiate_req* fmi2_import_instantiate_req::default_instance_ = NULL;

fmi2_import_instantiate_req* fmi2_import_instantiate_req::New() const {
  return new fmi2_import_instantiate_req;
}

void fmi2_import_instantiate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_instantiate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // optional bool visible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // optional bool visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

}

int fmi2_import_instantiate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // optional bool visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_instantiate_req*>(&from));
}

void fmi2_import_instantiate_req::MergeFrom(const fmi2_import_instantiate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
}

void fmi2_import_instantiate_req::CopyFrom(const fmi2_import_instantiate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_instantiate_req::Swap(fmi2_import_instantiate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_instantiate_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_instantiate_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_res::kMessageIdFieldNumber;
const int fmi2_import_instantiate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_res::fmi2_import_instantiate_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_instantiate_res::InitAsDefaultInstance() {
}

fmi2_import_instantiate_res::fmi2_import_instantiate_res(const fmi2_import_instantiate_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_res::~fmi2_import_instantiate_res() {
  SharedDtor();
}

void fmi2_import_instantiate_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_instantiate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_instantiate_res& fmi2_import_instantiate_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_instantiate_res* fmi2_import_instantiate_res::default_instance_ = NULL;

fmi2_import_instantiate_res* fmi2_import_instantiate_res::New() const {
  return new fmi2_import_instantiate_res;
}

void fmi2_import_instantiate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_instantiate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.jm_status_enu_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_status_enu_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::jm_status_enu_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_instantiate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_status_enu_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_instantiate_res*>(&from));
}

void fmi2_import_instantiate_res::MergeFrom(const fmi2_import_instantiate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_instantiate_res::CopyFrom(const fmi2_import_instantiate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_instantiate_res::Swap(fmi2_import_instantiate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_instantiate_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_instantiate_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_slave_req::kMessageIdFieldNumber;
const int fmi2_import_initialize_slave_req::kFmuIdFieldNumber;
const int fmi2_import_initialize_slave_req::kToleranceDefinedFieldNumber;
const int fmi2_import_initialize_slave_req::kToleranceFieldNumber;
const int fmi2_import_initialize_slave_req::kStartTimeFieldNumber;
const int fmi2_import_initialize_slave_req::kStopTimeDefinedFieldNumber;
const int fmi2_import_initialize_slave_req::kStopTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_slave_req::fmi2_import_initialize_slave_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_initialize_slave_req::InitAsDefaultInstance() {
}

fmi2_import_initialize_slave_req::fmi2_import_initialize_slave_req(const fmi2_import_initialize_slave_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  tolerancedefined_ = false;
  tolerance_ = 0;
  starttime_ = 0;
  stoptimedefined_ = false;
  stoptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_slave_req::~fmi2_import_initialize_slave_req() {
  SharedDtor();
}

void fmi2_import_initialize_slave_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_initialize_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_initialize_slave_req& fmi2_import_initialize_slave_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_initialize_slave_req* fmi2_import_initialize_slave_req::default_instance_ = NULL;

fmi2_import_initialize_slave_req* fmi2_import_initialize_slave_req::New() const {
  return new fmi2_import_initialize_slave_req;
}

void fmi2_import_initialize_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    tolerancedefined_ = false;
    tolerance_ = 0;
    starttime_ = 0;
    stoptimedefined_ = false;
    stoptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_initialize_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toleranceDefined;
        break;
      }

      // required bool toleranceDefined = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toleranceDefined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tolerancedefined_)));
          set_has_tolerancedefined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_tolerance;
        break;
      }

      // required double tolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_startTime;
        break;
      }

      // required double startTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stopTimeDefined;
        break;
      }

      // required bool stopTimeDefined = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopTimeDefined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stoptimedefined_)));
          set_has_stoptimedefined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_stopTime;
        break;
      }

      // required double stopTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool toleranceDefined = 3;
  if (has_tolerancedefined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tolerancedefined(), output);
  }

  // required double tolerance = 4;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tolerance(), output);
  }

  // required double startTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->starttime(), output);
  }

  // required bool stopTimeDefined = 6;
  if (has_stoptimedefined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stoptimedefined(), output);
  }

  // required double stopTime = 7;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stoptime(), output);
  }

}

int fmi2_import_initialize_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool toleranceDefined = 3;
    if (has_tolerancedefined()) {
      total_size += 1 + 1;
    }

    // required double tolerance = 4;
    if (has_tolerance()) {
      total_size += 1 + 8;
    }

    // required double startTime = 5;
    if (has_starttime()) {
      total_size += 1 + 8;
    }

    // required bool stopTimeDefined = 6;
    if (has_stoptimedefined()) {
      total_size += 1 + 1;
    }

    // required double stopTime = 7;
    if (has_stoptime()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_slave_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_initialize_slave_req*>(&from));
}

void fmi2_import_initialize_slave_req::MergeFrom(const fmi2_import_initialize_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_tolerancedefined()) {
      set_tolerancedefined(from.tolerancedefined());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptimedefined()) {
      set_stoptimedefined(from.stoptimedefined());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
  }
}

void fmi2_import_initialize_slave_req::CopyFrom(const fmi2_import_initialize_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void fmi2_import_initialize_slave_req::Swap(fmi2_import_initialize_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(tolerancedefined_, other->tolerancedefined_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptimedefined_, other->stoptimedefined_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_initialize_slave_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_initialize_slave_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_slave_res::kMessageIdFieldNumber;
const int fmi2_import_initialize_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_slave_res::fmi2_import_initialize_slave_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_initialize_slave_res::InitAsDefaultInstance() {
}

fmi2_import_initialize_slave_res::fmi2_import_initialize_slave_res(const fmi2_import_initialize_slave_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_slave_res::~fmi2_import_initialize_slave_res() {
  SharedDtor();
}

void fmi2_import_initialize_slave_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_initialize_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_initialize_slave_res& fmi2_import_initialize_slave_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_initialize_slave_res* fmi2_import_initialize_slave_res::default_instance_ = NULL;

fmi2_import_initialize_slave_res* fmi2_import_initialize_slave_res::New() const {
  return new fmi2_import_initialize_slave_res;
}

void fmi2_import_initialize_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_initialize_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_initialize_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_slave_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_initialize_slave_res*>(&from));
}

void fmi2_import_initialize_slave_res::MergeFrom(const fmi2_import_initialize_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_initialize_slave_res::CopyFrom(const fmi2_import_initialize_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_initialize_slave_res::Swap(fmi2_import_initialize_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_initialize_slave_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_initialize_slave_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_slave_req::kMessageIdFieldNumber;
const int fmi2_import_terminate_slave_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_slave_req::fmi2_import_terminate_slave_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_terminate_slave_req::InitAsDefaultInstance() {
}

fmi2_import_terminate_slave_req::fmi2_import_terminate_slave_req(const fmi2_import_terminate_slave_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_slave_req::~fmi2_import_terminate_slave_req() {
  SharedDtor();
}

void fmi2_import_terminate_slave_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_terminate_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_terminate_slave_req& fmi2_import_terminate_slave_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_terminate_slave_req* fmi2_import_terminate_slave_req::default_instance_ = NULL;

fmi2_import_terminate_slave_req* fmi2_import_terminate_slave_req::New() const {
  return new fmi2_import_terminate_slave_req;
}

void fmi2_import_terminate_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_terminate_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_terminate_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_slave_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_terminate_slave_req*>(&from));
}

void fmi2_import_terminate_slave_req::MergeFrom(const fmi2_import_terminate_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_terminate_slave_req::CopyFrom(const fmi2_import_terminate_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_slave_req::Swap(fmi2_import_terminate_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_terminate_slave_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_terminate_slave_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_slave_res::kMessageIdFieldNumber;
const int fmi2_import_terminate_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_slave_res::fmi2_import_terminate_slave_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_terminate_slave_res::InitAsDefaultInstance() {
}

fmi2_import_terminate_slave_res::fmi2_import_terminate_slave_res(const fmi2_import_terminate_slave_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_slave_res::~fmi2_import_terminate_slave_res() {
  SharedDtor();
}

void fmi2_import_terminate_slave_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_terminate_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_terminate_slave_res& fmi2_import_terminate_slave_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_terminate_slave_res* fmi2_import_terminate_slave_res::default_instance_ = NULL;

fmi2_import_terminate_slave_res* fmi2_import_terminate_slave_res::New() const {
  return new fmi2_import_terminate_slave_res;
}

void fmi2_import_terminate_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_terminate_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_terminate_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_slave_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_terminate_slave_res*>(&from));
}

void fmi2_import_terminate_slave_res::MergeFrom(const fmi2_import_terminate_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_terminate_slave_res::CopyFrom(const fmi2_import_terminate_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_slave_res::Swap(fmi2_import_terminate_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_terminate_slave_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_terminate_slave_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_reset_slave_req::kMessageIdFieldNumber;
const int fmi2_import_reset_slave_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_reset_slave_req::fmi2_import_reset_slave_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_reset_slave_req::InitAsDefaultInstance() {
}

fmi2_import_reset_slave_req::fmi2_import_reset_slave_req(const fmi2_import_reset_slave_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_reset_slave_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_reset_slave_req::~fmi2_import_reset_slave_req() {
  SharedDtor();
}

void fmi2_import_reset_slave_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_reset_slave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_reset_slave_req& fmi2_import_reset_slave_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_reset_slave_req* fmi2_import_reset_slave_req::default_instance_ = NULL;

fmi2_import_reset_slave_req* fmi2_import_reset_slave_req::New() const {
  return new fmi2_import_reset_slave_req;
}

void fmi2_import_reset_slave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_reset_slave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_reset_slave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_reset_slave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_reset_slave_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_reset_slave_req*>(&from));
}

void fmi2_import_reset_slave_req::MergeFrom(const fmi2_import_reset_slave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_reset_slave_req::CopyFrom(const fmi2_import_reset_slave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_reset_slave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_reset_slave_req::Swap(fmi2_import_reset_slave_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_reset_slave_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_reset_slave_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_reset_slave_res::kMessageIdFieldNumber;
const int fmi2_import_reset_slave_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_reset_slave_res::fmi2_import_reset_slave_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_reset_slave_res::InitAsDefaultInstance() {
}

fmi2_import_reset_slave_res::fmi2_import_reset_slave_res(const fmi2_import_reset_slave_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_reset_slave_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_reset_slave_res::~fmi2_import_reset_slave_res() {
  SharedDtor();
}

void fmi2_import_reset_slave_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_reset_slave_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_reset_slave_res& fmi2_import_reset_slave_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_reset_slave_res* fmi2_import_reset_slave_res::default_instance_ = NULL;

fmi2_import_reset_slave_res* fmi2_import_reset_slave_res::New() const {
  return new fmi2_import_reset_slave_res;
}

void fmi2_import_reset_slave_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_reset_slave_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_reset_slave_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_reset_slave_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_reset_slave_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_reset_slave_res*>(&from));
}

void fmi2_import_reset_slave_res::MergeFrom(const fmi2_import_reset_slave_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_reset_slave_res::CopyFrom(const fmi2_import_reset_slave_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_reset_slave_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_reset_slave_res::Swap(fmi2_import_reset_slave_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_reset_slave_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_reset_slave_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_slave_instance_req::kMessageIdFieldNumber;
const int fmi2_import_free_slave_instance_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_slave_instance_req::fmi2_import_free_slave_instance_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_slave_instance_req::InitAsDefaultInstance() {
}

fmi2_import_free_slave_instance_req::fmi2_import_free_slave_instance_req(const fmi2_import_free_slave_instance_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_slave_instance_req::~fmi2_import_free_slave_instance_req() {
  SharedDtor();
}

void fmi2_import_free_slave_instance_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_slave_instance_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_slave_instance_req& fmi2_import_free_slave_instance_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_slave_instance_req* fmi2_import_free_slave_instance_req::default_instance_ = NULL;

fmi2_import_free_slave_instance_req* fmi2_import_free_slave_instance_req::New() const {
  return new fmi2_import_free_slave_instance_req;
}

void fmi2_import_free_slave_instance_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_slave_instance_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_slave_instance_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_free_slave_instance_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_slave_instance_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_slave_instance_req*>(&from));
}

void fmi2_import_free_slave_instance_req::MergeFrom(const fmi2_import_free_slave_instance_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_free_slave_instance_req::CopyFrom(const fmi2_import_free_slave_instance_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_slave_instance_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_slave_instance_req::Swap(fmi2_import_free_slave_instance_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_slave_instance_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_slave_instance_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_slave_instance_res::kMessageIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_slave_instance_res::fmi2_import_free_slave_instance_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_slave_instance_res::InitAsDefaultInstance() {
}

fmi2_import_free_slave_instance_res::fmi2_import_free_slave_instance_res(const fmi2_import_free_slave_instance_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_slave_instance_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_slave_instance_res::~fmi2_import_free_slave_instance_res() {
  SharedDtor();
}

void fmi2_import_free_slave_instance_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_slave_instance_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_slave_instance_res& fmi2_import_free_slave_instance_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_slave_instance_res* fmi2_import_free_slave_instance_res::default_instance_ = NULL;

fmi2_import_free_slave_instance_res* fmi2_import_free_slave_instance_res::New() const {
  return new fmi2_import_free_slave_instance_res;
}

void fmi2_import_free_slave_instance_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_slave_instance_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_slave_instance_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

}

int fmi2_import_free_slave_instance_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_slave_instance_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_slave_instance_res*>(&from));
}

void fmi2_import_free_slave_instance_res::MergeFrom(const fmi2_import_free_slave_instance_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
}

void fmi2_import_free_slave_instance_res::CopyFrom(const fmi2_import_free_slave_instance_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_slave_instance_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_free_slave_instance_res::Swap(fmi2_import_free_slave_instance_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_slave_instance_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_slave_instance_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_input_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kFmuIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kValueReferencesFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kOrdersFieldNumber;
const int fmi2_import_set_real_input_derivatives_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_input_derivatives_req::fmi2_import_set_real_input_derivatives_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_real_input_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_set_real_input_derivatives_req::fmi2_import_set_real_input_derivatives_req(const fmi2_import_set_real_input_derivatives_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_input_derivatives_req::~fmi2_import_set_real_input_derivatives_req() {
  SharedDtor();
}

void fmi2_import_set_real_input_derivatives_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_real_input_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_real_input_derivatives_req& fmi2_import_set_real_input_derivatives_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_real_input_derivatives_req* fmi2_import_set_real_input_derivatives_req::default_instance_ = NULL;

fmi2_import_set_real_input_derivatives_req* fmi2_import_set_real_input_derivatives_req::New() const {
  return new fmi2_import_set_real_input_derivatives_req;
}

void fmi2_import_set_real_input_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  orders_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_real_input_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_orders;
        break;
      }

      // repeated int32 orders = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_orders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_orders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orders;
        if (input->ExpectTag(41)) goto parse_values;
        break;
      }

      // repeated double values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_input_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->orders(i), output);
  }

  // repeated double values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->values(i), output);
  }

}

int fmi2_import_set_real_input_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 orders = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->orders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->orders(i));
    }
    total_size += 1 * this->orders_size() + data_size;
  }

  // repeated double values = 5;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_input_derivatives_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_real_input_derivatives_req*>(&from));
}

void fmi2_import_set_real_input_derivatives_req::MergeFrom(const fmi2_import_set_real_input_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  orders_.MergeFrom(from.orders_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_real_input_derivatives_req::CopyFrom(const fmi2_import_set_real_input_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_input_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_input_derivatives_req::Swap(fmi2_import_set_real_input_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    orders_.Swap(&other->orders_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_real_input_derivatives_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_real_input_derivatives_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_input_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_set_real_input_derivatives_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_input_derivatives_res::fmi2_import_set_real_input_derivatives_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_real_input_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_set_real_input_derivatives_res::fmi2_import_set_real_input_derivatives_res(const fmi2_import_set_real_input_derivatives_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_input_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_input_derivatives_res::~fmi2_import_set_real_input_derivatives_res() {
  SharedDtor();
}

void fmi2_import_set_real_input_derivatives_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_real_input_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_real_input_derivatives_res& fmi2_import_set_real_input_derivatives_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_real_input_derivatives_res* fmi2_import_set_real_input_derivatives_res::default_instance_ = NULL;

fmi2_import_set_real_input_derivatives_res* fmi2_import_set_real_input_derivatives_res::New() const {
  return new fmi2_import_set_real_input_derivatives_res;
}

void fmi2_import_set_real_input_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_real_input_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_input_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_real_input_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_input_derivatives_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_real_input_derivatives_res*>(&from));
}

void fmi2_import_set_real_input_derivatives_res::MergeFrom(const fmi2_import_set_real_input_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_real_input_derivatives_res::CopyFrom(const fmi2_import_set_real_input_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_input_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_input_derivatives_res::Swap(fmi2_import_set_real_input_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_real_input_derivatives_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_real_input_derivatives_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_output_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kValueReferencesFieldNumber;
const int fmi2_import_get_real_output_derivatives_req::kOrdersFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_output_derivatives_req::fmi2_import_get_real_output_derivatives_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_output_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_output_derivatives_req::fmi2_import_get_real_output_derivatives_req(const fmi2_import_get_real_output_derivatives_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_output_derivatives_req::~fmi2_import_get_real_output_derivatives_req() {
  SharedDtor();
}

void fmi2_import_get_real_output_derivatives_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_output_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_output_derivatives_req& fmi2_import_get_real_output_derivatives_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_output_derivatives_req* fmi2_import_get_real_output_derivatives_req::default_instance_ = NULL;

fmi2_import_get_real_output_derivatives_req* fmi2_import_get_real_output_derivatives_req::New() const {
  return new fmi2_import_get_real_output_derivatives_req;
}

void fmi2_import_get_real_output_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_output_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_orders;
        break;
      }

      // repeated int32 orders = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_orders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_orders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_output_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->orders(i), output);
  }

}

int fmi2_import_get_real_output_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 orders = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->orders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->orders(i));
    }
    total_size += 1 * this->orders_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_output_derivatives_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_output_derivatives_req*>(&from));
}

void fmi2_import_get_real_output_derivatives_req::MergeFrom(const fmi2_import_get_real_output_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_real_output_derivatives_req::CopyFrom(const fmi2_import_get_real_output_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_output_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_output_derivatives_req::Swap(fmi2_import_get_real_output_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_output_derivatives_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_output_derivatives_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_output_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_output_derivatives_res::kStatusFieldNumber;
const int fmi2_import_get_real_output_derivatives_res::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_output_derivatives_res::fmi2_import_get_real_output_derivatives_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_output_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_output_derivatives_res::fmi2_import_get_real_output_derivatives_res(const fmi2_import_get_real_output_derivatives_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_output_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_output_derivatives_res::~fmi2_import_get_real_output_derivatives_res() {
  SharedDtor();
}

void fmi2_import_get_real_output_derivatives_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_output_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_output_derivatives_res& fmi2_import_get_real_output_derivatives_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_output_derivatives_res* fmi2_import_get_real_output_derivatives_res::default_instance_ = NULL;

fmi2_import_get_real_output_derivatives_res* fmi2_import_get_real_output_derivatives_res::New() const {
  return new fmi2_import_get_real_output_derivatives_res;
}

void fmi2_import_get_real_output_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_output_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_values;
        break;
      }

      // repeated double values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_output_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated double values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->values(i), output);
  }

}

int fmi2_import_get_real_output_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double values = 3;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_output_derivatives_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_output_derivatives_res*>(&from));
}

void fmi2_import_get_real_output_derivatives_res::MergeFrom(const fmi2_import_get_real_output_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_real_output_derivatives_res::CopyFrom(const fmi2_import_get_real_output_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_output_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_output_derivatives_res::Swap(fmi2_import_get_real_output_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_output_derivatives_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_output_derivatives_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_cancel_step_req::kMessageIdFieldNumber;
const int fmi2_import_cancel_step_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_cancel_step_req::fmi2_import_cancel_step_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_cancel_step_req::InitAsDefaultInstance() {
}

fmi2_import_cancel_step_req::fmi2_import_cancel_step_req(const fmi2_import_cancel_step_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_cancel_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_cancel_step_req::~fmi2_import_cancel_step_req() {
  SharedDtor();
}

void fmi2_import_cancel_step_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_cancel_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_cancel_step_req& fmi2_import_cancel_step_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_cancel_step_req* fmi2_import_cancel_step_req::default_instance_ = NULL;

fmi2_import_cancel_step_req* fmi2_import_cancel_step_req::New() const {
  return new fmi2_import_cancel_step_req;
}

void fmi2_import_cancel_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_cancel_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_cancel_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_cancel_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_cancel_step_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_cancel_step_req*>(&from));
}

void fmi2_import_cancel_step_req::MergeFrom(const fmi2_import_cancel_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_cancel_step_req::CopyFrom(const fmi2_import_cancel_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_cancel_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_cancel_step_req::Swap(fmi2_import_cancel_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_cancel_step_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_cancel_step_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_cancel_step_res::kMessageIdFieldNumber;
const int fmi2_import_cancel_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_cancel_step_res::fmi2_import_cancel_step_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_cancel_step_res::InitAsDefaultInstance() {
}

fmi2_import_cancel_step_res::fmi2_import_cancel_step_res(const fmi2_import_cancel_step_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_cancel_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_cancel_step_res::~fmi2_import_cancel_step_res() {
  SharedDtor();
}

void fmi2_import_cancel_step_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_cancel_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_cancel_step_res& fmi2_import_cancel_step_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_cancel_step_res* fmi2_import_cancel_step_res::default_instance_ = NULL;

fmi2_import_cancel_step_res* fmi2_import_cancel_step_res::New() const {
  return new fmi2_import_cancel_step_res;
}

void fmi2_import_cancel_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_cancel_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_cancel_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_cancel_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_cancel_step_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_cancel_step_res*>(&from));
}

void fmi2_import_cancel_step_res::MergeFrom(const fmi2_import_cancel_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_cancel_step_res::CopyFrom(const fmi2_import_cancel_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_cancel_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_cancel_step_res::Swap(fmi2_import_cancel_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_cancel_step_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_cancel_step_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_do_step_req::kMessageIdFieldNumber;
const int fmi2_import_do_step_req::kFmuIdFieldNumber;
const int fmi2_import_do_step_req::kCurrentCommunicationPointFieldNumber;
const int fmi2_import_do_step_req::kCommunicationStepSizeFieldNumber;
const int fmi2_import_do_step_req::kNewStepFieldNumber;
#endif  // !_MSC_VER

fmi2_import_do_step_req::fmi2_import_do_step_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_do_step_req::InitAsDefaultInstance() {
}

fmi2_import_do_step_req::fmi2_import_do_step_req(const fmi2_import_do_step_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_do_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  currentcommunicationpoint_ = 0;
  communicationstepsize_ = 0;
  newstep_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_do_step_req::~fmi2_import_do_step_req() {
  SharedDtor();
}

void fmi2_import_do_step_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_do_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_do_step_req& fmi2_import_do_step_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_do_step_req* fmi2_import_do_step_req::default_instance_ = NULL;

fmi2_import_do_step_req* fmi2_import_do_step_req::New() const {
  return new fmi2_import_do_step_req;
}

void fmi2_import_do_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    currentcommunicationpoint_ = 0;
    communicationstepsize_ = 0;
    newstep_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_do_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currentCommunicationPoint;
        break;
      }

      // required double currentCommunicationPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentCommunicationPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentcommunicationpoint_)));
          set_has_currentcommunicationpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_communicationStepSize;
        break;
      }

      // required double communicationStepSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_communicationStepSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &communicationstepsize_)));
          set_has_communicationstepsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newStep;
        break;
      }

      // required bool newStep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newstep_)));
          set_has_newstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_do_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required double currentCommunicationPoint = 3;
  if (has_currentcommunicationpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->currentcommunicationpoint(), output);
  }

  // required double communicationStepSize = 4;
  if (has_communicationstepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->communicationstepsize(), output);
  }

  // required bool newStep = 5;
  if (has_newstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->newstep(), output);
  }

}

int fmi2_import_do_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required double currentCommunicationPoint = 3;
    if (has_currentcommunicationpoint()) {
      total_size += 1 + 8;
    }

    // required double communicationStepSize = 4;
    if (has_communicationstepsize()) {
      total_size += 1 + 8;
    }

    // required bool newStep = 5;
    if (has_newstep()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_do_step_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_do_step_req*>(&from));
}

void fmi2_import_do_step_req::MergeFrom(const fmi2_import_do_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_currentcommunicationpoint()) {
      set_currentcommunicationpoint(from.currentcommunicationpoint());
    }
    if (from.has_communicationstepsize()) {
      set_communicationstepsize(from.communicationstepsize());
    }
    if (from.has_newstep()) {
      set_newstep(from.newstep());
    }
  }
}

void fmi2_import_do_step_req::CopyFrom(const fmi2_import_do_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_do_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void fmi2_import_do_step_req::Swap(fmi2_import_do_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(currentcommunicationpoint_, other->currentcommunicationpoint_);
    std::swap(communicationstepsize_, other->communicationstepsize_);
    std::swap(newstep_, other->newstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_do_step_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_do_step_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_do_step_res::kMessageIdFieldNumber;
const int fmi2_import_do_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_do_step_res::fmi2_import_do_step_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_do_step_res::InitAsDefaultInstance() {
}

fmi2_import_do_step_res::fmi2_import_do_step_res(const fmi2_import_do_step_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_do_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_do_step_res::~fmi2_import_do_step_res() {
  SharedDtor();
}

void fmi2_import_do_step_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_do_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_do_step_res& fmi2_import_do_step_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_do_step_res* fmi2_import_do_step_res::default_instance_ = NULL;

fmi2_import_do_step_res* fmi2_import_do_step_res::New() const {
  return new fmi2_import_do_step_res;
}

void fmi2_import_do_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_do_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_do_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_do_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_do_step_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_do_step_res*>(&from));
}

void fmi2_import_do_step_res::MergeFrom(const fmi2_import_do_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_do_step_res::CopyFrom(const fmi2_import_do_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_do_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_do_step_res::Swap(fmi2_import_do_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_do_step_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_do_step_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_status_req::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_status_req::fmi2_import_get_status_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_status_req::fmi2_import_get_status_req(const fmi2_import_get_status_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_status_req::~fmi2_import_get_status_req() {
  SharedDtor();
}

void fmi2_import_get_status_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_status_req& fmi2_import_get_status_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_status_req* fmi2_import_get_status_req::default_instance_ = NULL;

fmi2_import_get_status_req* fmi2_import_get_status_req::New() const {
  return new fmi2_import_get_status_req;
}

void fmi2_import_get_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_status_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_status_req*>(&from));
}

void fmi2_import_get_status_req::MergeFrom(const fmi2_import_get_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_status_req::CopyFrom(const fmi2_import_get_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_status_req::Swap(fmi2_import_get_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_status_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_status_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_status_res::fmi2_import_get_status_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_status_res::fmi2_import_get_status_res(const fmi2_import_get_status_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_status_res::~fmi2_import_get_status_res() {
  SharedDtor();
}

void fmi2_import_get_status_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_status_res& fmi2_import_get_status_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_status_res* fmi2_import_get_status_res::default_instance_ = NULL;

fmi2_import_get_status_res* fmi2_import_get_status_res::New() const {
  return new fmi2_import_get_status_res;
}

void fmi2_import_get_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_value(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

}

int fmi2_import_get_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_status_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_status_res*>(&from));
}

void fmi2_import_get_status_res::MergeFrom(const fmi2_import_get_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void fmi2_import_get_status_res::CopyFrom(const fmi2_import_get_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_status_res::Swap(fmi2_import_get_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_status_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_status_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_status_req::fmi2_import_get_real_status_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_status_req::fmi2_import_get_real_status_req(const fmi2_import_get_real_status_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_status_req::~fmi2_import_get_real_status_req() {
  SharedDtor();
}

void fmi2_import_get_real_status_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_status_req& fmi2_import_get_real_status_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_status_req* fmi2_import_get_real_status_req::default_instance_ = NULL;

fmi2_import_get_real_status_req* fmi2_import_get_real_status_req::New() const {
  return new fmi2_import_get_real_status_req;
}

void fmi2_import_get_real_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

}

int fmi2_import_get_real_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_status_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_status_req*>(&from));
}

void fmi2_import_get_real_status_req::MergeFrom(const fmi2_import_get_real_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void fmi2_import_get_real_status_req::CopyFrom(const fmi2_import_get_real_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_real_status_req::Swap(fmi2_import_get_real_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_status_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_status_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_status_res::fmi2_import_get_real_status_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_status_res::fmi2_import_get_real_status_res(const fmi2_import_get_real_status_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_status_res::~fmi2_import_get_real_status_res() {
  SharedDtor();
}

void fmi2_import_get_real_status_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_status_res& fmi2_import_get_real_status_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_status_res* fmi2_import_get_real_status_res::default_instance_ = NULL;

fmi2_import_get_real_status_res* fmi2_import_get_real_status_res::New() const {
  return new fmi2_import_get_real_status_res;
}

void fmi2_import_get_real_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

}

int fmi2_import_get_real_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_status_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_status_res*>(&from));
}

void fmi2_import_get_real_status_res::MergeFrom(const fmi2_import_get_real_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void fmi2_import_get_real_status_res::CopyFrom(const fmi2_import_get_real_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_status_res::Swap(fmi2_import_get_real_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_status_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_status_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_integer_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_integer_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_status_req::fmi2_import_get_integer_status_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_integer_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_integer_status_req::fmi2_import_get_integer_status_req(const fmi2_import_get_integer_status_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_status_req::~fmi2_import_get_integer_status_req() {
  SharedDtor();
}

void fmi2_import_get_integer_status_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_integer_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_integer_status_req& fmi2_import_get_integer_status_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_integer_status_req* fmi2_import_get_integer_status_req::default_instance_ = NULL;

fmi2_import_get_integer_status_req* fmi2_import_get_integer_status_req::New() const {
  return new fmi2_import_get_integer_status_req;
}

void fmi2_import_get_integer_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_integer_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

}

int fmi2_import_get_integer_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_status_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_integer_status_req*>(&from));
}

void fmi2_import_get_integer_status_req::MergeFrom(const fmi2_import_get_integer_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void fmi2_import_get_integer_status_req::CopyFrom(const fmi2_import_get_integer_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_integer_status_req::Swap(fmi2_import_get_integer_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_integer_status_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_integer_status_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_integer_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_status_res::fmi2_import_get_integer_status_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_integer_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_integer_status_res::fmi2_import_get_integer_status_res(const fmi2_import_get_integer_status_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_status_res::~fmi2_import_get_integer_status_res() {
  SharedDtor();
}

void fmi2_import_get_integer_status_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_integer_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_integer_status_res& fmi2_import_get_integer_status_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_integer_status_res* fmi2_import_get_integer_status_res::default_instance_ = NULL;

fmi2_import_get_integer_status_res* fmi2_import_get_integer_status_res::New() const {
  return new fmi2_import_get_integer_status_res;
}

void fmi2_import_get_integer_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_integer_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

}

int fmi2_import_get_integer_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_status_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_integer_status_res*>(&from));
}

void fmi2_import_get_integer_status_res::MergeFrom(const fmi2_import_get_integer_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void fmi2_import_get_integer_status_res::CopyFrom(const fmi2_import_get_integer_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_integer_status_res::Swap(fmi2_import_get_integer_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_integer_status_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_integer_status_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_boolean_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_status_req::fmi2_import_get_boolean_status_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_boolean_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_status_req::fmi2_import_get_boolean_status_req(const fmi2_import_get_boolean_status_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_status_req::~fmi2_import_get_boolean_status_req() {
  SharedDtor();
}

void fmi2_import_get_boolean_status_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_boolean_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_boolean_status_req& fmi2_import_get_boolean_status_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_boolean_status_req* fmi2_import_get_boolean_status_req::default_instance_ = NULL;

fmi2_import_get_boolean_status_req* fmi2_import_get_boolean_status_req::New() const {
  return new fmi2_import_get_boolean_status_req;
}

void fmi2_import_get_boolean_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_boolean_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

}

int fmi2_import_get_boolean_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_status_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_boolean_status_req*>(&from));
}

void fmi2_import_get_boolean_status_req::MergeFrom(const fmi2_import_get_boolean_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void fmi2_import_get_boolean_status_req::CopyFrom(const fmi2_import_get_boolean_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_boolean_status_req::Swap(fmi2_import_get_boolean_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_boolean_status_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_boolean_status_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_status_res::fmi2_import_get_boolean_status_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_boolean_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_status_res::fmi2_import_get_boolean_status_res(const fmi2_import_get_boolean_status_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_status_res::~fmi2_import_get_boolean_status_res() {
  SharedDtor();
}

void fmi2_import_get_boolean_status_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_boolean_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_boolean_status_res& fmi2_import_get_boolean_status_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_boolean_status_res* fmi2_import_get_boolean_status_res::default_instance_ = NULL;

fmi2_import_get_boolean_status_res* fmi2_import_get_boolean_status_res::New() const {
  return new fmi2_import_get_boolean_status_res;
}

void fmi2_import_get_boolean_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_boolean_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

}

int fmi2_import_get_boolean_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_status_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_boolean_status_res*>(&from));
}

void fmi2_import_get_boolean_status_res::MergeFrom(const fmi2_import_get_boolean_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void fmi2_import_get_boolean_status_res::CopyFrom(const fmi2_import_get_boolean_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_boolean_status_res::Swap(fmi2_import_get_boolean_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_boolean_status_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_boolean_status_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_status_req::kMessageIdFieldNumber;
const int fmi2_import_get_string_status_req::kFmuIdFieldNumber;
const int fmi2_import_get_string_status_req::kKindFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_status_req::fmi2_import_get_string_status_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_string_status_req::InitAsDefaultInstance() {
}

fmi2_import_get_string_status_req::fmi2_import_get_string_status_req(const fmi2_import_get_string_status_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_status_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_status_req::~fmi2_import_get_string_status_req() {
  SharedDtor();
}

void fmi2_import_get_string_status_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_string_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_string_status_req& fmi2_import_get_string_status_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_string_status_req* fmi2_import_get_string_status_req::default_instance_ = NULL;

fmi2_import_get_string_status_req* fmi2_import_get_string_status_req::New() const {
  return new fmi2_import_get_string_status_req;
}

void fmi2_import_get_string_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_string_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_kind_t_IsValid(value)) {
            set_kind(static_cast< ::fmitcp_proto::fmi2_status_kind_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

}

int fmi2_import_get_string_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required .fmitcp_proto.fmi2_status_kind_t kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_status_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_string_status_req*>(&from));
}

void fmi2_import_get_string_status_req::MergeFrom(const fmi2_import_get_string_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void fmi2_import_get_string_status_req::CopyFrom(const fmi2_import_get_string_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_status_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_string_status_req::Swap(fmi2_import_get_string_status_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_string_status_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_string_status_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_status_res::kMessageIdFieldNumber;
const int fmi2_import_get_string_status_res::kValueFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_status_res::fmi2_import_get_string_status_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_string_status_res::InitAsDefaultInstance() {
}

fmi2_import_get_string_status_res::fmi2_import_get_string_status_res(const fmi2_import_get_string_status_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_status_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_status_res::~fmi2_import_get_string_status_res() {
  SharedDtor();
}

void fmi2_import_get_string_status_res::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_string_status_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_string_status_res& fmi2_import_get_string_status_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_string_status_res* fmi2_import_get_string_status_res::default_instance_ = NULL;

fmi2_import_get_string_status_res* fmi2_import_get_string_status_res::New() const {
  return new fmi2_import_get_string_status_res;
}

void fmi2_import_get_string_status_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_string_status_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_status_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int fmi2_import_get_string_status_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_status_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_string_status_res*>(&from));
}

void fmi2_import_get_string_status_res::MergeFrom(const fmi2_import_get_string_status_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void fmi2_import_get_string_status_res::CopyFrom(const fmi2_import_get_string_status_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_status_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_string_status_res::Swap(fmi2_import_get_string_status_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_string_status_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_string_status_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_model_req::kMessageIdFieldNumber;
const int fmi2_import_instantiate_model_req::kFmuIdFieldNumber;
const int fmi2_import_instantiate_model_req::kInstanceNameFieldNumber;
const int fmi2_import_instantiate_model_req::kResourceLocationFieldNumber;
const int fmi2_import_instantiate_model_req::kVisibleFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_model_req::fmi2_import_instantiate_model_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_instantiate_model_req::InitAsDefaultInstance() {
}

fmi2_import_instantiate_model_req::fmi2_import_instantiate_model_req(const fmi2_import_instantiate_model_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  instancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcelocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_model_req::~fmi2_import_instantiate_model_req() {
  SharedDtor();
}

void fmi2_import_instantiate_model_req::SharedDtor() {
  if (instancename_ != &::google::protobuf::internal::kEmptyString) {
    delete instancename_;
  }
  if (resourcelocation_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcelocation_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_instantiate_model_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_instantiate_model_req& fmi2_import_instantiate_model_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_instantiate_model_req* fmi2_import_instantiate_model_req::default_instance_ = NULL;

fmi2_import_instantiate_model_req* fmi2_import_instantiate_model_req::New() const {
  return new fmi2_import_instantiate_model_req;
}

void fmi2_import_instantiate_model_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    if (has_instancename()) {
      if (instancename_ != &::google::protobuf::internal::kEmptyString) {
        instancename_->clear();
      }
    }
    if (has_resourcelocation()) {
      if (resourcelocation_ != &::google::protobuf::internal::kEmptyString) {
        resourcelocation_->clear();
      }
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_instantiate_model_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instanceName;
        break;
      }

      // required string instanceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resourceLocation;
        break;
      }

      // required string resourceLocation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcelocation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_visible;
        break;
      }

      // optional bool visible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_model_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required string instanceName = 3;
  if (has_instancename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instancename(), output);
  }

  // required string resourceLocation = 4;
  if (has_resourcelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resourcelocation(), output);
  }

  // optional bool visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

}

int fmi2_import_instantiate_model_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required string instanceName = 3;
    if (has_instancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancename());
    }

    // required string resourceLocation = 4;
    if (has_resourcelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcelocation());
    }

    // optional bool visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_model_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_instantiate_model_req*>(&from));
}

void fmi2_import_instantiate_model_req::MergeFrom(const fmi2_import_instantiate_model_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_instancename()) {
      set_instancename(from.instancename());
    }
    if (from.has_resourcelocation()) {
      set_resourcelocation(from.resourcelocation());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
}

void fmi2_import_instantiate_model_req::CopyFrom(const fmi2_import_instantiate_model_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_model_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void fmi2_import_instantiate_model_req::Swap(fmi2_import_instantiate_model_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(instancename_, other->instancename_);
    std::swap(resourcelocation_, other->resourcelocation_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_instantiate_model_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_instantiate_model_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_instantiate_model_res::kMessageIdFieldNumber;
const int fmi2_import_instantiate_model_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_instantiate_model_res::fmi2_import_instantiate_model_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_instantiate_model_res::InitAsDefaultInstance() {
}

fmi2_import_instantiate_model_res::fmi2_import_instantiate_model_res(const fmi2_import_instantiate_model_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_instantiate_model_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_instantiate_model_res::~fmi2_import_instantiate_model_res() {
  SharedDtor();
}

void fmi2_import_instantiate_model_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_instantiate_model_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_instantiate_model_res& fmi2_import_instantiate_model_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_instantiate_model_res* fmi2_import_instantiate_model_res::default_instance_ = NULL;

fmi2_import_instantiate_model_res* fmi2_import_instantiate_model_res::New() const {
  return new fmi2_import_instantiate_model_res;
}

void fmi2_import_instantiate_model_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_instantiate_model_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.jm_status_enu_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_status_enu_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::jm_status_enu_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_instantiate_model_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_status_enu_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_instantiate_model_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_status_enu_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_instantiate_model_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_instantiate_model_res*>(&from));
}

void fmi2_import_instantiate_model_res::MergeFrom(const fmi2_import_instantiate_model_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_instantiate_model_res::CopyFrom(const fmi2_import_instantiate_model_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_instantiate_model_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_instantiate_model_res::Swap(fmi2_import_instantiate_model_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_instantiate_model_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_instantiate_model_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_model_instance_req::kMessageIdFieldNumber;
const int fmi2_import_free_model_instance_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_model_instance_req::fmi2_import_free_model_instance_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_model_instance_req::InitAsDefaultInstance() {
}

fmi2_import_free_model_instance_req::fmi2_import_free_model_instance_req(const fmi2_import_free_model_instance_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_model_instance_req::~fmi2_import_free_model_instance_req() {
  SharedDtor();
}

void fmi2_import_free_model_instance_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_model_instance_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_model_instance_req& fmi2_import_free_model_instance_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_model_instance_req* fmi2_import_free_model_instance_req::default_instance_ = NULL;

fmi2_import_free_model_instance_req* fmi2_import_free_model_instance_req::New() const {
  return new fmi2_import_free_model_instance_req;
}

void fmi2_import_free_model_instance_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_model_instance_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_model_instance_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_free_model_instance_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_model_instance_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_model_instance_req*>(&from));
}

void fmi2_import_free_model_instance_req::MergeFrom(const fmi2_import_free_model_instance_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_free_model_instance_req::CopyFrom(const fmi2_import_free_model_instance_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_model_instance_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_model_instance_req::Swap(fmi2_import_free_model_instance_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_model_instance_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_model_instance_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_model_instance_res::kMessageIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_model_instance_res::fmi2_import_free_model_instance_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_model_instance_res::InitAsDefaultInstance() {
}

fmi2_import_free_model_instance_res::fmi2_import_free_model_instance_res(const fmi2_import_free_model_instance_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_model_instance_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_model_instance_res::~fmi2_import_free_model_instance_res() {
  SharedDtor();
}

void fmi2_import_free_model_instance_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_model_instance_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_model_instance_res& fmi2_import_free_model_instance_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_model_instance_res* fmi2_import_free_model_instance_res::default_instance_ = NULL;

fmi2_import_free_model_instance_res* fmi2_import_free_model_instance_res::New() const {
  return new fmi2_import_free_model_instance_res;
}

void fmi2_import_free_model_instance_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_model_instance_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_model_instance_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

}

int fmi2_import_free_model_instance_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_model_instance_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_model_instance_res*>(&from));
}

void fmi2_import_free_model_instance_res::MergeFrom(const fmi2_import_free_model_instance_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
}

void fmi2_import_free_model_instance_res::CopyFrom(const fmi2_import_free_model_instance_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_model_instance_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fmi2_import_free_model_instance_res::Swap(fmi2_import_free_model_instance_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_model_instance_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_model_instance_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_time_req::kMessageIdFieldNumber;
const int fmi2_import_set_time_req::kFmuIdFieldNumber;
const int fmi2_import_set_time_req::kTimeFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_time_req::fmi2_import_set_time_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_time_req::InitAsDefaultInstance() {
}

fmi2_import_set_time_req::fmi2_import_set_time_req(const fmi2_import_set_time_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_time_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_time_req::~fmi2_import_set_time_req() {
  SharedDtor();
}

void fmi2_import_set_time_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_time_req& fmi2_import_set_time_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_time_req* fmi2_import_set_time_req::default_instance_ = NULL;

fmi2_import_set_time_req* fmi2_import_set_time_req::New() const {
  return new fmi2_import_set_time_req;
}

void fmi2_import_set_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time;
        break;
      }

      // required double time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required double time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

}

int fmi2_import_set_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required double time = 3;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_time_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_time_req*>(&from));
}

void fmi2_import_set_time_req::MergeFrom(const fmi2_import_set_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void fmi2_import_set_time_req::CopyFrom(const fmi2_import_set_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_time_req::Swap(fmi2_import_set_time_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_time_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_time_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_time_res::kMessageIdFieldNumber;
const int fmi2_import_set_time_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_time_res::fmi2_import_set_time_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_time_res::InitAsDefaultInstance() {
}

fmi2_import_set_time_res::fmi2_import_set_time_res(const fmi2_import_set_time_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_time_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_time_res::~fmi2_import_set_time_res() {
  SharedDtor();
}

void fmi2_import_set_time_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_time_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_time_res& fmi2_import_set_time_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_time_res* fmi2_import_set_time_res::default_instance_ = NULL;

fmi2_import_set_time_res* fmi2_import_set_time_res::New() const {
  return new fmi2_import_set_time_res;
}

void fmi2_import_set_time_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_time_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_time_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_time_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_time_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_time_res*>(&from));
}

void fmi2_import_set_time_res::MergeFrom(const fmi2_import_set_time_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_time_res::CopyFrom(const fmi2_import_set_time_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_time_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_time_res::Swap(fmi2_import_set_time_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_time_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_time_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_set_continuous_states_req::kFmuIdFieldNumber;
const int fmi2_import_set_continuous_states_req::kXFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_continuous_states_req::fmi2_import_set_continuous_states_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_set_continuous_states_req::fmi2_import_set_continuous_states_req(const fmi2_import_set_continuous_states_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_continuous_states_req::~fmi2_import_set_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_set_continuous_states_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_continuous_states_req& fmi2_import_set_continuous_states_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_continuous_states_req* fmi2_import_set_continuous_states_req::default_instance_ = NULL;

fmi2_import_set_continuous_states_req* fmi2_import_set_continuous_states_req::New() const {
  return new fmi2_import_set_continuous_states_req;
}

void fmi2_import_set_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // repeated double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated double x = 3;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->x(i), output);
  }

}

int fmi2_import_set_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated double x = 3;
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_continuous_states_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_continuous_states_req*>(&from));
}

void fmi2_import_set_continuous_states_req::MergeFrom(const fmi2_import_set_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_continuous_states_req::CopyFrom(const fmi2_import_set_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_continuous_states_req::Swap(fmi2_import_set_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    x_.Swap(&other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_continuous_states_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_continuous_states_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_set_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_continuous_states_res::fmi2_import_set_continuous_states_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_set_continuous_states_res::fmi2_import_set_continuous_states_res(const fmi2_import_set_continuous_states_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_continuous_states_res::~fmi2_import_set_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_set_continuous_states_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_continuous_states_res& fmi2_import_set_continuous_states_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_continuous_states_res* fmi2_import_set_continuous_states_res::default_instance_ = NULL;

fmi2_import_set_continuous_states_res* fmi2_import_set_continuous_states_res::New() const {
  return new fmi2_import_set_continuous_states_res;
}

void fmi2_import_set_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_continuous_states_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_continuous_states_res*>(&from));
}

void fmi2_import_set_continuous_states_res::MergeFrom(const fmi2_import_set_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_continuous_states_res::CopyFrom(const fmi2_import_set_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_continuous_states_res::Swap(fmi2_import_set_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_continuous_states_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_continuous_states_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_integrator_step_req::kMessageIdFieldNumber;
const int fmi2_import_completed_integrator_step_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_integrator_step_req::fmi2_import_completed_integrator_step_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_completed_integrator_step_req::InitAsDefaultInstance() {
}

fmi2_import_completed_integrator_step_req::fmi2_import_completed_integrator_step_req(const fmi2_import_completed_integrator_step_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_integrator_step_req::~fmi2_import_completed_integrator_step_req() {
  SharedDtor();
}

void fmi2_import_completed_integrator_step_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_completed_integrator_step_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_completed_integrator_step_req& fmi2_import_completed_integrator_step_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_completed_integrator_step_req* fmi2_import_completed_integrator_step_req::default_instance_ = NULL;

fmi2_import_completed_integrator_step_req* fmi2_import_completed_integrator_step_req::New() const {
  return new fmi2_import_completed_integrator_step_req;
}

void fmi2_import_completed_integrator_step_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_completed_integrator_step_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_integrator_step_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_completed_integrator_step_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_integrator_step_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_completed_integrator_step_req*>(&from));
}

void fmi2_import_completed_integrator_step_req::MergeFrom(const fmi2_import_completed_integrator_step_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_completed_integrator_step_req::CopyFrom(const fmi2_import_completed_integrator_step_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_integrator_step_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_integrator_step_req::Swap(fmi2_import_completed_integrator_step_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_completed_integrator_step_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_completed_integrator_step_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_integrator_step_res::kMessageIdFieldNumber;
const int fmi2_import_completed_integrator_step_res::kCallEventUpdateFieldNumber;
const int fmi2_import_completed_integrator_step_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_integrator_step_res::fmi2_import_completed_integrator_step_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_completed_integrator_step_res::InitAsDefaultInstance() {
}

fmi2_import_completed_integrator_step_res::fmi2_import_completed_integrator_step_res(const fmi2_import_completed_integrator_step_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_integrator_step_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  calleventupdate_ = false;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_integrator_step_res::~fmi2_import_completed_integrator_step_res() {
  SharedDtor();
}

void fmi2_import_completed_integrator_step_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_completed_integrator_step_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_completed_integrator_step_res& fmi2_import_completed_integrator_step_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_completed_integrator_step_res* fmi2_import_completed_integrator_step_res::default_instance_ = NULL;

fmi2_import_completed_integrator_step_res* fmi2_import_completed_integrator_step_res::New() const {
  return new fmi2_import_completed_integrator_step_res;
}

void fmi2_import_completed_integrator_step_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    calleventupdate_ = false;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_completed_integrator_step_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_callEventUpdate;
        break;
      }

      // required bool callEventUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callEventUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calleventupdate_)));
          set_has_calleventupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_integrator_step_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required bool callEventUpdate = 2;
  if (has_calleventupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->calleventupdate(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_completed_integrator_step_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required bool callEventUpdate = 2;
    if (has_calleventupdate()) {
      total_size += 1 + 1;
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_integrator_step_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_completed_integrator_step_res*>(&from));
}

void fmi2_import_completed_integrator_step_res::MergeFrom(const fmi2_import_completed_integrator_step_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_calleventupdate()) {
      set_calleventupdate(from.calleventupdate());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_completed_integrator_step_res::CopyFrom(const fmi2_import_completed_integrator_step_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_integrator_step_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_completed_integrator_step_res::Swap(fmi2_import_completed_integrator_step_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(calleventupdate_, other->calleventupdate_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_completed_integrator_step_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_completed_integrator_step_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_model_req::kMessageIdFieldNumber;
const int fmi2_import_initialize_model_req::kFmuIdFieldNumber;
const int fmi2_import_initialize_model_req::kToleranceControlledFieldNumber;
const int fmi2_import_initialize_model_req::kRelativeToleranceFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_model_req::fmi2_import_initialize_model_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_initialize_model_req::InitAsDefaultInstance() {
}

fmi2_import_initialize_model_req::fmi2_import_initialize_model_req(const fmi2_import_initialize_model_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_model_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  tolerancecontrolled_ = false;
  relativetolerance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_model_req::~fmi2_import_initialize_model_req() {
  SharedDtor();
}

void fmi2_import_initialize_model_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_initialize_model_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_initialize_model_req& fmi2_import_initialize_model_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_initialize_model_req* fmi2_import_initialize_model_req::default_instance_ = NULL;

fmi2_import_initialize_model_req* fmi2_import_initialize_model_req::New() const {
  return new fmi2_import_initialize_model_req;
}

void fmi2_import_initialize_model_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    tolerancecontrolled_ = false;
    relativetolerance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_initialize_model_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toleranceControlled;
        break;
      }

      // required bool toleranceControlled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toleranceControlled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tolerancecontrolled_)));
          set_has_tolerancecontrolled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_relativeTolerance;
        break;
      }

      // required double relativeTolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relativeTolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relativetolerance_)));
          set_has_relativetolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_model_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool toleranceControlled = 3;
  if (has_tolerancecontrolled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tolerancecontrolled(), output);
  }

  // required double relativeTolerance = 4;
  if (has_relativetolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relativetolerance(), output);
  }

}

int fmi2_import_initialize_model_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool toleranceControlled = 3;
    if (has_tolerancecontrolled()) {
      total_size += 1 + 1;
    }

    // required double relativeTolerance = 4;
    if (has_relativetolerance()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_model_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_initialize_model_req*>(&from));
}

void fmi2_import_initialize_model_req::MergeFrom(const fmi2_import_initialize_model_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_tolerancecontrolled()) {
      set_tolerancecontrolled(from.tolerancecontrolled());
    }
    if (from.has_relativetolerance()) {
      set_relativetolerance(from.relativetolerance());
    }
  }
}

void fmi2_import_initialize_model_req::CopyFrom(const fmi2_import_initialize_model_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_model_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void fmi2_import_initialize_model_req::Swap(fmi2_import_initialize_model_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(tolerancecontrolled_, other->tolerancecontrolled_);
    std::swap(relativetolerance_, other->relativetolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_initialize_model_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_initialize_model_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_initialize_model_res::kMessageIdFieldNumber;
const int fmi2_import_initialize_model_res::kEventInfoFieldNumber;
const int fmi2_import_initialize_model_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_initialize_model_res::fmi2_import_initialize_model_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_initialize_model_res::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(
      ::fmitcp_proto::fmi2_event_info_t::internal_default_instance());
#else
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(&::fmitcp_proto::fmi2_event_info_t::default_instance());
#endif
}

fmi2_import_initialize_model_res::fmi2_import_initialize_model_res(const fmi2_import_initialize_model_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_initialize_model_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  eventinfo_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_initialize_model_res::~fmi2_import_initialize_model_res() {
  SharedDtor();
}

void fmi2_import_initialize_model_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete eventinfo_;
  }
}

void fmi2_import_initialize_model_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_initialize_model_res& fmi2_import_initialize_model_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_initialize_model_res* fmi2_import_initialize_model_res::default_instance_ = NULL;

fmi2_import_initialize_model_res* fmi2_import_initialize_model_res::New() const {
  return new fmi2_import_initialize_model_res;
}

void fmi2_import_initialize_model_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_eventinfo()) {
      if (eventinfo_ != NULL) eventinfo_->::fmitcp_proto::fmi2_event_info_t::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_initialize_model_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventInfo;
        break;
      }

      // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_initialize_model_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->eventinfo(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_initialize_model_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinfo());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_initialize_model_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_initialize_model_res*>(&from));
}

void fmi2_import_initialize_model_res::MergeFrom(const fmi2_import_initialize_model_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_eventinfo()) {
      mutable_eventinfo()->::fmitcp_proto::fmi2_event_info_t::MergeFrom(from.eventinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_initialize_model_res::CopyFrom(const fmi2_import_initialize_model_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_initialize_model_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_eventinfo()) {
    if (!this->eventinfo().IsInitialized()) return false;
  }
  return true;
}

void fmi2_import_initialize_model_res::Swap(fmi2_import_initialize_model_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_initialize_model_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_initialize_model_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_derivatives_req::kMessageIdFieldNumber;
const int fmi2_import_get_derivatives_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_derivatives_req::fmi2_import_get_derivatives_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_derivatives_req::InitAsDefaultInstance() {
}

fmi2_import_get_derivatives_req::fmi2_import_get_derivatives_req(const fmi2_import_get_derivatives_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_derivatives_req::~fmi2_import_get_derivatives_req() {
  SharedDtor();
}

void fmi2_import_get_derivatives_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_derivatives_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_derivatives_req& fmi2_import_get_derivatives_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_derivatives_req* fmi2_import_get_derivatives_req::default_instance_ = NULL;

fmi2_import_get_derivatives_req* fmi2_import_get_derivatives_req::New() const {
  return new fmi2_import_get_derivatives_req;
}

void fmi2_import_get_derivatives_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_derivatives_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_derivatives_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_derivatives_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_derivatives_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_derivatives_req*>(&from));
}

void fmi2_import_get_derivatives_req::MergeFrom(const fmi2_import_get_derivatives_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_derivatives_req::CopyFrom(const fmi2_import_get_derivatives_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_derivatives_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_derivatives_req::Swap(fmi2_import_get_derivatives_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_derivatives_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_derivatives_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_derivatives_res::kMessageIdFieldNumber;
const int fmi2_import_get_derivatives_res::kDerivativesFieldNumber;
const int fmi2_import_get_derivatives_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_derivatives_res::fmi2_import_get_derivatives_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_derivatives_res::InitAsDefaultInstance() {
}

fmi2_import_get_derivatives_res::fmi2_import_get_derivatives_res(const fmi2_import_get_derivatives_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_derivatives_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_derivatives_res::~fmi2_import_get_derivatives_res() {
  SharedDtor();
}

void fmi2_import_get_derivatives_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_derivatives_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_derivatives_res& fmi2_import_get_derivatives_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_derivatives_res* fmi2_import_get_derivatives_res::default_instance_ = NULL;

fmi2_import_get_derivatives_res* fmi2_import_get_derivatives_res::New() const {
  return new fmi2_import_get_derivatives_res;
}

void fmi2_import_get_derivatives_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  derivatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_derivatives_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_derivatives;
        break;
      }

      // repeated double derivatives = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_derivatives:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_derivatives())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_derivatives())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_derivatives;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_derivatives_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double derivatives = 2;
  for (int i = 0; i < this->derivatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->derivatives(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_derivatives_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double derivatives = 2;
  {
    int data_size = 0;
    data_size = 8 * this->derivatives_size();
    total_size += 1 * this->derivatives_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_derivatives_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_derivatives_res*>(&from));
}

void fmi2_import_get_derivatives_res::MergeFrom(const fmi2_import_get_derivatives_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  derivatives_.MergeFrom(from.derivatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_derivatives_res::CopyFrom(const fmi2_import_get_derivatives_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_derivatives_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_derivatives_res::Swap(fmi2_import_get_derivatives_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    derivatives_.Swap(&other->derivatives_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_derivatives_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_derivatives_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_event_indicators_req::kMessageIdFieldNumber;
const int fmi2_import_get_event_indicators_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_event_indicators_req::fmi2_import_get_event_indicators_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_event_indicators_req::InitAsDefaultInstance() {
}

fmi2_import_get_event_indicators_req::fmi2_import_get_event_indicators_req(const fmi2_import_get_event_indicators_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_event_indicators_req::~fmi2_import_get_event_indicators_req() {
  SharedDtor();
}

void fmi2_import_get_event_indicators_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_event_indicators_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_event_indicators_req& fmi2_import_get_event_indicators_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_event_indicators_req* fmi2_import_get_event_indicators_req::default_instance_ = NULL;

fmi2_import_get_event_indicators_req* fmi2_import_get_event_indicators_req::New() const {
  return new fmi2_import_get_event_indicators_req;
}

void fmi2_import_get_event_indicators_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_event_indicators_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_event_indicators_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_event_indicators_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_event_indicators_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_event_indicators_req*>(&from));
}

void fmi2_import_get_event_indicators_req::MergeFrom(const fmi2_import_get_event_indicators_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_event_indicators_req::CopyFrom(const fmi2_import_get_event_indicators_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_event_indicators_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_event_indicators_req::Swap(fmi2_import_get_event_indicators_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_event_indicators_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_event_indicators_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_event_indicators_res::kMessageIdFieldNumber;
const int fmi2_import_get_event_indicators_res::kEventIndicatorsFieldNumber;
const int fmi2_import_get_event_indicators_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_event_indicators_res::fmi2_import_get_event_indicators_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_event_indicators_res::InitAsDefaultInstance() {
}

fmi2_import_get_event_indicators_res::fmi2_import_get_event_indicators_res(const fmi2_import_get_event_indicators_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_event_indicators_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_event_indicators_res::~fmi2_import_get_event_indicators_res() {
  SharedDtor();
}

void fmi2_import_get_event_indicators_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_event_indicators_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_event_indicators_res& fmi2_import_get_event_indicators_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_event_indicators_res* fmi2_import_get_event_indicators_res::default_instance_ = NULL;

fmi2_import_get_event_indicators_res* fmi2_import_get_event_indicators_res::New() const {
  return new fmi2_import_get_event_indicators_res;
}

void fmi2_import_get_event_indicators_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  eventindicators_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_event_indicators_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_eventIndicators;
        break;
      }

      // repeated double eventIndicators = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_eventIndicators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_eventindicators())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_eventindicators())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_eventIndicators;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_event_indicators_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double eventIndicators = 2;
  for (int i = 0; i < this->eventindicators_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->eventindicators(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_event_indicators_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double eventIndicators = 2;
  {
    int data_size = 0;
    data_size = 8 * this->eventindicators_size();
    total_size += 1 * this->eventindicators_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_event_indicators_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_event_indicators_res*>(&from));
}

void fmi2_import_get_event_indicators_res::MergeFrom(const fmi2_import_get_event_indicators_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventindicators_.MergeFrom(from.eventindicators_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_event_indicators_res::CopyFrom(const fmi2_import_get_event_indicators_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_event_indicators_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_event_indicators_res::Swap(fmi2_import_get_event_indicators_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    eventindicators_.Swap(&other->eventindicators_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_event_indicators_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_event_indicators_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_eventUpdate_req::kMessageIdFieldNumber;
const int fmi2_import_eventUpdate_req::kFmuIdFieldNumber;
const int fmi2_import_eventUpdate_req::kIntermediateResultsFieldNumber;
#endif  // !_MSC_VER

fmi2_import_eventUpdate_req::fmi2_import_eventUpdate_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_eventUpdate_req::InitAsDefaultInstance() {
}

fmi2_import_eventUpdate_req::fmi2_import_eventUpdate_req(const fmi2_import_eventUpdate_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  intermediateresults_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_eventUpdate_req::~fmi2_import_eventUpdate_req() {
  SharedDtor();
}

void fmi2_import_eventUpdate_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_eventUpdate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_eventUpdate_req& fmi2_import_eventUpdate_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_eventUpdate_req* fmi2_import_eventUpdate_req::default_instance_ = NULL;

fmi2_import_eventUpdate_req* fmi2_import_eventUpdate_req::New() const {
  return new fmi2_import_eventUpdate_req;
}

void fmi2_import_eventUpdate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    intermediateresults_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_eventUpdate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intermediateResults;
        break;
      }

      // required bool intermediateResults = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intermediateResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intermediateresults_)));
          set_has_intermediateresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_eventUpdate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool intermediateResults = 3;
  if (has_intermediateresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->intermediateresults(), output);
  }

}

int fmi2_import_eventUpdate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool intermediateResults = 3;
    if (has_intermediateresults()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_eventUpdate_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_eventUpdate_req*>(&from));
}

void fmi2_import_eventUpdate_req::MergeFrom(const fmi2_import_eventUpdate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_intermediateresults()) {
      set_intermediateresults(from.intermediateresults());
    }
  }
}

void fmi2_import_eventUpdate_req::CopyFrom(const fmi2_import_eventUpdate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_eventUpdate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_eventUpdate_req::Swap(fmi2_import_eventUpdate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(intermediateresults_, other->intermediateresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_eventUpdate_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_eventUpdate_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_eventUpdate_res::kMessageIdFieldNumber;
const int fmi2_import_eventUpdate_res::kEventInfoFieldNumber;
const int fmi2_import_eventUpdate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_eventUpdate_res::fmi2_import_eventUpdate_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_eventUpdate_res::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(
      ::fmitcp_proto::fmi2_event_info_t::internal_default_instance());
#else
  eventinfo_ = const_cast< ::fmitcp_proto::fmi2_event_info_t*>(&::fmitcp_proto::fmi2_event_info_t::default_instance());
#endif
}

fmi2_import_eventUpdate_res::fmi2_import_eventUpdate_res(const fmi2_import_eventUpdate_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_eventUpdate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  eventinfo_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_eventUpdate_res::~fmi2_import_eventUpdate_res() {
  SharedDtor();
}

void fmi2_import_eventUpdate_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete eventinfo_;
  }
}

void fmi2_import_eventUpdate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_eventUpdate_res& fmi2_import_eventUpdate_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_eventUpdate_res* fmi2_import_eventUpdate_res::default_instance_ = NULL;

fmi2_import_eventUpdate_res* fmi2_import_eventUpdate_res::New() const {
  return new fmi2_import_eventUpdate_res;
}

void fmi2_import_eventUpdate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_eventinfo()) {
      if (eventinfo_ != NULL) eventinfo_->::fmitcp_proto::fmi2_event_info_t::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_eventUpdate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventInfo;
        break;
      }

      // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_eventUpdate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->eventinfo(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_eventUpdate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_event_info_t eventInfo = 2;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinfo());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_eventUpdate_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_eventUpdate_res*>(&from));
}

void fmi2_import_eventUpdate_res::MergeFrom(const fmi2_import_eventUpdate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_eventinfo()) {
      mutable_eventinfo()->::fmitcp_proto::fmi2_event_info_t::MergeFrom(from.eventinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_eventUpdate_res::CopyFrom(const fmi2_import_eventUpdate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_eventUpdate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_eventinfo()) {
    if (!this->eventinfo().IsInitialized()) return false;
  }
  return true;
}

void fmi2_import_eventUpdate_res::Swap(fmi2_import_eventUpdate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_eventUpdate_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_eventUpdate_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_event_iteration_req::kMessageIdFieldNumber;
const int fmi2_import_completed_event_iteration_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_event_iteration_req::fmi2_import_completed_event_iteration_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_completed_event_iteration_req::InitAsDefaultInstance() {
}

fmi2_import_completed_event_iteration_req::fmi2_import_completed_event_iteration_req(const fmi2_import_completed_event_iteration_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_event_iteration_req::~fmi2_import_completed_event_iteration_req() {
  SharedDtor();
}

void fmi2_import_completed_event_iteration_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_completed_event_iteration_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_completed_event_iteration_req& fmi2_import_completed_event_iteration_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_completed_event_iteration_req* fmi2_import_completed_event_iteration_req::default_instance_ = NULL;

fmi2_import_completed_event_iteration_req* fmi2_import_completed_event_iteration_req::New() const {
  return new fmi2_import_completed_event_iteration_req;
}

void fmi2_import_completed_event_iteration_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_completed_event_iteration_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_event_iteration_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_completed_event_iteration_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_event_iteration_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_completed_event_iteration_req*>(&from));
}

void fmi2_import_completed_event_iteration_req::MergeFrom(const fmi2_import_completed_event_iteration_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_completed_event_iteration_req::CopyFrom(const fmi2_import_completed_event_iteration_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_event_iteration_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_event_iteration_req::Swap(fmi2_import_completed_event_iteration_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_completed_event_iteration_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_completed_event_iteration_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_completed_event_iteration_res::kMessageIdFieldNumber;
const int fmi2_import_completed_event_iteration_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_completed_event_iteration_res::fmi2_import_completed_event_iteration_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_completed_event_iteration_res::InitAsDefaultInstance() {
}

fmi2_import_completed_event_iteration_res::fmi2_import_completed_event_iteration_res(const fmi2_import_completed_event_iteration_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_completed_event_iteration_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_completed_event_iteration_res::~fmi2_import_completed_event_iteration_res() {
  SharedDtor();
}

void fmi2_import_completed_event_iteration_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_completed_event_iteration_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_completed_event_iteration_res& fmi2_import_completed_event_iteration_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_completed_event_iteration_res* fmi2_import_completed_event_iteration_res::default_instance_ = NULL;

fmi2_import_completed_event_iteration_res* fmi2_import_completed_event_iteration_res::New() const {
  return new fmi2_import_completed_event_iteration_res;
}

void fmi2_import_completed_event_iteration_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_completed_event_iteration_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_completed_event_iteration_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_completed_event_iteration_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_completed_event_iteration_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_completed_event_iteration_res*>(&from));
}

void fmi2_import_completed_event_iteration_res::MergeFrom(const fmi2_import_completed_event_iteration_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_completed_event_iteration_res::CopyFrom(const fmi2_import_completed_event_iteration_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_completed_event_iteration_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_completed_event_iteration_res::Swap(fmi2_import_completed_event_iteration_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_completed_event_iteration_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_completed_event_iteration_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_get_continuous_states_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_continuous_states_req::fmi2_import_get_continuous_states_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_get_continuous_states_req::fmi2_import_get_continuous_states_req(const fmi2_import_get_continuous_states_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_continuous_states_req::~fmi2_import_get_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_get_continuous_states_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_continuous_states_req& fmi2_import_get_continuous_states_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_continuous_states_req* fmi2_import_get_continuous_states_req::default_instance_ = NULL;

fmi2_import_get_continuous_states_req* fmi2_import_get_continuous_states_req::New() const {
  return new fmi2_import_get_continuous_states_req;
}

void fmi2_import_get_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_continuous_states_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_continuous_states_req*>(&from));
}

void fmi2_import_get_continuous_states_req::MergeFrom(const fmi2_import_get_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_continuous_states_req::CopyFrom(const fmi2_import_get_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_continuous_states_req::Swap(fmi2_import_get_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_continuous_states_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_continuous_states_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_get_continuous_states_res::kStatesFieldNumber;
const int fmi2_import_get_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_continuous_states_res::fmi2_import_get_continuous_states_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_get_continuous_states_res::fmi2_import_get_continuous_states_res(const fmi2_import_get_continuous_states_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_continuous_states_res::~fmi2_import_get_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_get_continuous_states_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_continuous_states_res& fmi2_import_get_continuous_states_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_continuous_states_res* fmi2_import_get_continuous_states_res::default_instance_ = NULL;

fmi2_import_get_continuous_states_res* fmi2_import_get_continuous_states_res::New() const {
  return new fmi2_import_get_continuous_states_res;
}

void fmi2_import_get_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_states;
        break;
      }

      // repeated double states = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_states;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double states = 2;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->states(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double states = 2;
  {
    int data_size = 0;
    data_size = 8 * this->states_size();
    total_size += 1 * this->states_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_continuous_states_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_continuous_states_res*>(&from));
}

void fmi2_import_get_continuous_states_res::MergeFrom(const fmi2_import_get_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_continuous_states_res::CopyFrom(const fmi2_import_get_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_continuous_states_res::Swap(fmi2_import_get_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    states_.Swap(&other->states_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_continuous_states_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_continuous_states_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_nominal_continuous_states_req::kMessageIdFieldNumber;
const int fmi2_import_get_nominal_continuous_states_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_nominal_continuous_states_req::fmi2_import_get_nominal_continuous_states_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_nominal_continuous_states_req::InitAsDefaultInstance() {
}

fmi2_import_get_nominal_continuous_states_req::fmi2_import_get_nominal_continuous_states_req(const fmi2_import_get_nominal_continuous_states_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_nominal_continuous_states_req::~fmi2_import_get_nominal_continuous_states_req() {
  SharedDtor();
}

void fmi2_import_get_nominal_continuous_states_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_nominal_continuous_states_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_nominal_continuous_states_req& fmi2_import_get_nominal_continuous_states_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_nominal_continuous_states_req* fmi2_import_get_nominal_continuous_states_req::default_instance_ = NULL;

fmi2_import_get_nominal_continuous_states_req* fmi2_import_get_nominal_continuous_states_req::New() const {
  return new fmi2_import_get_nominal_continuous_states_req;
}

void fmi2_import_get_nominal_continuous_states_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_nominal_continuous_states_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_nominal_continuous_states_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_nominal_continuous_states_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_nominal_continuous_states_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_nominal_continuous_states_req*>(&from));
}

void fmi2_import_get_nominal_continuous_states_req::MergeFrom(const fmi2_import_get_nominal_continuous_states_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_nominal_continuous_states_req::CopyFrom(const fmi2_import_get_nominal_continuous_states_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_nominal_continuous_states_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_nominal_continuous_states_req::Swap(fmi2_import_get_nominal_continuous_states_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_nominal_continuous_states_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_nominal_continuous_states_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_nominal_continuous_states_res::kMessageIdFieldNumber;
const int fmi2_import_get_nominal_continuous_states_res::kNominalFieldNumber;
const int fmi2_import_get_nominal_continuous_states_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_nominal_continuous_states_res::fmi2_import_get_nominal_continuous_states_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_nominal_continuous_states_res::InitAsDefaultInstance() {
}

fmi2_import_get_nominal_continuous_states_res::fmi2_import_get_nominal_continuous_states_res(const fmi2_import_get_nominal_continuous_states_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_nominal_continuous_states_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_nominal_continuous_states_res::~fmi2_import_get_nominal_continuous_states_res() {
  SharedDtor();
}

void fmi2_import_get_nominal_continuous_states_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_nominal_continuous_states_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_nominal_continuous_states_res& fmi2_import_get_nominal_continuous_states_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_nominal_continuous_states_res* fmi2_import_get_nominal_continuous_states_res::default_instance_ = NULL;

fmi2_import_get_nominal_continuous_states_res* fmi2_import_get_nominal_continuous_states_res::New() const {
  return new fmi2_import_get_nominal_continuous_states_res;
}

void fmi2_import_get_nominal_continuous_states_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  nominal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_nominal_continuous_states_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nominal;
        break;
      }

      // repeated double nominal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nominal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_nominal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_nominal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nominal;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_nominal_continuous_states_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double nominal = 2;
  for (int i = 0; i < this->nominal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->nominal(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_nominal_continuous_states_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double nominal = 2;
  {
    int data_size = 0;
    data_size = 8 * this->nominal_size();
    total_size += 1 * this->nominal_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_nominal_continuous_states_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_nominal_continuous_states_res*>(&from));
}

void fmi2_import_get_nominal_continuous_states_res::MergeFrom(const fmi2_import_get_nominal_continuous_states_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  nominal_.MergeFrom(from.nominal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_nominal_continuous_states_res::CopyFrom(const fmi2_import_get_nominal_continuous_states_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_nominal_continuous_states_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_nominal_continuous_states_res::Swap(fmi2_import_get_nominal_continuous_states_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    nominal_.Swap(&other->nominal_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_nominal_continuous_states_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_nominal_continuous_states_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_req::kMessageIdFieldNumber;
const int fmi2_import_terminate_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_req::fmi2_import_terminate_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_terminate_req::InitAsDefaultInstance() {
}

fmi2_import_terminate_req::fmi2_import_terminate_req(const fmi2_import_terminate_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_req::~fmi2_import_terminate_req() {
  SharedDtor();
}

void fmi2_import_terminate_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_terminate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_terminate_req& fmi2_import_terminate_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_terminate_req* fmi2_import_terminate_req::default_instance_ = NULL;

fmi2_import_terminate_req* fmi2_import_terminate_req::New() const {
  return new fmi2_import_terminate_req;
}

void fmi2_import_terminate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_terminate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_terminate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_terminate_req*>(&from));
}

void fmi2_import_terminate_req::MergeFrom(const fmi2_import_terminate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_terminate_req::CopyFrom(const fmi2_import_terminate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_req::Swap(fmi2_import_terminate_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_terminate_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_terminate_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_terminate_res::kMessageIdFieldNumber;
const int fmi2_import_terminate_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_terminate_res::fmi2_import_terminate_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_terminate_res::InitAsDefaultInstance() {
}

fmi2_import_terminate_res::fmi2_import_terminate_res(const fmi2_import_terminate_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_terminate_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_terminate_res::~fmi2_import_terminate_res() {
  SharedDtor();
}

void fmi2_import_terminate_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_terminate_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_terminate_res& fmi2_import_terminate_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_terminate_res* fmi2_import_terminate_res::default_instance_ = NULL;

fmi2_import_terminate_res* fmi2_import_terminate_res::New() const {
  return new fmi2_import_terminate_res;
}

void fmi2_import_terminate_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_terminate_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_terminate_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_terminate_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_terminate_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_terminate_res*>(&from));
}

void fmi2_import_terminate_res::MergeFrom(const fmi2_import_terminate_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_terminate_res::CopyFrom(const fmi2_import_terminate_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_terminate_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_terminate_res::Swap(fmi2_import_terminate_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_terminate_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_terminate_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_version_req::kMessageIdFieldNumber;
const int fmi2_import_get_version_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_version_req::fmi2_import_get_version_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_version_req::InitAsDefaultInstance() {
}

fmi2_import_get_version_req::fmi2_import_get_version_req(const fmi2_import_get_version_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_version_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_version_req::~fmi2_import_get_version_req() {
  SharedDtor();
}

void fmi2_import_get_version_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_version_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_version_req& fmi2_import_get_version_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_version_req* fmi2_import_get_version_req::default_instance_ = NULL;

fmi2_import_get_version_req* fmi2_import_get_version_req::New() const {
  return new fmi2_import_get_version_req;
}

void fmi2_import_get_version_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_version_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_version_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_version_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_version_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_version_req*>(&from));
}

void fmi2_import_get_version_req::MergeFrom(const fmi2_import_get_version_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_version_req::CopyFrom(const fmi2_import_get_version_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_version_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_version_req::Swap(fmi2_import_get_version_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_version_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_version_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_version_res::kMessageIdFieldNumber;
const int fmi2_import_get_version_res::kVersionFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_version_res::fmi2_import_get_version_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_version_res::InitAsDefaultInstance() {
}

fmi2_import_get_version_res::fmi2_import_get_version_res(const fmi2_import_get_version_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_version_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_version_res::~fmi2_import_get_version_res() {
  SharedDtor();
}

void fmi2_import_get_version_res::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_version_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_version_res& fmi2_import_get_version_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_version_res* fmi2_import_get_version_res::default_instance_ = NULL;

fmi2_import_get_version_res* fmi2_import_get_version_res::New() const {
  return new fmi2_import_get_version_res;
}

void fmi2_import_get_version_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_version_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_version_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

}

int fmi2_import_get_version_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_version_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_version_res*>(&from));
}

void fmi2_import_get_version_res::MergeFrom(const fmi2_import_get_version_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void fmi2_import_get_version_res::CopyFrom(const fmi2_import_get_version_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_version_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_version_res::Swap(fmi2_import_get_version_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_version_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_version_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_debug_logging_req::kMessageIdFieldNumber;
const int fmi2_import_set_debug_logging_req::kFmuIdFieldNumber;
const int fmi2_import_set_debug_logging_req::kLoggingOnFieldNumber;
const int fmi2_import_set_debug_logging_req::kCategoriesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_debug_logging_req::fmi2_import_set_debug_logging_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_debug_logging_req::InitAsDefaultInstance() {
}

fmi2_import_set_debug_logging_req::fmi2_import_set_debug_logging_req(const fmi2_import_set_debug_logging_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  loggingon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_debug_logging_req::~fmi2_import_set_debug_logging_req() {
  SharedDtor();
}

void fmi2_import_set_debug_logging_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_debug_logging_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_debug_logging_req& fmi2_import_set_debug_logging_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_debug_logging_req* fmi2_import_set_debug_logging_req::default_instance_ = NULL;

fmi2_import_set_debug_logging_req* fmi2_import_set_debug_logging_req::New() const {
  return new fmi2_import_set_debug_logging_req;
}

void fmi2_import_set_debug_logging_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    loggingon_ = false;
  }
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_debug_logging_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loggingOn;
        break;
      }

      // required bool loggingOn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loggingOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loggingon_)));
          set_has_loggingon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        break;
      }

      // repeated string categories = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_debug_logging_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required bool loggingOn = 3;
  if (has_loggingon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loggingon(), output);
  }

  // repeated string categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->categories(i), output);
  }

}

int fmi2_import_set_debug_logging_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required bool loggingOn = 3;
    if (has_loggingon()) {
      total_size += 1 + 1;
    }

  }
  // repeated string categories = 4;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_debug_logging_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_debug_logging_req*>(&from));
}

void fmi2_import_set_debug_logging_req::MergeFrom(const fmi2_import_set_debug_logging_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_loggingon()) {
      set_loggingon(from.loggingon());
    }
  }
}

void fmi2_import_set_debug_logging_req::CopyFrom(const fmi2_import_set_debug_logging_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_debug_logging_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_debug_logging_req::Swap(fmi2_import_set_debug_logging_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(loggingon_, other->loggingon_);
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_debug_logging_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_debug_logging_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_debug_logging_res::kMessageIdFieldNumber;
const int fmi2_import_set_debug_logging_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_debug_logging_res::fmi2_import_set_debug_logging_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_debug_logging_res::InitAsDefaultInstance() {
}

fmi2_import_set_debug_logging_res::fmi2_import_set_debug_logging_res(const fmi2_import_set_debug_logging_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_debug_logging_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_debug_logging_res::~fmi2_import_set_debug_logging_res() {
  SharedDtor();
}

void fmi2_import_set_debug_logging_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_debug_logging_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_debug_logging_res& fmi2_import_set_debug_logging_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_debug_logging_res* fmi2_import_set_debug_logging_res::default_instance_ = NULL;

fmi2_import_set_debug_logging_res* fmi2_import_set_debug_logging_res::New() const {
  return new fmi2_import_set_debug_logging_res;
}

void fmi2_import_set_debug_logging_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_debug_logging_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_debug_logging_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_debug_logging_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_debug_logging_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_debug_logging_res*>(&from));
}

void fmi2_import_set_debug_logging_res::MergeFrom(const fmi2_import_set_debug_logging_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_debug_logging_res::CopyFrom(const fmi2_import_set_debug_logging_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_debug_logging_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_debug_logging_res::Swap(fmi2_import_set_debug_logging_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_debug_logging_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_debug_logging_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_req::kMessageIdFieldNumber;
const int fmi2_import_set_real_req::kFmuIdFieldNumber;
const int fmi2_import_set_real_req::kValueReferencesFieldNumber;
const int fmi2_import_set_real_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_req::fmi2_import_set_real_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_real_req::InitAsDefaultInstance() {
}

fmi2_import_set_real_req::fmi2_import_set_real_req(const fmi2_import_set_real_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_req::~fmi2_import_set_real_req() {
  SharedDtor();
}

void fmi2_import_set_real_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_real_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_real_req& fmi2_import_set_real_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_real_req* fmi2_import_set_real_req::default_instance_ = NULL;

fmi2_import_set_real_req* fmi2_import_set_real_req::New() const {
  return new fmi2_import_set_real_req;
}

void fmi2_import_set_real_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_real_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(33)) goto parse_values;
        break;
      }

      // repeated double values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->values(i), output);
  }

}

int fmi2_import_set_real_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated double values = 4;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_real_req*>(&from));
}

void fmi2_import_set_real_req::MergeFrom(const fmi2_import_set_real_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_real_req::CopyFrom(const fmi2_import_set_real_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_req::Swap(fmi2_import_set_real_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_real_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_real_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_real_res::kMessageIdFieldNumber;
const int fmi2_import_set_real_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_real_res::fmi2_import_set_real_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_real_res::InitAsDefaultInstance() {
}

fmi2_import_set_real_res::fmi2_import_set_real_res(const fmi2_import_set_real_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_real_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_real_res::~fmi2_import_set_real_res() {
  SharedDtor();
}

void fmi2_import_set_real_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_real_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_real_res& fmi2_import_set_real_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_real_res* fmi2_import_set_real_res::default_instance_ = NULL;

fmi2_import_set_real_res* fmi2_import_set_real_res::New() const {
  return new fmi2_import_set_real_res;
}

void fmi2_import_set_real_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_real_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_real_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_real_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_real_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_real_res*>(&from));
}

void fmi2_import_set_real_res::MergeFrom(const fmi2_import_set_real_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_real_res::CopyFrom(const fmi2_import_set_real_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_real_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_real_res::Swap(fmi2_import_set_real_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_real_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_real_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_integer_req::kMessageIdFieldNumber;
const int fmi2_import_set_integer_req::kFmuIdFieldNumber;
const int fmi2_import_set_integer_req::kValueReferencesFieldNumber;
const int fmi2_import_set_integer_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_integer_req::fmi2_import_set_integer_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_integer_req::InitAsDefaultInstance() {
}

fmi2_import_set_integer_req::fmi2_import_set_integer_req(const fmi2_import_set_integer_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_integer_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_integer_req::~fmi2_import_set_integer_req() {
  SharedDtor();
}

void fmi2_import_set_integer_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_integer_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_integer_req& fmi2_import_set_integer_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_integer_req* fmi2_import_set_integer_req::default_instance_ = NULL;

fmi2_import_set_integer_req* fmi2_import_set_integer_req::New() const {
  return new fmi2_import_set_integer_req;
}

void fmi2_import_set_integer_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_integer_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated int32 values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_integer_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated int32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->values(i), output);
  }

}

int fmi2_import_set_integer_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated int32 values = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_integer_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_integer_req*>(&from));
}

void fmi2_import_set_integer_req::MergeFrom(const fmi2_import_set_integer_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_integer_req::CopyFrom(const fmi2_import_set_integer_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_integer_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_integer_req::Swap(fmi2_import_set_integer_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_integer_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_integer_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_integer_res::kMessageIdFieldNumber;
const int fmi2_import_set_integer_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_integer_res::fmi2_import_set_integer_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_integer_res::InitAsDefaultInstance() {
}

fmi2_import_set_integer_res::fmi2_import_set_integer_res(const fmi2_import_set_integer_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_integer_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_integer_res::~fmi2_import_set_integer_res() {
  SharedDtor();
}

void fmi2_import_set_integer_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_integer_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_integer_res& fmi2_import_set_integer_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_integer_res* fmi2_import_set_integer_res::default_instance_ = NULL;

fmi2_import_set_integer_res* fmi2_import_set_integer_res::New() const {
  return new fmi2_import_set_integer_res;
}

void fmi2_import_set_integer_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_integer_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_integer_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_integer_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_integer_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_integer_res*>(&from));
}

void fmi2_import_set_integer_res::MergeFrom(const fmi2_import_set_integer_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_integer_res::CopyFrom(const fmi2_import_set_integer_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_integer_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_integer_res::Swap(fmi2_import_set_integer_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_integer_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_integer_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_boolean_req::kMessageIdFieldNumber;
const int fmi2_import_set_boolean_req::kFmuIdFieldNumber;
const int fmi2_import_set_boolean_req::kValueReferencesFieldNumber;
const int fmi2_import_set_boolean_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_boolean_req::fmi2_import_set_boolean_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_boolean_req::InitAsDefaultInstance() {
}

fmi2_import_set_boolean_req::fmi2_import_set_boolean_req(const fmi2_import_set_boolean_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_boolean_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_boolean_req::~fmi2_import_set_boolean_req() {
  SharedDtor();
}

void fmi2_import_set_boolean_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_boolean_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_boolean_req& fmi2_import_set_boolean_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_boolean_req* fmi2_import_set_boolean_req::default_instance_ = NULL;

fmi2_import_set_boolean_req* fmi2_import_set_boolean_req::New() const {
  return new fmi2_import_set_boolean_req;
}

void fmi2_import_set_boolean_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_boolean_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated bool values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_boolean_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated bool values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->values(i), output);
  }

}

int fmi2_import_set_boolean_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated bool values = 4;
  {
    int data_size = 0;
    data_size = 1 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_boolean_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_boolean_req*>(&from));
}

void fmi2_import_set_boolean_req::MergeFrom(const fmi2_import_set_boolean_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_boolean_req::CopyFrom(const fmi2_import_set_boolean_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_boolean_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_boolean_req::Swap(fmi2_import_set_boolean_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_boolean_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_boolean_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_boolean_res::kMessageIdFieldNumber;
const int fmi2_import_set_boolean_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_boolean_res::fmi2_import_set_boolean_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_boolean_res::InitAsDefaultInstance() {
}

fmi2_import_set_boolean_res::fmi2_import_set_boolean_res(const fmi2_import_set_boolean_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_boolean_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_boolean_res::~fmi2_import_set_boolean_res() {
  SharedDtor();
}

void fmi2_import_set_boolean_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_boolean_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_boolean_res& fmi2_import_set_boolean_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_boolean_res* fmi2_import_set_boolean_res::default_instance_ = NULL;

fmi2_import_set_boolean_res* fmi2_import_set_boolean_res::New() const {
  return new fmi2_import_set_boolean_res;
}

void fmi2_import_set_boolean_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_boolean_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_boolean_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_boolean_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_boolean_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_boolean_res*>(&from));
}

void fmi2_import_set_boolean_res::MergeFrom(const fmi2_import_set_boolean_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_boolean_res::CopyFrom(const fmi2_import_set_boolean_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_boolean_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_boolean_res::Swap(fmi2_import_set_boolean_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_boolean_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_boolean_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_string_req::kMessageIdFieldNumber;
const int fmi2_import_set_string_req::kFmuIdFieldNumber;
const int fmi2_import_set_string_req::kValueReferencesFieldNumber;
const int fmi2_import_set_string_req::kValuesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_string_req::fmi2_import_set_string_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_string_req::InitAsDefaultInstance() {
}

fmi2_import_set_string_req::fmi2_import_set_string_req(const fmi2_import_set_string_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_string_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_string_req::~fmi2_import_set_string_req() {
  SharedDtor();
}

void fmi2_import_set_string_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_string_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_string_req& fmi2_import_set_string_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_string_req* fmi2_import_set_string_req::default_instance_ = NULL;

fmi2_import_set_string_req* fmi2_import_set_string_req::New() const {
  return new fmi2_import_set_string_req;
}

void fmi2_import_set_string_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_string_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // repeated string values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_string_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

  // repeated string values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->values(i), output);
  }

}

int fmi2_import_set_string_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  // repeated string values = 4;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_string_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_string_req*>(&from));
}

void fmi2_import_set_string_req::MergeFrom(const fmi2_import_set_string_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_set_string_req::CopyFrom(const fmi2_import_set_string_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_string_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_string_req::Swap(fmi2_import_set_string_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_string_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_string_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_string_res::kMessageIdFieldNumber;
const int fmi2_import_set_string_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_string_res::fmi2_import_set_string_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_string_res::InitAsDefaultInstance() {
}

fmi2_import_set_string_res::fmi2_import_set_string_res(const fmi2_import_set_string_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_string_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_string_res::~fmi2_import_set_string_res() {
  SharedDtor();
}

void fmi2_import_set_string_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_string_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_string_res& fmi2_import_set_string_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_string_res* fmi2_import_set_string_res::default_instance_ = NULL;

fmi2_import_set_string_res* fmi2_import_set_string_res::New() const {
  return new fmi2_import_set_string_res;
}

void fmi2_import_set_string_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_string_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_string_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_string_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_string_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_string_res*>(&from));
}

void fmi2_import_set_string_res::MergeFrom(const fmi2_import_set_string_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_string_res::CopyFrom(const fmi2_import_set_string_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_string_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_string_res::Swap(fmi2_import_set_string_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_string_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_string_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_req::kMessageIdFieldNumber;
const int fmi2_import_get_real_req::kFmuIdFieldNumber;
const int fmi2_import_get_real_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_req::fmi2_import_get_real_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_req::InitAsDefaultInstance() {
}

fmi2_import_get_real_req::fmi2_import_get_real_req(const fmi2_import_get_real_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_req::~fmi2_import_get_real_req() {
  SharedDtor();
}

void fmi2_import_get_real_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_req& fmi2_import_get_real_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_req* fmi2_import_get_real_req::default_instance_ = NULL;

fmi2_import_get_real_req* fmi2_import_get_real_req::New() const {
  return new fmi2_import_get_real_req;
}

void fmi2_import_get_real_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

}

int fmi2_import_get_real_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_req*>(&from));
}

void fmi2_import_get_real_req::MergeFrom(const fmi2_import_get_real_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_real_req::CopyFrom(const fmi2_import_get_real_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_real_req::Swap(fmi2_import_get_real_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_real_res::kMessageIdFieldNumber;
const int fmi2_import_get_real_res::kValuesFieldNumber;
const int fmi2_import_get_real_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_real_res::fmi2_import_get_real_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_real_res::InitAsDefaultInstance() {
}

fmi2_import_get_real_res::fmi2_import_get_real_res(const fmi2_import_get_real_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_real_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_real_res::~fmi2_import_get_real_res() {
  SharedDtor();
}

void fmi2_import_get_real_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_real_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_real_res& fmi2_import_get_real_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_real_res* fmi2_import_get_real_res::default_instance_ = NULL;

fmi2_import_get_real_res* fmi2_import_get_real_res::New() const {
  return new fmi2_import_get_real_res;
}

void fmi2_import_get_real_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_real_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_values;
        break;
      }

      // repeated double values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_real_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_real_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double values = 2;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_real_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_real_res*>(&from));
}

void fmi2_import_get_real_res::MergeFrom(const fmi2_import_get_real_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_real_res::CopyFrom(const fmi2_import_get_real_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_real_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_real_res::Swap(fmi2_import_get_real_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_real_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_real_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_req::kMessageIdFieldNumber;
const int fmi2_import_get_integer_req::kFmuIdFieldNumber;
const int fmi2_import_get_integer_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_req::fmi2_import_get_integer_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_integer_req::InitAsDefaultInstance() {
}

fmi2_import_get_integer_req::fmi2_import_get_integer_req(const fmi2_import_get_integer_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_req::~fmi2_import_get_integer_req() {
  SharedDtor();
}

void fmi2_import_get_integer_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_integer_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_integer_req& fmi2_import_get_integer_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_integer_req* fmi2_import_get_integer_req::default_instance_ = NULL;

fmi2_import_get_integer_req* fmi2_import_get_integer_req::New() const {
  return new fmi2_import_get_integer_req;
}

void fmi2_import_get_integer_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_integer_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

}

int fmi2_import_get_integer_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_integer_req*>(&from));
}

void fmi2_import_get_integer_req::MergeFrom(const fmi2_import_get_integer_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_integer_req::CopyFrom(const fmi2_import_get_integer_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_integer_req::Swap(fmi2_import_get_integer_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_integer_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_integer_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_integer_res::kMessageIdFieldNumber;
const int fmi2_import_get_integer_res::kValuesFieldNumber;
const int fmi2_import_get_integer_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_integer_res::fmi2_import_get_integer_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_integer_res::InitAsDefaultInstance() {
}

fmi2_import_get_integer_res::fmi2_import_get_integer_res(const fmi2_import_get_integer_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_integer_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_integer_res::~fmi2_import_get_integer_res() {
  SharedDtor();
}

void fmi2_import_get_integer_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_integer_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_integer_res& fmi2_import_get_integer_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_integer_res* fmi2_import_get_integer_res::default_instance_ = NULL;

fmi2_import_get_integer_res* fmi2_import_get_integer_res::New() const {
  return new fmi2_import_get_integer_res;
}

void fmi2_import_get_integer_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_integer_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated int32 values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_integer_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated int32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_integer_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_integer_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_integer_res*>(&from));
}

void fmi2_import_get_integer_res::MergeFrom(const fmi2_import_get_integer_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_integer_res::CopyFrom(const fmi2_import_get_integer_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_integer_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_integer_res::Swap(fmi2_import_get_integer_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_integer_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_integer_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_req::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_req::kFmuIdFieldNumber;
const int fmi2_import_get_boolean_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_req::fmi2_import_get_boolean_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_boolean_req::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_req::fmi2_import_get_boolean_req(const fmi2_import_get_boolean_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_req::~fmi2_import_get_boolean_req() {
  SharedDtor();
}

void fmi2_import_get_boolean_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_boolean_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_boolean_req& fmi2_import_get_boolean_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_boolean_req* fmi2_import_get_boolean_req::default_instance_ = NULL;

fmi2_import_get_boolean_req* fmi2_import_get_boolean_req::New() const {
  return new fmi2_import_get_boolean_req;
}

void fmi2_import_get_boolean_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_boolean_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

}

int fmi2_import_get_boolean_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_boolean_req*>(&from));
}

void fmi2_import_get_boolean_req::MergeFrom(const fmi2_import_get_boolean_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_boolean_req::CopyFrom(const fmi2_import_get_boolean_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_boolean_req::Swap(fmi2_import_get_boolean_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_boolean_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_boolean_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_boolean_res::kMessageIdFieldNumber;
const int fmi2_import_get_boolean_res::kValuesFieldNumber;
const int fmi2_import_get_boolean_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_boolean_res::fmi2_import_get_boolean_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_boolean_res::InitAsDefaultInstance() {
}

fmi2_import_get_boolean_res::fmi2_import_get_boolean_res(const fmi2_import_get_boolean_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_boolean_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_boolean_res::~fmi2_import_get_boolean_res() {
  SharedDtor();
}

void fmi2_import_get_boolean_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_boolean_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_boolean_res& fmi2_import_get_boolean_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_boolean_res* fmi2_import_get_boolean_res::default_instance_ = NULL;

fmi2_import_get_boolean_res* fmi2_import_get_boolean_res::New() const {
  return new fmi2_import_get_boolean_res;
}

void fmi2_import_get_boolean_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_boolean_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated bool values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_boolean_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated bool values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_boolean_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated bool values = 2;
  {
    int data_size = 0;
    data_size = 1 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_boolean_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_boolean_res*>(&from));
}

void fmi2_import_get_boolean_res::MergeFrom(const fmi2_import_get_boolean_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_boolean_res::CopyFrom(const fmi2_import_get_boolean_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_boolean_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_boolean_res::Swap(fmi2_import_get_boolean_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_boolean_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_boolean_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_req::kMessageIdFieldNumber;
const int fmi2_import_get_string_req::kFmuIdFieldNumber;
const int fmi2_import_get_string_req::kValueReferencesFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_req::fmi2_import_get_string_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_string_req::InitAsDefaultInstance() {
}

fmi2_import_get_string_req::fmi2_import_get_string_req(const fmi2_import_get_string_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_req::~fmi2_import_get_string_req() {
  SharedDtor();
}

void fmi2_import_get_string_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_string_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_string_req& fmi2_import_get_string_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_string_req* fmi2_import_get_string_req::default_instance_ = NULL;

fmi2_import_get_string_req* fmi2_import_get_string_req::New() const {
  return new fmi2_import_get_string_req;
}

void fmi2_import_get_string_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  valuereferences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_string_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        break;
      }

      // repeated int32 valueReferences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueReferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_valuereferences())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuereferences())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueReferences;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 valueReferences = 3;
  for (int i = 0; i < this->valuereferences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->valuereferences(i), output);
  }

}

int fmi2_import_get_string_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 valueReferences = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuereferences_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->valuereferences(i));
    }
    total_size += 1 * this->valuereferences_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_string_req*>(&from));
}

void fmi2_import_get_string_req::MergeFrom(const fmi2_import_get_string_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  valuereferences_.MergeFrom(from.valuereferences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_string_req::CopyFrom(const fmi2_import_get_string_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_string_req::Swap(fmi2_import_get_string_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    valuereferences_.Swap(&other->valuereferences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_string_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_string_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_string_res::kMessageIdFieldNumber;
const int fmi2_import_get_string_res::kValuesFieldNumber;
const int fmi2_import_get_string_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_string_res::fmi2_import_get_string_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_string_res::InitAsDefaultInstance() {
}

fmi2_import_get_string_res::fmi2_import_get_string_res(const fmi2_import_get_string_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_string_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_string_res::~fmi2_import_get_string_res() {
  SharedDtor();
}

void fmi2_import_get_string_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_string_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_string_res& fmi2_import_get_string_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_string_res* fmi2_import_get_string_res::default_instance_ = NULL;

fmi2_import_get_string_res* fmi2_import_get_string_res::New() const {
  return new fmi2_import_get_string_res;
}

void fmi2_import_get_string_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_string_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_string_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_string_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_string_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_string_res*>(&from));
}

void fmi2_import_get_string_res::MergeFrom(const fmi2_import_get_string_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_string_res::CopyFrom(const fmi2_import_get_string_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_string_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_string_res::Swap(fmi2_import_get_string_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    values_.Swap(&other->values_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_string_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_string_res";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

char_req::char_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void char_req::InitAsDefaultInstance() {
}

char_req::char_req(const char_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void char_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

char_req::~char_req() {
  SharedDtor();
}

void char_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void char_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const char_req& char_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

char_req* char_req::default_instance_ = NULL;

char_req* char_req::New() const {
  return new char_req;
}

void char_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool char_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void char_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int char_req::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void char_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const char_req*>(&from));
}

void char_req::MergeFrom(const char_req& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void char_req::CopyFrom(const char_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool char_req::IsInitialized() const {

  return true;
}

void char_req::Swap(char_req* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string char_req::GetTypeName() const {
  return "fmitcp_proto.char_req";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

char_res::char_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void char_res::InitAsDefaultInstance() {
}

char_res::char_res(const char_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void char_res::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

char_res::~char_res() {
  SharedDtor();
}

void char_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void char_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const char_res& char_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

char_res* char_res::default_instance_ = NULL;

char_res* char_res::New() const {
  return new char_res;
}

void char_res::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool char_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void char_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int char_res::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void char_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const char_res*>(&from));
}

void char_res::MergeFrom(const char_res& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void char_res::CopyFrom(const char_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool char_res::IsInitialized() const {

  return true;
}

void char_res::Swap(char_res* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string char_res::GetTypeName() const {
  return "fmitcp_proto.char_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_get_fmu_state_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_fmu_state_req::fmi2_import_get_fmu_state_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_get_fmu_state_req::fmi2_import_get_fmu_state_req(const fmi2_import_get_fmu_state_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_fmu_state_req::~fmi2_import_get_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_get_fmu_state_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_fmu_state_req& fmi2_import_get_fmu_state_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_fmu_state_req* fmi2_import_get_fmu_state_req::default_instance_ = NULL;

fmi2_import_get_fmu_state_req* fmi2_import_get_fmu_state_req::New() const {
  return new fmi2_import_get_fmu_state_req;
}

void fmi2_import_get_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int fmi2_import_get_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_fmu_state_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_fmu_state_req*>(&from));
}

void fmi2_import_get_fmu_state_req::MergeFrom(const fmi2_import_get_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_fmu_state_req::CopyFrom(const fmi2_import_get_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_fmu_state_req::Swap(fmi2_import_get_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_fmu_state_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_fmu_state_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_get_fmu_state_res::kStateIdFieldNumber;
const int fmi2_import_get_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_fmu_state_res::fmi2_import_get_fmu_state_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_get_fmu_state_res::fmi2_import_get_fmu_state_res(const fmi2_import_get_fmu_state_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  stateid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_fmu_state_res::~fmi2_import_get_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_get_fmu_state_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_fmu_state_res& fmi2_import_get_fmu_state_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_fmu_state_res* fmi2_import_get_fmu_state_res::default_instance_ = NULL;

fmi2_import_get_fmu_state_res* fmi2_import_get_fmu_state_res::New() const {
  return new fmi2_import_get_fmu_state_res;
}

void fmi2_import_get_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    stateid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stateid(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 stateId = 2;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_fmu_state_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_fmu_state_res*>(&from));
}

void fmi2_import_get_fmu_state_res::MergeFrom(const fmi2_import_get_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_fmu_state_res::CopyFrom(const fmi2_import_get_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_get_fmu_state_res::Swap(fmi2_import_get_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(stateid_, other->stateid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_fmu_state_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_fmu_state_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_set_fmu_state_req::kFmuIdFieldNumber;
const int fmi2_import_set_fmu_state_req::kStateIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_fmu_state_req::fmi2_import_set_fmu_state_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_set_fmu_state_req::fmi2_import_set_fmu_state_req(const fmi2_import_set_fmu_state_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  stateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_fmu_state_req::~fmi2_import_set_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_set_fmu_state_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_fmu_state_req& fmi2_import_set_fmu_state_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_fmu_state_req* fmi2_import_set_fmu_state_req::default_instance_ = NULL;

fmi2_import_set_fmu_state_req* fmi2_import_set_fmu_state_req::New() const {
  return new fmi2_import_set_fmu_state_req;
}

void fmi2_import_set_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
    stateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // required int32 stateId = 3;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stateid(), output);
  }

}

int fmi2_import_set_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

    // required int32 stateId = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_fmu_state_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_fmu_state_req*>(&from));
}

void fmi2_import_set_fmu_state_req::MergeFrom(const fmi2_import_set_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
}

void fmi2_import_set_fmu_state_req::CopyFrom(const fmi2_import_set_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void fmi2_import_set_fmu_state_req::Swap(fmi2_import_set_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_fmu_state_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_fmu_state_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_set_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_set_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_set_fmu_state_res::fmi2_import_set_fmu_state_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_set_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_set_fmu_state_res::fmi2_import_set_fmu_state_res(const fmi2_import_set_fmu_state_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_set_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_set_fmu_state_res::~fmi2_import_set_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_set_fmu_state_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_set_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_set_fmu_state_res& fmi2_import_set_fmu_state_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_set_fmu_state_res* fmi2_import_set_fmu_state_res::default_instance_ = NULL;

fmi2_import_set_fmu_state_res* fmi2_import_set_fmu_state_res::New() const {
  return new fmi2_import_set_fmu_state_res;
}

void fmi2_import_set_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_set_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_set_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_set_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_set_fmu_state_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_set_fmu_state_res*>(&from));
}

void fmi2_import_set_fmu_state_res::MergeFrom(const fmi2_import_set_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_set_fmu_state_res::CopyFrom(const fmi2_import_set_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_set_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_set_fmu_state_res::Swap(fmi2_import_set_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_set_fmu_state_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_set_fmu_state_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_fmu_state_req::kMessageIdFieldNumber;
const int fmi2_import_free_fmu_state_req::kStateIdFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_fmu_state_req::fmi2_import_free_fmu_state_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_fmu_state_req::InitAsDefaultInstance() {
}

fmi2_import_free_fmu_state_req::fmi2_import_free_fmu_state_req(const fmi2_import_free_fmu_state_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  stateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_fmu_state_req::~fmi2_import_free_fmu_state_req() {
  SharedDtor();
}

void fmi2_import_free_fmu_state_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_fmu_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_fmu_state_req& fmi2_import_free_fmu_state_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_fmu_state_req* fmi2_import_free_fmu_state_req::default_instance_ = NULL;

fmi2_import_free_fmu_state_req* fmi2_import_free_fmu_state_req::New() const {
  return new fmi2_import_free_fmu_state_req;
}

void fmi2_import_free_fmu_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    stateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_fmu_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateId;
        break;
      }

      // required int32 stateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_fmu_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 stateId = 2;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stateid(), output);
  }

}

int fmi2_import_free_fmu_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 stateId = 2;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_fmu_state_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_fmu_state_req*>(&from));
}

void fmi2_import_free_fmu_state_req::MergeFrom(const fmi2_import_free_fmu_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
}

void fmi2_import_free_fmu_state_req::CopyFrom(const fmi2_import_free_fmu_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_fmu_state_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_fmu_state_req::Swap(fmi2_import_free_fmu_state_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_fmu_state_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_fmu_state_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_free_fmu_state_res::kMessageIdFieldNumber;
const int fmi2_import_free_fmu_state_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_free_fmu_state_res::fmi2_import_free_fmu_state_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_free_fmu_state_res::InitAsDefaultInstance() {
}

fmi2_import_free_fmu_state_res::fmi2_import_free_fmu_state_res(const fmi2_import_free_fmu_state_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_free_fmu_state_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_free_fmu_state_res::~fmi2_import_free_fmu_state_res() {
  SharedDtor();
}

void fmi2_import_free_fmu_state_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_free_fmu_state_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_free_fmu_state_res& fmi2_import_free_fmu_state_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_free_fmu_state_res* fmi2_import_free_fmu_state_res::default_instance_ = NULL;

fmi2_import_free_fmu_state_res* fmi2_import_free_fmu_state_res::New() const {
  return new fmi2_import_free_fmu_state_res;
}

void fmi2_import_free_fmu_state_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_free_fmu_state_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_free_fmu_state_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int fmi2_import_free_fmu_state_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_free_fmu_state_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_free_fmu_state_res*>(&from));
}

void fmi2_import_free_fmu_state_res::MergeFrom(const fmi2_import_free_fmu_state_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_free_fmu_state_res::CopyFrom(const fmi2_import_free_fmu_state_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_free_fmu_state_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_free_fmu_state_res::Swap(fmi2_import_free_fmu_state_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_free_fmu_state_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_free_fmu_state_res";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_directional_derivative_req::kMessageIdFieldNumber;
const int fmi2_import_get_directional_derivative_req::kFmuIdFieldNumber;
const int fmi2_import_get_directional_derivative_req::kVRefFieldNumber;
const int fmi2_import_get_directional_derivative_req::kZRefFieldNumber;
const int fmi2_import_get_directional_derivative_req::kDvFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_directional_derivative_req::fmi2_import_get_directional_derivative_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_directional_derivative_req::InitAsDefaultInstance() {
}

fmi2_import_get_directional_derivative_req::fmi2_import_get_directional_derivative_req(const fmi2_import_get_directional_derivative_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_directional_derivative_req::~fmi2_import_get_directional_derivative_req() {
  SharedDtor();
}

void fmi2_import_get_directional_derivative_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_directional_derivative_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_directional_derivative_req& fmi2_import_get_directional_derivative_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_directional_derivative_req* fmi2_import_get_directional_derivative_req::default_instance_ = NULL;

fmi2_import_get_directional_derivative_req* fmi2_import_get_directional_derivative_req::New() const {
  return new fmi2_import_get_directional_derivative_req;
}

void fmi2_import_get_directional_derivative_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  v_ref_.Clear();
  z_ref_.Clear();
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_directional_derivative_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_ref;
        break;
      }

      // repeated int32 v_ref = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_v_ref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_v_ref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_ref;
        if (input->ExpectTag(32)) goto parse_z_ref;
        break;
      }

      // repeated int32 z_ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_z_ref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_z_ref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_z_ref;
        if (input->ExpectTag(41)) goto parse_dv;
        break;
      }

      // repeated double dv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_dv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_dv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_directional_derivative_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

  // repeated int32 v_ref = 3;
  for (int i = 0; i < this->v_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->v_ref(i), output);
  }

  // repeated int32 z_ref = 4;
  for (int i = 0; i < this->z_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->z_ref(i), output);
  }

  // repeated double dv = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->dv(i), output);
  }

}

int fmi2_import_get_directional_derivative_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  // repeated int32 v_ref = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->v_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->v_ref(i));
    }
    total_size += 1 * this->v_ref_size() + data_size;
  }

  // repeated int32 z_ref = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->z_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->z_ref(i));
    }
    total_size += 1 * this->z_ref_size() + data_size;
  }

  // repeated double dv = 5;
  {
    int data_size = 0;
    data_size = 8 * this->dv_size();
    total_size += 1 * this->dv_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_directional_derivative_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_directional_derivative_req*>(&from));
}

void fmi2_import_get_directional_derivative_req::MergeFrom(const fmi2_import_get_directional_derivative_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  v_ref_.MergeFrom(from.v_ref_);
  z_ref_.MergeFrom(from.z_ref_);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void fmi2_import_get_directional_derivative_req::CopyFrom(const fmi2_import_get_directional_derivative_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_directional_derivative_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fmi2_import_get_directional_derivative_req::Swap(fmi2_import_get_directional_derivative_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    v_ref_.Swap(&other->v_ref_);
    z_ref_.Swap(&other->z_ref_);
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_directional_derivative_req::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_directional_derivative_req";
}


// ===================================================================

#ifndef _MSC_VER
const int fmi2_import_get_directional_derivative_res::kMessageIdFieldNumber;
const int fmi2_import_get_directional_derivative_res::kDzFieldNumber;
const int fmi2_import_get_directional_derivative_res::kStatusFieldNumber;
#endif  // !_MSC_VER

fmi2_import_get_directional_derivative_res::fmi2_import_get_directional_derivative_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fmi2_import_get_directional_derivative_res::InitAsDefaultInstance() {
}

fmi2_import_get_directional_derivative_res::fmi2_import_get_directional_derivative_res(const fmi2_import_get_directional_derivative_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fmi2_import_get_directional_derivative_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fmi2_import_get_directional_derivative_res::~fmi2_import_get_directional_derivative_res() {
  SharedDtor();
}

void fmi2_import_get_directional_derivative_res::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fmi2_import_get_directional_derivative_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fmi2_import_get_directional_derivative_res& fmi2_import_get_directional_derivative_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

fmi2_import_get_directional_derivative_res* fmi2_import_get_directional_derivative_res::default_instance_ = NULL;

fmi2_import_get_directional_derivative_res* fmi2_import_get_directional_derivative_res::New() const {
  return new fmi2_import_get_directional_derivative_res;
}

void fmi2_import_get_directional_derivative_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    status_ = 0;
  }
  dz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fmi2_import_get_directional_derivative_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dz;
        break;
      }

      // repeated double dz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_dz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dz;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .fmitcp_proto.fmi2_status_t status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::fmi2_status_t_IsValid(value)) {
            set_status(static_cast< ::fmitcp_proto::fmi2_status_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fmi2_import_get_directional_derivative_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // repeated double dz = 2;
  for (int i = 0; i < this->dz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->dz(i), output);
  }

  // required .fmitcp_proto.fmi2_status_t status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

}

int fmi2_import_get_directional_derivative_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.fmi2_status_t status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated double dz = 2;
  {
    int data_size = 0;
    data_size = 8 * this->dz_size();
    total_size += 1 * this->dz_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fmi2_import_get_directional_derivative_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fmi2_import_get_directional_derivative_res*>(&from));
}

void fmi2_import_get_directional_derivative_res::MergeFrom(const fmi2_import_get_directional_derivative_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  dz_.MergeFrom(from.dz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void fmi2_import_get_directional_derivative_res::CopyFrom(const fmi2_import_get_directional_derivative_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fmi2_import_get_directional_derivative_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void fmi2_import_get_directional_derivative_res::Swap(fmi2_import_get_directional_derivative_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    dz_.Swap(&other->dz_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fmi2_import_get_directional_derivative_res::GetTypeName() const {
  return "fmitcp_proto.fmi2_import_get_directional_derivative_res";
}


// ===================================================================

#ifndef _MSC_VER
const int get_xml_req::kMessageIdFieldNumber;
const int get_xml_req::kFmuIdFieldNumber;
#endif  // !_MSC_VER

get_xml_req::get_xml_req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void get_xml_req::InitAsDefaultInstance() {
}

get_xml_req::get_xml_req(const get_xml_req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void get_xml_req::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  fmuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_xml_req::~get_xml_req() {
  SharedDtor();
}

void get_xml_req::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void get_xml_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const get_xml_req& get_xml_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

get_xml_req* get_xml_req::default_instance_ = NULL;

get_xml_req* get_xml_req::New() const {
  return new get_xml_req;
}

void get_xml_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    fmuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool get_xml_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fmuId;
        break;
      }

      // required int32 fmuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmuid_)));
          set_has_fmuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_xml_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required int32 fmuId = 2;
  if (has_fmuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fmuid(), output);
  }

}

int get_xml_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required int32 fmuId = 2;
    if (has_fmuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_xml_req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const get_xml_req*>(&from));
}

void get_xml_req::MergeFrom(const get_xml_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_fmuid()) {
      set_fmuid(from.fmuid());
    }
  }
}

void get_xml_req::CopyFrom(const get_xml_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_xml_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void get_xml_req::Swap(get_xml_req* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(fmuid_, other->fmuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string get_xml_req::GetTypeName() const {
  return "fmitcp_proto.get_xml_req";
}


// ===================================================================

#ifndef _MSC_VER
const int get_xml_res::kMessageIdFieldNumber;
const int get_xml_res::kLogLevelFieldNumber;
const int get_xml_res::kXmlFieldNumber;
#endif  // !_MSC_VER

get_xml_res::get_xml_res()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void get_xml_res::InitAsDefaultInstance() {
}

get_xml_res::get_xml_res(const get_xml_res& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void get_xml_res::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  loglevel_ = 0;
  xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_xml_res::~get_xml_res() {
  SharedDtor();
}

void get_xml_res::SharedDtor() {
  if (xml_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void get_xml_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const get_xml_res& get_xml_res::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fmitcp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fmitcp_2eproto();
#endif
  return *default_instance_;
}

get_xml_res* get_xml_res::default_instance_ = NULL;

get_xml_res* get_xml_res::New() const {
  return new get_xml_res;
}

void get_xml_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0;
    loglevel_ = 0;
    if (has_xml()) {
      if (xml_ != &::google::protobuf::internal::kEmptyString) {
        xml_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool get_xml_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logLevel;
        break;
      }

      // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logLevel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fmitcp_proto::jm_log_level_enu_t_IsValid(value)) {
            set_loglevel(static_cast< ::fmitcp_proto::jm_log_level_enu_t >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xml;
        break;
      }

      // required string xml = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_xml_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
  if (has_loglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loglevel(), output);
  }

  // required string xml = 3;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->xml(), output);
  }

}

int get_xml_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required .fmitcp_proto.jm_log_level_enu_t logLevel = 2;
    if (has_loglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loglevel());
    }

    // required string xml = 3;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_xml_res::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const get_xml_res*>(&from));
}

void get_xml_res::MergeFrom(const get_xml_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_loglevel()) {
      set_loglevel(from.loglevel());
    }
    if (from.has_xml()) {
      set_xml(from.xml());
    }
  }
}

void get_xml_res::CopyFrom(const get_xml_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_xml_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void get_xml_res::Swap(get_xml_res* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(loglevel_, other->loglevel_);
    std::swap(xml_, other->xml_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string get_xml_res::GetTypeName() const {
  return "fmitcp_proto.get_xml_res";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fmitcp_proto

// @@protoc_insertion_point(global_scope)
